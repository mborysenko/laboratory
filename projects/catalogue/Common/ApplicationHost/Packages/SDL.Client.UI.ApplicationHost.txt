/*62949,21190,12757,379,7882*//// <reference path="../../../../SDL.Client/SDL.Client.Core/ApplicationHost/ApplicationHost.d.ts" />
/// <reference path="../../../../SDL.Client/SDL.Client.Core/Types/Url.d.ts" />
/// <reference path="../../../../SDL.Client/SDL.Client.UI.Core.Knockout/Libraries/knockout/knockout.d.ts" />
var SDL;
(function (SDL) {
    (function (Client) {
        (function (UI) {
            (function (ApplicationHost) {
                (function (ViewModels) {
                    (function (Navigation) {
                        var Url = SDL.Client.Types.Url;
                        var AppHost = SDL.Client.ApplicationHost;

                        SDL.Client.Xml.Namespaces["apphost"] = "http://www.sdl.com/2013/ApplicationHost";

                        ;

                        ;

                        ;

                        ;

                        ;

                        Navigation.navigationGroups = [];
                        Navigation.topNavigationGroup = null;
                        Navigation.homeNavigationItem;
                        Navigation.currentNavigationItem = ko.observable(null);
                        Navigation.currentNavigationGroup = ko.observable(null);
                        Navigation.authenticationTargetDisplays = null;
                        Navigation.navigationItemTargetDisplays = null;

                        var navigationItemsIndex = {};
                        var applicationAuthenticationTargetDisplays = {};
                        var applicationNavigationItemTargetDisplaysIndex = {};
                        var initialized = false;
                        var initCallbacks = [];

                        function selectNavigationItem(navigationItem) {
                            if (navigationItem) {
                                if (navigationItem.external) {
                                    window.open(navigationItem.src());
                                } else if (Navigation.currentNavigationItem() != navigationItem) {
                                    Navigation.currentNavigationItem(navigationItem);
                                }
                            }
                        }
                        Navigation.selectNavigationItem = selectNavigationItem;

                        function setNavigationSelectionFromUrl(ignoreErrors) {
                            var newAppId = Url.getHashParameter(window.location.href, "app");
                            var newEntryId = Url.getHashParameter(window.location.href, "entry");
                            var newGroupId = Url.getHashParameter(window.location.href, "group");

                            if (newEntryId || (newAppId && !newGroupId)) {
                                var prevNavItem = Navigation.currentNavigationItem();
                                var prevApplicationEntryPoint = prevNavItem && prevNavItem.applicationEntryPoint;
                                var prevAppId = prevApplicationEntryPoint && prevApplicationEntryPoint.application.id || null;
                                var prevEntryId = prevApplicationEntryPoint && prevApplicationEntryPoint.id || null;
                                var prevSrc = prevNavItem && prevNavItem.src() || null;
                                var newSrc = Url.getHashParameter(window.location.href, "url") || "";

                                if (newAppId != prevAppId || newEntryId != prevEntryId || newSrc != prevSrc) {
                                    var newNavItem = getNavigationItemById(newEntryId, newAppId) || (newAppId ? getNavigationItemById(null, newAppId) : null);

                                    if (newNavItem && !newNavItem.external && !newNavItem.hidden()) {
                                        if (newNavItem.applicationEntryPoint) {
                                            if (ignoreErrors) {
                                                try  {
                                                    AppHost.ApplicationHost.setApplicationEntryPointUrl(newNavItem.id, newSrc, newAppId);
                                                } catch (err) {
                                                    if (window.console) {
                                                        window.console.error(err.message);
                                                    }
                                                }
                                            } else {
                                                AppHost.ApplicationHost.setApplicationEntryPointUrl(newNavItem.id, newSrc, newAppId);
                                            }
                                        }

                                        if (prevNavItem != newNavItem) {
                                            selectNavigationItem(newNavItem);
                                            AppHost.ApplicationHost.setActiveApplicationEntryPoint(newNavItem.applicationEntryPoint && newNavItem.applicationEntryPoint.id, newNavItem.applicationEntryPoint && newNavItem.applicationEntryPoint.application.id);
                                        }
                                    }
                                }
                                return;
                            }

                            if (newGroupId) {
                                var prevGroup = Navigation.currentNavigationGroup();
                                if (!prevGroup || prevGroup.id != newGroupId) {
                                    var group = getNavigationGroupById(newGroupId, newAppId);
                                    if (group && group.authenticationTargetDisplay && group.authenticationTargetDisplay()) {
                                        Navigation.currentNavigationGroup(group);
                                        selectNavigationItem(null);
                                        AppHost.ApplicationHost.setActiveApplicationEntryPoint(null, null);
                                    }
                                }
                                return;
                            }

                            if (Navigation.currentNavigationItem() != Navigation.homeNavigationItem) {
                                selectNavigationItem(Navigation.homeNavigationItem);
                                AppHost.ApplicationHost.setActiveApplicationEntryPoint(Navigation.homeNavigationItem.applicationEntryPoint && Navigation.homeNavigationItem.applicationEntryPoint.id, Navigation.homeNavigationItem.applicationEntryPoint && Navigation.homeNavigationItem.applicationEntryPoint.application.id);
                            }
                        }
                        Navigation.setNavigationSelectionFromUrl = setNavigationSelectionFromUrl;

                        function initialize(callback) {
                            if (!initialized) {
                                if (callback) {
                                    initCallbacks.push(callback);
                                }

                                if (initialized === false) {
                                    initialized = undefined;

                                    AppHost.ApplicationHost.initialize(function () {
                                        initializeNavigationViewModel();
                                        initialized = true;
                                        for (var i = 0, len = initCallbacks.length; i < len; i++) {
                                            initCallbacks[i]();
                                        }
                                        initCallbacks = undefined;
                                    });
                                }
                            } else if (callback) {
                                callback();
                            }
                        }
                        Navigation.initialize = initialize;
                        ;

                        function getNavigationItemById(navigationItemId, applicationId) {
                            var navigationItem;
                            if (Navigation.homeNavigationItem && (!navigationItemId || Navigation.homeNavigationItem.id == navigationItemId) && (!applicationId || Navigation.homeNavigationItem.applicationEntryPoint && Navigation.homeNavigationItem.applicationEntryPoint.application.id == applicationId)) {
                                return Navigation.homeNavigationItem;
                            } else {
                                for (var i = 0, len = Navigation.navigationGroups.length; i < len; i++) {
                                    var navigationItems = Navigation.navigationGroups[i].navigationItems;
                                    for (var j = 0, lenj = navigationItems.length; j < lenj; j++) {
                                        var item = navigationItems[j];
                                        if (item && (!navigationItemId || item.id == navigationItemId) && (!applicationId || item.applicationEntryPoint.application.id == applicationId)) {
                                            return item;
                                        }
                                    }
                                }
                            }
                        }
                        Navigation.getNavigationItemById = getNavigationItemById;
                        ;

                        function loadTargetDisplayForNavigationItem(navigationItem) {
                            if (!navigationItem.hidden()) {
                                var targetDisplay = navigationItem.targetDisplay;

                                if (targetDisplay) {
                                    var curNavigationItem = targetDisplay.navigationItem();
                                    if (curNavigationItem != navigationItem) {
                                        targetDisplay.navigationItem(navigationItem);
                                        if (!curNavigationItem) {
                                            navigationItem.targetDisplay.src = navigationItem.src();
                                            navigationItem.targetDisplay.accessed(true);
                                        }
                                    }
                                }
                            }
                        }
                        ;

                        function initializeNavigationViewModel() {
                            var navigationNode = SDL.Client.Xml.selectSingleNode(SDL.Client.Configuration.ConfigurationManager.configuration, "//configuration/customSections/apphost:navigation");
                            if (navigationNode) {
                                // navigation is defined in configuration
                                var navigationGroupNodes = SDL.Client.Xml.selectNodes(navigationNode, "apphost:navigationGroup");
                                Navigation.navigationGroups = SDL.jQuery.map(navigationGroupNodes, function (navigationGroupNode, index) {
                                    var applicationEntryPointGroupId = navigationGroupNode.getAttribute("applicationEntryPointGroupId");
                                    if (applicationEntryPointGroupId) {
                                        return buildNavigationGroupForApplicationEntryPointGroup(getApplicationEntryPointGroupById(navigationGroupNode.getAttribute("applicationSuiteId"), applicationEntryPointGroupId), index == 0, navigationGroupNode);
                                    } else {
                                        return buildNavigationGroup(navigationGroupNode, index == 0);
                                    }
                                });
                            } else {
                                // navigation is built based on application host data
                                Navigation.navigationGroups = SDL.jQuery.map(AppHost.ApplicationHost.applications, function (application, index) {
                                    return SDL.jQuery.map(application.entryPointGroups, function (group, index) {
                                        return buildNavigationGroupForApplicationEntryPointGroup(group, index == 0);
                                    });
                                });
                            }

                            Navigation.authenticationTargetDisplays = SDL.jQuery.map(applicationAuthenticationTargetDisplays, function (display, index) {
                                return display;
                            });
                            Navigation.navigationItemTargetDisplays = SDL.jQuery.map(applicationNavigationItemTargetDisplaysIndex, function (displays, index) {
                                return SDL.jQuery.map(displays, function (display, index) {
                                    return display;
                                });
                            });

                            orderNavigationItems();
                            createTopNavigationGroup();

                            Navigation.currentNavigationItem.subscribe(function () {
                                var navItem = Navigation.currentNavigationItem();
                                if (navItem) {
                                    if (Navigation.currentNavigationGroup()) {
                                        Navigation.currentNavigationGroup(null);
                                    }

                                    if (navItem.contextual()) {
                                        navItem.contextual(false);
                                        if (!navItem.hidden()) {
                                            navItem.navigationGroup.shownItems(navItem.navigationGroup.shownItems() + 1);
                                        }
                                    }

                                    var authenticationTargetDisplay = navItem.navigationGroup && navItem.navigationGroup.authenticationTargetDisplay && navItem.navigationGroup.authenticationTargetDisplay();
                                    if (authenticationTargetDisplay) {
                                        if (authenticationTargetDisplay.navigationGroup() != navItem.navigationGroup) {
                                            authenticationTargetDisplay.navigationGroup(navItem.navigationGroup);
                                            authenticationTargetDisplay.accessed(true);
                                        }
                                    } else {
                                        loadTargetDisplayForNavigationItem(navItem);
                                    }

                                    if (!navItem.hidden()) {
                                        var appEntryPoint = navItem.applicationEntryPoint;
                                        AppHost.ApplicationHost.setActiveApplicationEntryPoint(appEntryPoint && appEntryPoint.id, appEntryPoint && appEntryPoint.application.id);
                                        return;
                                    }
                                }

                                AppHost.ApplicationHost.setActiveApplicationEntryPoint(null, null);
                            });

                            Navigation.currentNavigationGroup.subscribe(function () {
                                var navGroup = Navigation.currentNavigationGroup();
                                if (navGroup) {
                                    if (Navigation.currentNavigationItem()) {
                                        Navigation.currentNavigationItem(null);
                                    }

                                    var targetDisplay = navGroup.authenticationTargetDisplay && navGroup.authenticationTargetDisplay();
                                    if (targetDisplay && targetDisplay.navigationGroup() != navGroup) {
                                        targetDisplay.navigationGroup(navGroup);
                                        targetDisplay.accessed(true);
                                    }
                                }
                            });

                            SDL.Client.Event.EventRegister.addEventHandler(AppHost.ApplicationHost, "applicationentrypointactivate", setActiveApplicationEntryPoint);
                            SDL.Client.Event.EventRegister.addEventHandler(AppHost.ApplicationHost, "applicationentrypointurlchange", setApplicationEntryPointUrl);
                            SDL.Client.Event.EventRegister.addEventHandler(AppHost.ApplicationHost, "applicationentrypointvisited", onApplicationEntryPointVisited);
                            SDL.Client.Event.EventRegister.addEventHandler(AppHost.ApplicationHost, "applicationfacaderequest", loadApplicationEntryPoint);
                            SDL.Client.Event.EventRegister.addEventHandler(AppHost.ApplicationHost, "applicationsuiteinitialize", initializeApplicationSuite);
                            SDL.Client.Event.EventRegister.addEventHandler(AppHost.ApplicationHost, "applicationsuitereset", resetApplicationSuite);
                            SDL.Client.Event.EventRegister.addEventHandler(AppHost.ApplicationHost, "targetdisplayunload", onTargetDisplayUnloaded);

                            setNavigationSelectionFromUrl(true);

                            ko.computed(function setUrlFromNavigationSelection() {
                                var navItem = Navigation.currentNavigationItem();
                                var newHref = window.location.href;

                                if (navItem) {
                                    var appEntryPoint = navItem.applicationEntryPoint;

                                    if (appEntryPoint) {
                                        newHref = Url.setHashParameter(newHref, "app", appEntryPoint.application.id);
                                        newHref = Url.setHashParameter(newHref, "entry", navItem.id);
                                        newHref = Url.setHashParameter(newHref, "group", null);

                                        navItem.src(); // this is to trigger computed to recalculate when src() changes
                                        if (appEntryPoint.url && appEntryPoint.url != appEntryPoint.baseUrl) {
                                            newHref = Url.setHashParameter(newHref, "url", Url.makeRelativeUrl(appEntryPoint.baseUrl, appEntryPoint.url));
                                        } else {
                                            newHref = Url.setHashParameter(newHref, "url", null);
                                        }
                                    } else {
                                        newHref = Url.setHashParameter(newHref, "app", null);
                                        newHref = Url.setHashParameter(newHref, "entry", null);
                                        newHref = Url.setHashParameter(newHref, "group", null);
                                        newHref = Url.setHashParameter(newHref, "url", null);
                                    }
                                } else {
                                    newHref = Url.setHashParameter(newHref, "entry", null);

                                    var group = Navigation.currentNavigationGroup();
                                    if (group) {
                                        newHref = Url.setHashParameter(newHref, "app", group.applicationId);
                                        newHref = Url.setHashParameter(newHref, "group", group.id);
                                    } else {
                                        newHref = Url.setHashParameter(newHref, "app", null);
                                        newHref = Url.setHashParameter(newHref, "group", null);
                                    }
                                }

                                if (window.location.href != newHref) {
                                    if (newHref.indexOf("#") == -1) {
                                        newHref += "#"; // making sure there's a hash parameter, otherwise the whole window will refresh
                                    }
                                    window.location.href = newHref;
                                }
                            }).extend({ throttle: 1 });

                            SDL.jQuery(window).on("hashchange", function () {
                                setNavigationSelectionFromUrl();
                            });
                        }
                        ;

                        function getApplicationEntryPointGroupById(applicationId, applicationEntryPointGroupId) {
                            var application;
                            if (applicationId) {
                                application = AppHost.ApplicationHost.applicationsIndex[applicationId];
                                if (application) {
                                    return application.entryPointGroupsIndex[applicationEntryPointGroupId];
                                }
                            } else {
                                // application unspecified -> figure it out
                                var applications = AppHost.ApplicationHost.applications;
                                for (var i = 0, len = applications.length; i < len; i++) {
                                    var group = applications[i].entryPointGroupsIndex[applicationEntryPointGroupId];
                                    if (group) {
                                        return group;
                                    }
                                }
                            }
                        }
                        ;

                        function getApplicationEntryPointById(applicationId, applicationEntryPointId) {
                            var application;
                            if (applicationId) {
                                application = AppHost.ApplicationHost.applicationsIndex[applicationId];
                                return getApplicationEntryPointByIdInApplication(application, applicationEntryPointId);
                            } else {
                                // application unspecified -> figure it out
                                var applications = AppHost.ApplicationHost.applications;
                                for (var i = 0, len = applications.length; i < len; i++) {
                                    var entry = getApplicationEntryPointByIdInApplication(applications[i], applicationEntryPointId);
                                    if (entry) {
                                        return entry;
                                    }
                                }
                            }
                        }
                        ;

                        function getApplicationEntryPointByIdInApplication(application, applicationEntryPointId) {
                            for (var i = 0, len = application.entryPointGroups.length; i < len; i++) {
                                var group = application.entryPointGroups[i];
                                for (var j = 0, lenj = group.entryPoints.length; j < lenj; j++) {
                                    if (group.entryPoints[j].id == applicationEntryPointId) {
                                        return group.entryPoints[j];
                                    }
                                }
                            }
                        }
                        ;

                        function buildNavigationGroup(navigationGroupNode, isFirstGroup) {
                            var groupApplicationId = navigationGroupNode.getAttribute("applicationSuiteId");
                            var navigationItemNodes = SDL.Client.Xml.selectNodes(navigationGroupNode, "apphost:navigationItems/apphost:navigationItem[@applicationEntryPointId]");
                            var navigationGroup = {
                                id: navigationGroupNode.getAttribute("id"),
                                title: navigationGroupNode.getAttribute("title"),
                                applicationEntryPointGroup: null,
                                navigationItems: null,
                                applications: [],
                                translations: buildNameTranslations(navigationGroupNode),
                                shownItems: null,
                                applicationId: groupApplicationId
                            };

                            if (groupApplicationId) {
                                var application = AppHost.ApplicationHost.applicationsIndex[groupApplicationId];
                                if (application) {
                                    navigationGroup.applications.push(application);
                                }
                            }

                            var shownItems = 0;
                            navigationGroup.navigationItems = SDL.jQuery.map(navigationItemNodes, function (navigationItemNode, index) {
                                var applicationEntryPoint = getApplicationEntryPointById(navigationItemNode.getAttribute("applicationSuiteId") || groupApplicationId, navigationItemNode.getAttribute("applicationEntryPointId"));

                                if (applicationEntryPoint) {
                                    var application = applicationEntryPoint && applicationEntryPoint.application;
                                    if (navigationGroup.applications.indexOf(application) == -1) {
                                        navigationGroup.applications.push(application);
                                    }

                                    if (application.authenticationUrl && !application.authenticated && !navigationGroup.authenticationTargetDisplay) {
                                        navigationGroup.authenticationTargetDisplay = ko.observable(getAuthenticationTargetDisplay(application));
                                    }

                                    var navigationItem = buildNavigationItemForApplicationEntryPoint(applicationEntryPoint, navigationGroup, isFirstGroup, navigationItemNode);
                                    if (navigationItem != Navigation.homeNavigationItem) {
                                        if (!navigationItem.contextual() && !navigationItem.hidden()) {
                                            shownItems++;
                                        }
                                        return navigationItem;
                                    }
                                }
                            });

                            navigationGroup.shownItems = ko.observable(shownItems);
                            return navigationGroup;
                        }
                        ;

                        function buildNavigationGroupForApplicationEntryPointGroup(applicationEntryPointGroup, isFirstGroup, navigationGroupNode) {
                            var application = applicationEntryPointGroup.application;
                            var navigationGroup = {
                                id: navigationGroupNode && navigationGroupNode.getAttribute("id") || applicationEntryPointGroup.id,
                                title: navigationGroupNode && navigationGroupNode.getAttribute("title") || applicationEntryPointGroup.title,
                                applicationEntryPointGroup: applicationEntryPointGroup,
                                navigationItems: null,
                                applications: [application],
                                shownItems: null,
                                applicationId: application.id
                            };

                            var shownItems = 0;
                            navigationGroup.navigationItems = SDL.jQuery.map(applicationEntryPointGroup.entryPoints, function (entryPoint, index) {
                                var navigationItem = buildNavigationItemForApplicationEntryPoint(entryPoint, navigationGroup, isFirstGroup);
                                if (navigationItem != Navigation.homeNavigationItem) {
                                    if (!navigationItem.contextual() && !navigationItem.hidden()) {
                                        shownItems++;
                                    }
                                    return navigationItem;
                                }
                            });

                            navigationGroup.shownItems = ko.observable(shownItems);

                            if (application.authenticationUrl && !application.authenticated) {
                                navigationGroup.authenticationTargetDisplay = ko.observable(getAuthenticationTargetDisplay(application));
                            }

                            if (navigationGroupNode) {
                                navigationGroup.translations = buildNameTranslations(navigationGroupNode);
                            }

                            return navigationGroup;
                        }
                        ;

                        function getAuthenticationTargetDisplay(application) {
                            var authenticationTargetDisplay = applicationAuthenticationTargetDisplays[application.id];
                            if (!authenticationTargetDisplay) {
                                authenticationTargetDisplay = applicationAuthenticationTargetDisplays[application.id] = {
                                    targetDisplay: application.authenticationTargetDisplay,
                                    navigationGroup: ko.observable(null),
                                    src: application.authenticationUrl,
                                    loaded: ko.observable(false),
                                    loading: null,
                                    timeout: 0,
                                    authenticationMode: application.authenticationMode,
                                    accessed: ko.observable(application.authenticationMode != "on-access"),
                                    authenticated: false,
                                    disposed: ko.observable(false)
                                };

                                authenticationTargetDisplay.loading = ko.computed(isTargetDisplayLoading, authenticationTargetDisplay);
                            }

                            return authenticationTargetDisplay;
                        }
                        ;

                        function buildNavigationItemForApplicationEntryPoint(applicationEntryPoint, parentNavigationGroup, isFirstGroup, navigationItemNode) {
                            var navigationItem = {
                                id: applicationEntryPoint.id,
                                type: navigationItemNode && navigationItemNode.getAttribute("type") || applicationEntryPoint.type,
                                title: navigationItemNode && navigationItemNode.getAttribute("title") || applicationEntryPoint.title,
                                applicationEntryPoint: applicationEntryPoint,
                                src: ko.observable(Url.isAbsoluteUrl(applicationEntryPoint.url) ? applicationEntryPoint.url : "about:blank"),
                                icon: applicationEntryPoint.icon,
                                navigationGroup: parentNavigationGroup,
                                targetDisplay: buildNavigationItemTargetDisplay(applicationEntryPoint.targetDisplay.name, applicationEntryPoint.application),
                                contextual: ko.observable(applicationEntryPoint.contextual && !applicationEntryPoint.visited),
                                hidden: ko.observable(applicationEntryPoint.hidden),
                                external: applicationEntryPoint.external,
                                overlay: applicationEntryPoint.overlay
                            };

                            if (!Navigation.homeNavigationItem && isFirstGroup && navigationItem.type == "home") {
                                Navigation.homeNavigationItem = navigationItem;
                            }

                            if (!navigationItemsIndex[applicationEntryPoint.application.id]) {
                                navigationItemsIndex[applicationEntryPoint.application.id] = [navigationItem];
                            } else {
                                navigationItemsIndex[applicationEntryPoint.application.id].push(navigationItem);
                            }

                            if (navigationItemNode) {
                                navigationItem.titleResource = navigationItemNode.getAttribute("titleResource");
                                navigationItem.translations = buildNameTranslations(navigationItemNode);
                                var icon = navigationItemNode.getAttribute("icon");
                                if (icon) {
                                    if (icon.charAt(0) != "/" && icon.indexOf("~/") == -1) {
                                        var baseUrlNodes = SDL.Client.Xml.selectNodes(navigationItemNode, "ancestor::configuration/@baseUrl");
                                        var baseUrl = baseUrlNodes.length ? baseUrlNodes[baseUrlNodes.length - 1].nodeValue : "";
                                        icon = Url.combinePath(baseUrl, icon);
                                    }
                                    if (icon.indexOf("~/") == 0) {
                                        icon = Url.combinePath(SDL.Client.Configuration.ConfigurationManager.corePath, icon.slice(2));
                                    }
                                    navigationItem.icon = icon;
                                }

                                var external = navigationItemNode.getAttribute("external");
                                if (external) {
                                    navigationItem.external = external == "true" || external == "1";
                                }
                                if (!applicationEntryPoint.visited) {
                                    var contextual = navigationItemNode.getAttribute("contextual");
                                    if (contextual) {
                                        navigationItem.contextual(contextual == "true" || contextual == "1");
                                    }
                                }
                                var overlay = navigationItemNode.getAttribute("overlay");
                                if (overlay) {
                                    navigationItem.overlay = !(overlay == "false" || overlay == "0") && (overlay == "true" || overlay == "1" || undefined);
                                }
                            }

                            return navigationItem;
                        }
                        ;

                        function buildNavigationItemTargetDisplay(targetDisplayName, application) {
                            if (targetDisplayName) {
                                var navigationItemTargetDisplays = applicationNavigationItemTargetDisplaysIndex[application.id];
                                if (!navigationItemTargetDisplays) {
                                    navigationItemTargetDisplays = applicationNavigationItemTargetDisplaysIndex[application.id] = {};
                                }
                                var targetDisplay = navigationItemTargetDisplays[targetDisplayName];
                                if (!targetDisplay) {
                                    var applicationEntryPointTargetDisplay = application.targetDisplaysIndex[targetDisplayName];
                                    if (applicationEntryPointTargetDisplay) {
                                        targetDisplay = navigationItemTargetDisplays[targetDisplayName] = {
                                            targetDisplay: applicationEntryPointTargetDisplay,
                                            src: null,
                                            accessed: ko.observable(false),
                                            loaded: ko.observable(false),
                                            loading: null,
                                            timeout: 0,
                                            disposed: ko.observable(false),
                                            navigationItem: ko.observable(null)
                                        };

                                        targetDisplay.loading = ko.computed(isTargetDisplayLoading, targetDisplay);
                                    }
                                }
                                return targetDisplay;
                            }
                        }
                        ;

                        function isTargetDisplayLoading() {
                            var targetDisplay = this;
                            if (targetDisplay.accessed() && !targetDisplay.loaded()) {
                                if (targetDisplay.timeout) {
                                    window.clearTimeout(targetDisplay.timeout);
                                }

                                targetDisplay.timeout = window.setTimeout(function () {
                                    targetDisplay.timeout = 0;
                                    if (window.console) {
                                        window.console.warn(targetDisplay.src + " failed to load within 10 seconds");
                                    }
                                    targetDisplay.loaded(true);
                                }, 10000);

                                return true;
                            } else {
                                if (targetDisplay.timeout) {
                                    window.clearTimeout(targetDisplay.timeout);
                                    targetDisplay.timeout = 0;
                                }
                                return false;
                            }
                        }
                        ;

                        function getNavigationGroupById(groupId, applicationId) {
                            for (var i = 0, len = Navigation.navigationGroups.length; i < len; i++) {
                                var group = Navigation.navigationGroups[i];
                                if (group.id == groupId && applicationId == group.applicationId) {
                                    return Navigation.navigationGroups[i];
                                }
                            }
                        }
                        ;

                        function buildNameTranslations(parent) {
                            var translations = {};
                            var translationNodes = SDL.Client.Xml.selectNodes(parent, "apphost:translations/apphost:title[@lang]");
                            for (var i = 0, len = translationNodes.length; i < len; i++) {
                                var translationNode = translationNodes[i];
                                translations[translationNode.getAttribute("lang")] = SDL.Client.Xml.getInnerText(translationNode);
                            }
                            return translations;
                        }
                        ;

                        function orderNavigationItems() {
                            SDL.jQuery.each(Navigation.navigationGroups, function (index, group) {
                                var home = [];
                                var activities = [];
                                var rest = [];
                                var settings = [];
                                var help = [];
                                var about = [];

                                var items = group.navigationItems;
                                for (var i = 0, len = items.length; i < len; i++) {
                                    var item = items[i];
                                    switch (item.type) {
                                        case "home":
                                            home.push(item);
                                            break;
                                        case "activities":
                                            activities.push(item);
                                            break;
                                        case "settings":
                                            settings.push(item);
                                            break;
                                        case "help":
                                            help.push(item);
                                            break;
                                        case "about":
                                            about.push(item);
                                            break;
                                        default:
                                            rest.push(item);
                                            break;
                                    }
                                }
                                group.navigationItems = home.concat(activities, rest, settings, help, about);
                            });
                        }
                        ;

                        function createTopNavigationGroup() {
                            Navigation.topNavigationGroup = {
                                id: null,
                                title: null,
                                applicationEntryPointGroup: null,
                                navigationItems: [],
                                applications: [],
                                shownItems: ko.observable(1)
                            };

                            if (Navigation.homeNavigationItem) {
                                var application = Navigation.homeNavigationItem.applicationEntryPoint.application;
                                Navigation.homeNavigationItem.navigationGroup = Navigation.topNavigationGroup;
                                Navigation.topNavigationGroup.applicationId = application.id;
                                Navigation.topNavigationGroup.applications.push(application);
                                if (application.authenticationUrl && !application.authenticated) {
                                    Navigation.topNavigationGroup.authenticationTargetDisplay = ko.observable(getAuthenticationTargetDisplay(application));
                                }
                            } else {
                                Navigation.homeNavigationItem = {
                                    id: null,
                                    type: "home",
                                    src: ko.observable("about:blank"),
                                    navigationGroup: Navigation.topNavigationGroup,
                                    targetDisplay: null,
                                    contextual: ko.observable(false),
                                    hidden: ko.observable(false)
                                };

                                if (Navigation.navigationGroups.length) {
                                    var firstGroup = Navigation.navigationGroups[0];
                                    var application = firstGroup.applications.length == 1 ? firstGroup.applications[0] : (firstGroup.applicationId ? AppHost.ApplicationHost.applicationsIndex[firstGroup.applicationId] : null);

                                    if (application) {
                                        Navigation.topNavigationGroup.applicationId = application.id;
                                        Navigation.topNavigationGroup.applications.push(application);
                                        if (application.authenticationUrl && !application.authenticated) {
                                            Navigation.topNavigationGroup.authenticationTargetDisplay = ko.observable(getAuthenticationTargetDisplay(application));
                                        }
                                    }
                                }
                            }

                            Navigation.topNavigationGroup.navigationItems.push(Navigation.homeNavigationItem);
                        }
                        ;

                        function setActiveApplicationEntryPoint(event) {
                            var applicationEntryPointId = event.data.applicationEntryPointId;
                            if (event.data.applicationEntryPointId) {
                                var applicationId = event.data.applicationId;
                                var navigationItem = Navigation.currentNavigationItem();
                                if (!navigationItem || navigationItem.id != applicationEntryPointId || (navigationItem.applicationEntryPoint && navigationItem.applicationEntryPoint.application.id) != applicationId) {
                                    navigationItem = getNavigationItemById(applicationEntryPointId, applicationId);
                                    if (navigationItem && !navigationItem.hidden()) {
                                        selectNavigationItem(navigationItem);
                                    }
                                }
                            }
                        }
                        ;

                        function onApplicationEntryPointVisited(event) {
                            var applicationEntryPointId = event.data.applicationEntryPointId;
                            var url = event.data.url;
                            SDL.jQuery.each(navigationItemsIndex[event.data.applicationId] || [], function (index, item) {
                                if (item.id == applicationEntryPointId && item.contextual()) {
                                    item.contextual(false);
                                    if (!item.hidden()) {
                                        item.navigationGroup.shownItems(item.navigationGroup.shownItems() + 1);
                                    }
                                }
                            });
                        }
                        ;

                        function setApplicationEntryPointUrl(event) {
                            var url = event.data.url;
                            if (Url.isAbsoluteUrl(url)) {
                                var applicationEntryPointId = event.data.applicationEntryPointId;
                                SDL.jQuery.each(navigationItemsIndex[event.data.applicationId] || [], function (index, item) {
                                    if (item.id == applicationEntryPointId && item.src() != url) {
                                        item.src(url);
                                    }
                                });
                            }
                        }
                        ;

                        function loadApplicationEntryPoint(event) {
                            var applicationId = event.data.applicationId;
                            var items = navigationItemsIndex[applicationId];
                            if (items) {
                                var itemToAuthenticate;
                                var applicationEntryPointId = event.data.applicationEntryPointId;
                                for (var i = 0, len = items.length; i < len; i++) {
                                    var navigationItem = items[i];
                                    if (navigationItem.id == applicationEntryPointId) {
                                        if (!navigationItem.navigationGroup.authenticationTargetDisplay || !navigationItem.navigationGroup.authenticationTargetDisplay()) {
                                            loadTargetDisplayForNavigationItem(navigationItem);
                                            return;
                                        } else if (!itemToAuthenticate) {
                                            itemToAuthenticate = navigationItem;
                                        }
                                    }
                                }
                                if (itemToAuthenticate) {
                                    selectNavigationItem(itemToAuthenticate);
                                    AppHost.ApplicationHost.setActiveApplicationEntryPoint(itemToAuthenticate.applicationEntryPoint && itemToAuthenticate.applicationEntryPoint.id, itemToAuthenticate.applicationEntryPoint && itemToAuthenticate.applicationEntryPoint.application.id);
                                }
                            }
                        }
                        ;

                        function initializeApplicationSuite(event) {
                            var applicationId = event.data.applicationId;

                            var authenticationTargetDisplay = applicationAuthenticationTargetDisplays[applicationId];
                            if (authenticationTargetDisplay && !authenticationTargetDisplay.authenticated) {
                                var includeApplicationEntryPointIds = event.data.includeApplicationEntryPointIds;
                                var excludeApplicationEntryPointIds = event.data.excludeApplicationEntryPointIds;
                                var selectedGroup = Navigation.currentNavigationGroup();
                                var selectedItem = Navigation.currentNavigationItem();
                                var application = AppHost.ApplicationHost.applicationsIndex[applicationId];

                                applicationAuthenticationTargetDisplays[applicationId].authenticated = true;

                                SDL.jQuery.each([Navigation.topNavigationGroup].concat(Navigation.navigationGroups), function (index, navigationGroup) {
                                    if (navigationGroup.authenticationTargetDisplay && navigationGroup.applications.indexOf(application) != -1) {
                                        var selectGroup = false;
                                        if (includeApplicationEntryPointIds || excludeApplicationEntryPointIds) {
                                            var shownItems = navigationGroup.shownItems();
                                            SDL.jQuery.each(navigationGroup.navigationItems, function (index, navigationItem) {
                                                var appEntryPoint = navigationItem.applicationEntryPoint;
                                                if (appEntryPoint && appEntryPoint.application == application && appEntryPoint.hidden) {
                                                    navigationItem.hidden(true);

                                                    if (navigationGroup != Navigation.topNavigationGroup) {
                                                        if (!navigationItem.contextual()) {
                                                            shownItems--;
                                                        }

                                                        if (selectedItem == navigationItem) {
                                                            selectGroup = true;
                                                        }
                                                    }
                                                }
                                            });

                                            if (shownItems != navigationGroup.shownItems()) {
                                                navigationGroup.shownItems(shownItems);
                                            }
                                        }

                                        var newAuthTargetDisplay;
                                        if (navigationGroup.authenticationTargetDisplay() == authenticationTargetDisplay) {
                                            for (var i = 0, len = navigationGroup.applications.length; i < len; i++) {
                                                var nextAuthTargetDisplay = applicationAuthenticationTargetDisplays[navigationGroup.applications[i].id];
                                                if (nextAuthTargetDisplay && !nextAuthTargetDisplay.authenticated && (!newAuthTargetDisplay || nextAuthTargetDisplay.authenticationMode != "on-access")) {
                                                    newAuthTargetDisplay = nextAuthTargetDisplay;
                                                    if (newAuthTargetDisplay.authenticationMode != "on-access") {
                                                        break;
                                                    }
                                                }
                                            }
                                        }

                                        if (newAuthTargetDisplay) {
                                            if (selectGroup) {
                                                Navigation.currentNavigationGroup(navigationGroup);
                                                Navigation.currentNavigationItem(null);
                                            }
                                            navigationGroup.authenticationTargetDisplay(newAuthTargetDisplay);

                                            if (selectGroup || selectedGroup == navigationGroup || (selectedItem && selectedItem.navigationGroup == navigationGroup)) {
                                                newAuthTargetDisplay.navigationGroup(navigationGroup);
                                                newAuthTargetDisplay.accessed(true);
                                            } else if (newAuthTargetDisplay.authenticationMode != "on-access") {
                                                newAuthTargetDisplay.accessed(true);
                                            }
                                        } else {
                                            if (selectGroup || selectedGroup == navigationGroup) {
                                                var firstNavigationItem;
                                                for (var i = 0, len = navigationGroup.navigationItems.length; !firstNavigationItem && i < len; i++) {
                                                    firstNavigationItem = navigationGroup.navigationItems[i];
                                                    if (firstNavigationItem.external || firstNavigationItem.hidden()) {
                                                        firstNavigationItem = null;
                                                    }
                                                }
                                                selectedItem = firstNavigationItem || Navigation.homeNavigationItem;
                                                Navigation.currentNavigationItem(selectedItem);
                                                loadTargetDisplayForNavigationItem(selectedItem);
                                            } else if (selectedItem && selectedItem.navigationGroup == navigationGroup) {
                                                loadTargetDisplayForNavigationItem(selectedItem);
                                            }
                                            navigationGroup.authenticationTargetDisplay(null);
                                        }
                                    }
                                });

                                if (authenticationTargetDisplay.targetDisplay && authenticationTargetDisplay.targetDisplay.frame) {
                                    authenticationTargetDisplay.targetDisplay.frame.src = "about:blank";
                                }
                            }
                        }
                        ;

                        function resetApplicationSuite(event) {
                            var applicationId = event.data.applicationId;

                            var authenticationTargetDisplay = applicationAuthenticationTargetDisplays[applicationId];
                            if (authenticationTargetDisplay && authenticationTargetDisplay.authenticated) {
                                var application = authenticationTargetDisplay.targetDisplay.application;

                                authenticationTargetDisplay.authenticated = false;
                                authenticationTargetDisplay.navigationGroup(null);
                                authenticationTargetDisplay.accessed(false);
                                authenticationTargetDisplay.disposed(false);
                                authenticationTargetDisplay.loaded(false);

                                var selectedNavigationGroup = Navigation.currentNavigationGroup();
                                var selectedNavigationItem = Navigation.currentNavigationItem();
                                var activeNavigationGroup = null;

                                SDL.jQuery.each(Navigation.navigationGroups.concat(Navigation.topNavigationGroup), function (index, navigationGroup) {
                                    if (navigationGroup.authenticationTargetDisplay && navigationGroup.applications.indexOf(application) != -1) {
                                        if (!navigationGroup.authenticationTargetDisplay()) {
                                            navigationGroup.authenticationTargetDisplay(authenticationTargetDisplay);
                                        }

                                        if (navigationGroup == selectedNavigationGroup) {
                                            activeNavigationGroup = navigationGroup;
                                        }

                                        var shownItems = navigationGroup.shownItems();

                                        SDL.jQuery.each(navigationGroup.navigationItems, function (index, navigationItem) {
                                            var appEntryPoint = navigationItem.applicationEntryPoint;
                                            if (appEntryPoint && appEntryPoint.application == application) {
                                                if (navigationItem.hidden()) {
                                                    if (navigationGroup != Navigation.topNavigationGroup && !navigationItem.contextual()) {
                                                        shownItems++;
                                                    }
                                                    navigationItem.hidden(false);
                                                }

                                                if (navigationItem.targetDisplay.navigationItem() == navigationItem) {
                                                    navigationItem.targetDisplay.navigationItem(null);
                                                }

                                                if (navigationItem == selectedNavigationItem) {
                                                    activeNavigationGroup = navigationGroup;
                                                }
                                            }
                                        });

                                        if (navigationGroup != Navigation.topNavigationGroup && navigationGroup.shownItems() != shownItems) {
                                            navigationGroup.shownItems(shownItems);
                                        }
                                    }
                                });

                                if (activeNavigationGroup && activeNavigationGroup.authenticationTargetDisplay() == authenticationTargetDisplay) {
                                    authenticationTargetDisplay.navigationGroup(activeNavigationGroup);
                                    authenticationTargetDisplay.accessed(true);
                                } else if (authenticationTargetDisplay.authenticationMode != "on-access") {
                                    authenticationTargetDisplay.accessed(true);
                                }
                            }
                        }
                        ;

                        function onTargetDisplayUnloaded(event) {
                            var targetDisplay = event.data.targetDisplay;
                            var authenticationTargetDisplay = applicationAuthenticationTargetDisplays[targetDisplay.application.id];
                            if (authenticationTargetDisplay && authenticationTargetDisplay.authenticated && authenticationTargetDisplay.targetDisplay == targetDisplay && !authenticationTargetDisplay.disposed()) {
                                authenticationTargetDisplay.targetDisplay.frame = null;
                                setTimeout(function () {
                                    return authenticationTargetDisplay.disposed(true);
                                }, 1); // Chrome crashes without the timeout
                            }
                        }
                        ;

                        initialize();
                    })(ViewModels.Navigation || (ViewModels.Navigation = {}));
                    var Navigation = ViewModels.Navigation;
                })(ApplicationHost.ViewModels || (ApplicationHost.ViewModels = {}));
                var ViewModels = ApplicationHost.ViewModels;
            })(UI.ApplicationHost || (UI.ApplicationHost = {}));
            var ApplicationHost = UI.ApplicationHost;
        })(Client.UI || (Client.UI = {}));
        var UI = Client.UI;
    })(SDL.Client || (SDL.Client = {}));
    var Client = SDL.Client;
})(SDL || (SDL = {}));
//# sourceMappingURL=Navigation.js.map
/// <reference path="../../ViewModels/Navigation.ts" />
/// <reference path="../../../../../SDL.Client/SDL.Client.Core/Types/Object.d.ts" />
/// <reference path="../../../../../SDL.Client/SDL.Client.UI.Core/Views/ViewBase.d.ts" />
/// <reference path="../../../../../SDL.Client/SDL.Client.UI.Core.Knockout/ViewModels/ViewModelBase.d.ts" />
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var SDL;
(function (SDL) {
    (function (Client) {
        (function (UI) {
            (function (ApplicationHost) {
                (function (Views) {
                    var Navigation = SDL.Client.UI.ApplicationHost.ViewModels.Navigation;

                    eval(SDL.Client.Types.OO.enableCustomInheritance);
                    var Frame = (function (_super) {
                        __extends(Frame, _super);
                        function Frame() {
                            _super.apply(this, arguments);
                            this.initialized = ko.observable(false);
                        }
                        Frame.prototype.getRenderOptions = function () {
                            var _this = this;
                            var model = this.model = new SDL.UI.Core.Knockout.ViewModels.ViewModelBase();

                            model.initialized = this.initialized;
                            model.visitedNavigationGroups = ko.observableArray([]);
                            model.toggleNavigationPane = function () {
                                model.navigationPaneShown(!model.navigationPaneShown());
                            };

                            model.selectNavigationItem = function (item) {
                                Navigation.selectNavigationItem(item);
                            };

                            model.selectNavigationGroup = function (group) {
                                Navigation.currentNavigationGroup(group);
                            };

                            model.toggleExpandNavigationGroup = function (group) {
                                if (model.expandedNavigationGroup() != group) {
                                    model.expandedNavigationGroup(group);
                                } else {
                                    var groupsCount = 0;
                                    for (var i = 0, len = model.navigationGroups.length; i < len; i++) {
                                        var group = model.navigationGroups[i];
                                        if (group.shownItems()) {
                                            if (groupsCount) {
                                                model.expandedNavigationGroup(null); // more than 1 groups have items -> can collapse
                                                return;
                                            }
                                            groupsCount++;
                                        }
                                    }
                                }
                            };

                            model.blurredNavigationPane = function () {
                                if (model.navigationPaneShown()) {
                                    var currentNavigationItem = Navigation.currentNavigationItem();
                                    if (currentNavigationItem ? (currentNavigationItem.type != "home" || currentNavigationItem.navigationGroup.authenticationTargetDisplay && currentNavigationItem.navigationGroup.authenticationTargetDisplay()) : Navigation.currentNavigationGroup() != null) {
                                        model.navigationPaneShown(false);
                                    }
                                }
                            };

                            model.setTargetDisplayLocation = function (targetDisplay, node) {
                                if (targetDisplay.navigationItem) {
                                    var item = targetDisplay.navigationItem();
                                    var src = (!item || item.hidden()) ? "about:blank" : item.src();
                                    if (targetDisplay.src != src) {
                                        var frame = SDL.jQuery(node).prev("div").find("iframe")[0];
                                        if (src != "about:blank") {
                                            var urlChange = SDL.Client.Types.Url.makeRelativeUrl(targetDisplay.src, src);
                                            if (urlChange && urlChange.charAt(0) != "#") {
                                                // change is more than just a hash
                                                targetDisplay.loaded(false);
                                            }
                                        }

                                        try  {
                                            frame.contentWindow.location.replace(src);
                                        } catch (err) {
                                            frame.src = src;
                                        }
                                        targetDisplay.src = src;
                                    }
                                }
                            };

                            model.animateLoadingFeedback = function (element) {
                                // IE9 does not support animation -> use javascript
                                if (element.style.animation == undefined && element.style.webkitAnimation == undefined) {
                                    var position = 0;
                                    var step = 12;
                                    var interval = window.setInterval(function () {
                                        position += step;
                                        if (position >= 360) {
                                            position -= 360;
                                        }
                                        element.style.msTransform = "rotate(" + position + "deg)";
                                    }, 30);

                                    ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                                        window.clearInterval(interval);
                                    });
                                }
                            };

                            var getTranslation = function (translations, fallbackTranslations) {
                                if (translations || fallbackTranslations) {
                                    var culture = model.culture();
                                    if (culture) {
                                        if (translations && translations[culture]) {
                                            return translations[culture];
                                        }
                                        if (fallbackTranslations && fallbackTranslations[culture]) {
                                            return fallbackTranslations[culture];
                                        }

                                        if (culture.indexOf("-") != -1) {
                                            culture = culture.replace(/\-.*$/, "");
                                            if (translations && translations[culture]) {
                                                return translations[culture];
                                            }
                                            if (fallbackTranslations && fallbackTranslations[culture]) {
                                                return fallbackTranslations[culture];
                                            }
                                        }
                                    }
                                }
                            };

                            model.getNavigationItemName = function (item) {
                                if (item == Navigation.homeNavigationItem) {
                                    return model.localize("apphost.home");
                                } else {
                                    var name = getTranslation(item.translations, item.applicationEntryPoint && item.applicationEntryPoint.translations) || (item.titleResource && model.localize(item.titleResource)) || item.title;
                                    if (name) {
                                        return name;
                                    }

                                    switch (item.type) {
                                        case "home":
                                            return model.localize("apphost.home");
                                        case "activities":
                                            return model.localize("apphost.activities");
                                        case "settings":
                                            return model.localize("apphost.settings");
                                        case "help":
                                            return model.localize("apphost.help");
                                        case "about":
                                            return model.localize("apphost.about");
                                        default:
                                            return item.id;
                                    }
                                }
                            };

                            model.getNavigationGroupName = function (group) {
                                return getTranslation(group.translations, group.applicationEntryPointGroup && group.applicationEntryPointGroup.translations) || group.title || group.id;
                            };

                            model.registerTargetDisplayFrame = function (targetDisplay, frame) {
                                targetDisplay.targetDisplay.frame = frame;
                            };

                            Navigation.initialize(function () {
                                var currentItem = Navigation.currentNavigationItem();
                                model.navigationPaneShown = ko.observable(currentItem ? (currentItem.type == "home" && !currentItem.navigationGroup.authenticationTargetDisplay) : !Navigation.currentNavigationGroup());
                                model.navigationGroups = Navigation.navigationGroups;
                                model.currentNavigationItem = Navigation.currentNavigationItem;
                                model.currentNavigationGroup = Navigation.currentNavigationGroup;
                                model.navigationItemTargetDisplays = Navigation.navigationItemTargetDisplays;
                                model.authenticationTargetDisplays = Navigation.authenticationTargetDisplays;
                                model.topNavigationGroup = Navigation.topNavigationGroup;
                                model.homeNavigationItem = Navigation.homeNavigationItem;

                                model.navigationPaneToggleShown = ko.computed(function () {
                                    var currentGroup;
                                    var currentItem = model.currentNavigationItem();
                                    if (currentItem) {
                                        currentGroup = currentItem.navigationGroup;
                                    } else {
                                        currentGroup = model.currentNavigationGroup();
                                    }

                                    if (currentGroup && currentGroup.authenticationTargetDisplay) {
                                        var authTargetDisplay = currentGroup.authenticationTargetDisplay();
                                        if (authTargetDisplay) {
                                            var applicationToAuthenticate = authTargetDisplay.targetDisplay.application;
                                            var visitedNavigationGroups = model.visitedNavigationGroups();
                                            for (var i = 0, len = visitedNavigationGroups.length; i < len; i++) {
                                                var group = visitedNavigationGroups[i];
                                                if (group != currentGroup && (!group.authenticationTargetDisplay || !group.authenticationTargetDisplay() || SDL.jQuery.inArray(applicationToAuthenticate, group.applications) == -1)) {
                                                    // a group exists that is not blocked by current app's authentication screen
                                                    return true;
                                                }
                                            }

                                            // there are no other navigation groups that have been accesssed -> hide the toggle button
                                            return false;
                                        }
                                    }
                                    return true;
                                });

                                model.expandedNavigationGroup = ko.observable((function () {
                                    var groupsCount = 0;
                                    var singleGroupToExpand;
                                    for (var i = 0, len = model.navigationGroups.length; i < len; i++) {
                                        var group = model.navigationGroups[i];
                                        if (group.shownItems()) {
                                            if (groupsCount) {
                                                return null;
                                            }
                                            singleGroupToExpand = group;
                                            groupsCount++;
                                        }
                                    }
                                    return singleGroupToExpand;
                                })());

                                model.onNavigationSelectionChanged = ko.computed(function () {
                                    var currentNavigationItem = Navigation.currentNavigationItem();
                                    var currentNavigationGroup = Navigation.currentNavigationGroup();
                                    if (currentNavigationItem) {
                                        currentNavigationGroup = currentNavigationItem.navigationGroup;
                                        model.navigationPaneShown(currentNavigationItem.type == "home" && (!currentNavigationGroup.authenticationTargetDisplay || !currentNavigationGroup.authenticationTargetDisplay()));

                                        if (currentNavigationGroup != Navigation.topNavigationGroup) {
                                            model.expandedNavigationGroup(currentNavigationGroup);
                                        }
                                    } else if (currentNavigationGroup) {
                                        model.navigationPaneShown(false);
                                        model.expandedNavigationGroup(currentNavigationGroup);
                                    } else {
                                        model.navigationPaneShown(true);
                                    }

                                    if (currentNavigationGroup && model.visitedNavigationGroups.indexOf(currentNavigationGroup) == -1) {
                                        model.visitedNavigationGroups.push(currentNavigationGroup);
                                    }
                                });

                                model.onExpandedNavigationGroupChanged = model.expandedNavigationGroup.subscribe(function () {
                                    var navGroup = model.expandedNavigationGroup();
                                    if (navGroup) {
                                        var targetDisplay = navGroup.authenticationTargetDisplay && navGroup.authenticationTargetDisplay();
                                        if (targetDisplay && targetDisplay.authenticationMode == "on-access" && targetDisplay.navigationGroup() != navGroup) {
                                            targetDisplay.navigationGroup(navGroup);
                                            targetDisplay.accessed(true);
                                        }
                                    }
                                });

                                model.shownTargetDisplay = ko.computed(function () {
                                    var navigationItem = Navigation.currentNavigationItem();
                                    if (navigationItem) {
                                        return (navigationItem.navigationGroup && navigationItem.navigationGroup.authenticationTargetDisplay && navigationItem.navigationGroup.authenticationTargetDisplay()) || (!navigationItem.hidden() && navigationItem.targetDisplay);
                                    } else {
                                        var navigationGroup = Navigation.currentNavigationGroup();
                                        if (navigationGroup) {
                                            return navigationGroup.authenticationTargetDisplay();
                                        }
                                    }
                                });

                                _this.setInitialized();
                            });

                            return model;
                        };

                        Frame.prototype.setInitialized = function () {
                            var _this = this;
                            this.updateTitleBar = ko.computed(function () {
                                var currentNavigationItem = Navigation.currentNavigationItem();
                                if (!currentNavigationItem) {
                                    window.document.title = _this.model.localize("apphost.apptitle");
                                } else {
                                    window.document.title = _this.model.localize("apphost.apptitle") + " - " + _this.model.getNavigationItemName(currentNavigationItem);
                                }
                            });

                            this.initialized(true);
                        };
                        return Frame;
                    })(SDL.UI.Core.Views.ViewBase);
                    Views.Frame = Frame;

                    Frame.prototype.disposeInterface = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Frame$Views$Frame$disposeInterface() {
                        if (this.updateTitleBar) {
                            this.updateTitleBar.dispose();
                            this.updateTitleBar = null;
                        }

                        if (this.model) {
                            var model = this.model;
                            if (model.shownTargetDisplay) {
                                model.shownTargetDisplay.dispose();
                                model.shownTargetDisplay = null;
                            }
                            if (model.onNavigationSelectionChanged) {
                                model.onNavigationSelectionChanged.dispose();
                                model.onNavigationSelectionChanged = null;
                            }
                            if (model.onExpandedNavigationGroupChanged) {
                                model.onExpandedNavigationGroupChanged.dispose();
                                model.onExpandedNavigationGroupChanged = null;
                            }
                            if (model.navigationPaneToggleShown) {
                                model.navigationPaneToggleShown.dispose();
                                model.navigationPaneToggleShown = null;
                            }

                            model.dispose();
                            this.model = null;
                        }
                    });

                    SDL.Client.Types.OO.createInterface("SDL.Client.UI.ApplicationHost.Views.Frame", Frame);
                })(ApplicationHost.Views || (ApplicationHost.Views = {}));
                var Views = ApplicationHost.Views;
            })(UI.ApplicationHost || (UI.ApplicationHost = {}));
            var ApplicationHost = UI.ApplicationHost;
        })(Client.UI || (Client.UI = {}));
        var UI = Client.UI;
    })(SDL.Client || (SDL.Client = {}));
    var Client = SDL.Client;
})(SDL || (SDL = {}));
//# sourceMappingURL=Frame.js.map
html,
body,
#main-view-target {
  height: 100%;
  width: 100%;
  margin: 0;
  padding: 0;
  border: none;
}
/* RIGHT-HAND SIDE WHERE APPLICATIONS ARE SHOWN */
.frame-applications,
.frame-applications div,
.frame-applications iframe {
  position: absolute;
  box-sizing: border-box;
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  left: 0;
  top: 0;
  height: 100%;
  width: 100%;
  margin: 0;
  padding: 0;
  border: none;
}
.frame-applications {
  background-color: #eee;
  overflow: hidden;
}
.frame-applications .frame-application-scroll-wrapper {
  position: relative;
  overflow: auto;
  -webkit-overflow-scrolling: touch;
}
.frame-applications > div,
.frame-applications .frame-application-loading {
  /*padding-top: 31px;	/* not showing the header bar for now */

  transition: padding .6s;
}
.frame-applications .frame-application-fixed,
.frame-application-fixed .frame-application-loading {
  padding-left: 246px;
}
.frame-applications .frame-application-hidden {
  z-index: -1;
  left: 100%;
  /* needed to enable proper scrolling on iPad */

}
.frame-application-loading > div {
  position: relative;
}
.frame-application-loading > div > div {
  position: absolute;
  display: table;
}
.frame-application-loading > div > div:first-child {
  background-color: white;
  opacity: .9;
}
.frame-application-loading > div > div > span {
  display: table-cell;
  text-align: center;
  vertical-align: middle;
  -moz-user-select: none;
  -webkit-user-select: none;
  -ms-user-select: none;
  user-select: none;
  cursor: default;
  text-transform: uppercase;
  font-family: Arial;
  font-size: 19px;
  color: #878787;
}
.frame-application-loading-text {
  display: inline-block;
  width: 130px;
}
.frame-application-loading-rotate {
  display: inline-block;
  border-radius: 50%;
  -moz-border-radius: 50%;
  border: 13px solid #666666;
  border-top-color: #CDCDCD;
  border-right-color: #CDCDCD;
  width: 144px;
  height: 144px;
  animation: frame-application-loading-rotate 1s;
  -webkit-animation: frame-application-loading-rotate 1s;
  animation-iteration-count: infinite;
  -webkit-animation-iteration-count: infinite;
  animation-timing-function: linear;
  -webkit-animation-timing-function: linear;
}
@keyframes frame-application-loading-rotate {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
@-webkit-keyframes frame-application-loading-rotate {
  from {
    -webkit-transform: rotate(0deg);
  }
  to {
    -webkit-transform: rotate(360deg);
  }
}
/* NAVIGATION PANEL */
.frame-navigation {
  display: none;
  /* this is to prevent animation immediately after loading the page */

  position: absolute;
  box-sizing: border-box;
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  top: 0;
  height: 100%;
  width: 246px;
  margin: 0;
  padding: 0;
  border: 1px solid #262933;
  background-color: #474E58;
  outline: none;
  -moz-user-select: none;
  -webkit-user-select: none;
  -ms-user-select: none;
  user-select: none;
  transition: left .6s;
}
.frame-navigation-shown {
  display: block;
  left: 0;
  box-shadow: 2px 1px 10px #5C636D;
}
.frame-navigation-hidden {
  display: block;
  left: -246px;
  box-shadow: none;
}
.frame-navigation-pane {
  position: relative;
  height: 100%;
  width: 100%;
  overflow: hidden;
  color: #FFF;
  font-family: Arial;
  font-size: 13px;
  font-weight: normal;
  text-shadow: 0 1px #2B2F36;
  cursor: default;
}
.frame-navigation-logo {
  box-sizing: border-box;
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  height: 30px;
  width: 100%;
  margin: 0;
  padding: 0;
  border-left: none;
  border-right: none;
  border-top: 1px solid #5C636D;
  border-bottom: 1px solid #353B46;
  background-color: #454B53;
  background-image: url("{PATH}/sprite.png{VERSION}");
  background-repeat: no-repeat;
  background-position: 0 0;
}
/* all navigation options */
.frame-navigation-pane ul {
  width: 100%;
  margin: 0;
  padding: 0;
  list-style: none outside none;
}
.frame-navigation-option:hover {
  background-color: #576172 !important;
}
.frame-navigation-option-selected,
.frame-navigation-option-selected:hover {
  background-color: #296ACC !important;
}
.frame-navigation-option-icon,
.frame-navigation-option-text,
.frame-navigation-option-right {
  display: table-cell;
  margin: 0;
  padding: 0;
  border: none;
}
.frame-navigation-option-text {
  overflow: hidden;
  text-overflow: ellipsis;
}
.frame-navigation-option-icon,
.frame-navigation-option-right {
  background-repeat: no-repeat;
}
.frame-navigation-option-right {
  background-image: url("{PATH}/sprite.png{VERSION}");
  background-clip: content-box;
  width: 17px;
  box-sizing: content-box;
  -moz-box-sizing: content-box;
  -webkit-box-sizing: content-box;
  padding: 12px 0 11px 0;
  line-height: 16px;
}
/* top area with big buttons */
ul.frame-navigation-top {
  position: relative;
  border: none;
  border-bottom: 1px solid #262933;
  display: table;
  table-layout: fixed;
  box-shadow: 0 7px 10px #474E58;
  z-index: 1;
  /* this is to show the border box shadow on top of the element under */

}
.frame-navigation-top li:not(:only-child) {
  display: table-cell;
  height: 79px;
  margin: 0;
  padding: 0;
  border-top: 1px solid #5C636D;
  border-left: 1px solid #5C636D;
  border-right: 1px solid #353B46;
  border-bottom: none;
  overflow: hidden;
  vertical-align: bottom;
  text-align: center;
}
.frame-navigation-top li:first-child:not(:only-child) {
  border-left: none;
}
.frame-navigation-top li:last-child:not(:only-child) {
  border-right: 3px solid #5C636D;
}
.frame-navigation-top li:not(:only-child) .frame-navigation-option-text {
  display: block;
  padding-top: 1px;
  min-height: 31px;
  max-height: 48px;
}
/* top buttons icons */
.frame-navigation-top .frame-navigation-option-icon {
  background-image: url("{PATH}/sprite.png{VERSION}");
}
.frame-navigation-top li:not(:only-child) .frame-navigation-option-icon {
  display: inline-block;
  width: 24px;
  height: 24px;
  margin-bottom: 3px;
}
.frame-navigation-top li:not(:only-child) .frame-navigation-option-home {
  background-position: -25px -29px;
}
.frame-navigation-top li:not(:only-child) .frame-navigation-option-activities {
  background-position: 0 -29px;
}
.frame-navigation-top li:not(:only-child) .frame-navigation-option-settings {
  background-position: -49px -29px;
}
.frame-navigation-top li:only-child .frame-navigation-option-home {
  background-position: -35px -44px;
}
/* middle (scrollable) area with expandable groups */
.frame-navigation-middle {
  box-sizing: border-box;
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  position: absolute !important;
  bottom: 0px;
  width: 100%;
}
.frame-navigation-pane-no-top .frame-navigation-middle {
  top: 30px;
}
.frame-navigation-pane-one-top .frame-navigation-middle {
  top: 72px;
}
.frame-navigation-pane-full-top .frame-navigation-middle {
  top: 111px;
}
.frame-navigation-middle-background {
  position: absolute;
  top: 0;
  right: 0;
  height: 100%;
  width: 3px;
  margin: 0;
  padding: 0;
  border: none;
  background-color: #5c636D;
}
.frame-navigation-middle li {
  display: block;
  padding: 0;
  margin: 0;
}
.frame-navigation-middle li div,
.frame-navigation-group li,
.frame-navigation-top li:only-child {
  display: table;
  table-layout: fixed;
  margin: 0;
  padding: 0;
  padding-left: 15px;
  border: none;
  height: 40px;
  box-sizing: content-box;
  /* iPad doesn't seem to appreciate border-box => have to use content-box + fixed width in pixels rather than 100% */

  -moz-box-sizing: content-box;
  -webkit-box-sizing: content-box;
  border-top: 1px solid #5C636D;
}
.frame-navigation-middle li div,
.frame-navigation-group li {
  width: 212px;
  border-bottom: 1px solid #353B46;
}
.frame-navigation-top li:only-child {
  width: 226px;
}
.frame-navigation-middle .frame-navigation-option-icon,
.frame-navigation-top li:only-child .frame-navigation-option-icon {
  width: 16px;
  padding: 12px 9px 11px 0px;
  background-clip: content-box;
  box-sizing: content-box;
  -moz-box-sizing: content-box;
  line-height: 17px;
}
.frame-navigation-middle .frame-navigation-option-text,
.frame-navigation-top li:only-child .frame-navigation-option-text {
  box-sizing: border-box;
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  display: table-cell;
  vertical-align: middle;
  white-space: nowrap;
}
.frame-navigation-group {
  background-color: #576172;
}
.frame-navigation-group ul {
  overflow: hidden;
  transition: height .6s;
}
.frame-navigation-group-collapsed ul {
  height: 0;
}
.frame-navigation-group:only-child > div > .frame-navigation-option-right {
  background-image: none;
}
.frame-navigation-group > div > .frame-navigation-option-right {
  background-position: -106px -43px;
}
.frame-navigation-group-collapsed > div > .frame-navigation-option-right {
  background-position: -120px -44px;
}
.frame-navigation-middle .frame-navigation-option,
.frame-navigation-top .frame-navigation-option:only-child {
  background-color: #474E58;
  border-right: 3px solid #5c636D;
}
.frame-navigation-group li {
  padding-right: 14px;
}
.frame-navigation-group li.frame-navigation-option-selected,
.frame-navigation-group li:hover,
.frame-navigation-top li.frame-navigation-option-selected:only-child,
.frame-navigation-top li:only-child:hover {
  border-right: none;
}
.frame-navigation-middle li div,
.frame-navigation-group li.frame-navigation-option-selected,
.frame-navigation-group li:hover {
  padding-right: 17px;
}
.frame-navigation-top li:only-child:hover,
.frame-navigation-top li.frame-navigation-option-selected:only-child {
  padding-right: 3px;
}
.frame-navigation-middle .frame-navigation-option-external {
  background-position: -51px -44px;
}
.frame-navigation-option-icon {
  background-position: left center;
}
.frame-navigation-option-home {
  background-image: url("{PATH}/sprite.png{VERSION}");
  background-position: -35px -44px;
}
.frame-navigation-option-activities {
  background-image: url("{PATH}/sprite.png{VERSION}");
  background-position: -91px -18px;
}
.frame-navigation-option-settings {
  background-image: url("{PATH}/sprite.png{VERSION}");
  background-position: -74px -18px;
}
.frame-navigation-option-help {
  background-image: url("{PATH}/sprite.png{VERSION}");
  background-position: 0 -44px;
}
.frame-navigation-option-about {
  background-image: url("{PATH}/sprite.png{VERSION}");
  background-position: -17px -44px;
}
/* Log in option */
.frame-navigation-group li.frame-navigation-option-login {
  height: 86px;
  padding-left: 0;
  width: 227px;
  text-align: center;
}
.frame-navigation-group li.frame-navigation-option-login .frame-navigation-option-text {
  white-space: normal;
  padding-left: 7px;
}
.frame-navigation-group li.frame-navigation-option-login .frame-navigation-option-icon {
  display: inline-block;
  padding: 0;
  height: 17px;
  width: 17px;
  line-height: 17px;
  margin-bottom: 3px;
  background-image: url("{PATH}/sprite.png{VERSION}");
  background-repeat: no-repeat;
  background-position: -108px -30px;
}
.frame-navigation-group li.frame-navigation-option-login .frame-application-loading-rotate {
  border-radius: 50%;
  -moz-border-radius: 50%;
  border-width: 6px;
  width: 30px;
  height: 30px;
}
/* TOGGLE BUTTON FOR SHOWING/HIDING THE NAVIGATION PANE */
.frame-navigation-toggle {
  position: absolute;
  box-sizing: border-box;
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  top: -1px;
  right: -32px;
  height: 31px;
  width: 32px;
  margin: 0;
  padding: 0;
  border: 1px solid #262933;
  background-color: #296ACC;
  overflow: hidden;
}
.frame-navigation-hidden .frame-navigation-toggle {
  right: -33px;
  border-top-color: #353B46;
  border-bottom-color: #353B46;
  border-left-style: none;
  border-right-style: none;
  background-color: #454B53;
}
.frame-navigation-hidden .frame-navigation-toggle:hover {
  border-top-color: #262933;
  border-bottom-color: #262933;
  border-left-style: solid;
  border-right-style: solid;
  background-color: #296ACC;
}
.frame-navigation-toggle div {
  box-sizing: border-box;
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  height: 100%;
  width: 100%;
  border: none;
  border-top: 1px solid #5B8EDE;
  background-image: url("{PATH}/sprite.png{VERSION}");
  background-repeat: no-repeat;
  background-position: -79px -50px;
  padding: 6px 7px;
  background-clip: content-box;
}
.frame-navigation-hidden .frame-navigation-toggle div {
  border-top-color: #5C636D;
  padding: 6px 8px;
  background-position: -61px -50px;
}
.frame-navigation-hidden .frame-navigation-toggle:hover div {
  border-top-color: #5B8EDE;
  padding: 6px 7px;
  background-position: -79px -50px;
}
SDL.Globalize.addCultureInfo( "default", {
    messages: {
		"apphost.apptitle": "SDL",
        "apphost.home": "Home",
		"apphost.settings": "Settings",
		"apphost.activities": "Activities",
		"apphost.help": "Help",
		"apphost.about": "About",
		"apphost.loading": "Loading",
		"apphost.login": "Log in",
		"apphost.toaccess": "{0} to access this feature"
    }
});<script id='SDL.Client.UI.ApplicationHost.Views.Frame' type='text/html+knockout'>
	<div data-bind="attr: {lang: culture}">
		<!-- ko if: !initialized() -->
			<div class="frame-applications">
				<div class="frame-application-loading">
					<div>
						<div class="frame-application-loading-screen">&nbsp;</div>
						<div>
							<span>
								<span data-bind="text: $root.localize('apphost.loading')" class="frame-application-loading-text"></span>
							</span>
						</div>
						<div>
							<span>
								<span class="frame-application-loading-rotate" data-bind="attr: {foo: $root.animateLoadingFeedback($element)}"></span>
							</span>
						</div>
					</div>
				</div>
			</div>
		<!-- /ko -->
		<!-- ko if: initialized -->
			<div class="frame-applications" data-bind="foreach: navigationItemTargetDisplays.concat(authenticationTargetDisplays), event: {scroll: function() {$element.scrollLeft = 0;}}">
				<div data-bind="if: accessed() && !disposed(),
								css: {'frame-application-fixed': $data.navigationItem && $data.navigationItem() &&
																	($data.navigationItem().overlay === false || ($data.navigationItem().type == 'home' && !$data.navigationItem().overlay)) &&
																	$root.navigationPaneShown(),
									'frame-application-hidden': $data != $root.shownTargetDisplay() }">
					<div class="frame-application-scroll-wrapper">
						<iframe data-bind="attr: { src: src, foo: $root.registerTargetDisplayFrame($data, $element) },
							event: {load: function() {loaded(true);}, focus: $root.blurredNavigationPane}"></iframe>
					</div>
					<!-- ko if: $root.setTargetDisplayLocation($data, $element) -->
						<!-- setting iframe's location via javascript to:
							1. manage history (using location.replace())
							2. do not reload if the change is only a hash parameter
						-->
					<!-- /ko -->
					<!-- ko if: loading -->
						<div class="frame-application-loading">
							<div>
								<div class="frame-application-loading-screen">&nbsp;</div>
								<div>
									<span>
										<span data-bind="text: $root.localize('apphost.loading')" class="frame-application-loading-text"></span>
									</span>
								</div>
								<div>
									<span>
										<span class="frame-application-loading-rotate" data-bind="attr: {foo: $root.animateLoadingFeedback($element)}"></span>
									</span>
								</div>
							</div>
						</div>
					<!-- /ko -->
				</div>
			</div>

			<div class="frame-navigation" data-bind="css: {'frame-navigation-hidden': !navigationPaneShown(), 'frame-navigation-shown': navigationPaneShown},
						event: {blur: blurredNavigationPane}" tabIndex="0">
				<div class="frame-navigation-toggle" data-bind="click: toggleNavigationPane, visible: navigationPaneToggleShown"><div _unselectable="on"></div></div>
				<div class="frame-navigation-pane" data-bind="css: {
						'frame-navigation-pane-no-top': !topNavigationGroup.shownItems(),
						'frame-navigation-pane-one-top': topNavigationGroup.shownItems() == 1,
						'frame-navigation-pane-full-top': topNavigationGroup.shownItems() > 1}">
					<div class="frame-navigation-logo" unselectable="on"></div>
					<!-- ko if: topNavigationGroup.shownItems() > 0 -->
						<ul class="frame-navigation-top">
							<!-- ko if: $root.homeNavigationItem -->
								<li data-bind="click: function() {$root.selectNavigationItem($root.homeNavigationItem)},
												css: { 'frame-navigation-option-selected': $root.homeNavigationItem == $root.currentNavigationItem() }"
											class="frame-navigation-option" unselectable="on">
									<span class="frame-navigation-option-icon frame-navigation-option-home" unselectable="on">&nbsp;</span>
									<span class="frame-navigation-option-text" data-bind="text: $root.localize('apphost.home')" unselectable="on"></span>
								</li>
							<!-- /ko -->
						</ul>
					<!-- /ko -->
					<div class="frame-navigation-middle" data-bind="control: {type: 'SDL.UI.Controls.Knockout.ScrollView', data: {overflowX: 'hidden', style: 'dark', overlay: true}}">
						<div class="frame-navigation-middle-background"></div>
						<div data-sdl-scrollview-child='true' unselectable="on">
							<ul data-bind="foreach: navigationGroups">
								<!-- ko if: $data.shownItems() > 0 -->
									<li class="frame-navigation-group" data-bind="css: { 'frame-navigation-group-collapsed': $data != $root.expandedNavigationGroup() }">
										<div unselectable="on" data-bind="click: $root.toggleExpandNavigationGroup">
											<span class="frame-navigation-option-text"
												data-bind="text: $root.getNavigationGroupName($data)" unselectable="on"></span>
											<span class="frame-navigation-option-right" unselectable="on">&nbsp;</span>
										</div>

										<!-- ko if: $data.authenticationTargetDisplay && $data.authenticationTargetDisplay() -->
											<ul data-bind="style: {height: ($data == $root.expandedNavigationGroup() ? 88 : 0) + 'px'}">
												<li class="frame-navigation-option frame-navigation-option-login"
													data-bind="css: { 'frame-navigation-option-selected':
																	$root.currentNavigationItem() ? $data == $root.currentNavigationItem().navigationGroup : $data == $root.currentNavigationGroup() },
														click: $root.selectNavigationGroup">
													<span class="frame-navigation-option-text" unselectable="on">
														<!-- ko if: authenticationTargetDisplay().loading() -->
															<span class="frame-application-loading-rotate" data-bind="attr: {foo: $root.animateLoadingFeedback($element)}"></span>
														<!-- /ko -->
														<!-- ko if: !authenticationTargetDisplay().loading() -->
															<span class="frame-navigation-option-icon" unselectable="on">&nbsp;</span><br/>
															<span data-bind="html: $root.localize('apphost.toaccess', ['<strong>' + $root.localize('apphost.login') + '</strong>'])"></span>
														<!-- /ko -->
													</span>
												</li>
											</ul>
										<!-- /ko -->

										<!-- ko if: !$data.authenticationTargetDisplay || !$data.authenticationTargetDisplay() -->
											<ul data-bind="foreach: navigationItems, style: {height: ($data == $root.expandedNavigationGroup() ? shownItems() * 42 : 0) + 'px'}">
												<!-- ko if: !$data.hidden() && !$data.contextual() -->
													<li class="frame-navigation-option"
														data-bind="css: { 'frame-navigation-option-selected': $data == $root.currentNavigationItem() },
															click: $root.selectNavigationItem">
														<span class = "frame-navigation-option-icon" unselectable="on"
															data-bind="css: {'frame-navigation-option-home': !$data.icon && $data.type == 'home',
																	'frame-navigation-option-activities': !$data.icon && $data.type == 'activities',
																	'frame-navigation-option-settings': !$data.icon && $data.type == 'settings',
																	'frame-navigation-option-help': !$data.icon && $data.type == 'help',
																	'frame-navigation-option-about': !$data.icon && $data.type == 'about'},
																	attr: {style: $data.icon ? 'background-image: url(\'' + $data.icon + '\')' : ''}">&nbsp;</span>
														<span class="frame-navigation-option-text" data-bind="text: $root.getNavigationItemName($data)" unselectable="on"></span>
														<!-- ko if: $data.external -->
															<span class="frame-navigation-option-right frame-navigation-option-external" unselectable="on">&nbsp;</span>
														<!-- /ko -->
													</li>
												<!-- /ko -->
											</ul>
										<!-- /ko -->
									</li>
								<!-- /ko -->
							</ul>
						</div>
					</div>
				</div>
			</div>
		<!-- /ko -->
	</div>
</script>