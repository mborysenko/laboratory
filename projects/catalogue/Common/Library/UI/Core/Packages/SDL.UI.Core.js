/*SDL-PACKAGE*/
var SDL;
(function()
{
	var packageContextUrl;
	var defaultLocation = location.protocol + '//' + location.host + '/';
	if (SDL && SDL.Client && SDL.Client.Resources && SDL.Client.Resources.executingPackageUrl)
	{
		packageContextUrl = SDL.Client.Resources.executingPackageUrl.replace(/[^\/]*$/, '');
		SDL.Client.Resources.executingPackageUrl = null;
	}
	else
	{
		var scripts = document.getElementsByTagName('script');
		for (var i = 0, len = scripts.length; i < len; i++)
		{
			var script = scripts[i];
			var src = script.src;
			if (src)
			{
				if (script.getAttribute('data-package-name') == 'SDL.UI.Core')
				{
					packageContextUrl = src.replace(/[^\/]*$/, '');
					break;
				}
				else if (!packageContextUrl &&
					src.slice(-15).toLowerCase() == '/sdl.ui.core.js')
				{
					packageContextUrl = src.slice(0, -14);
				}
			}
		}
	}

	var globalEval = eval;
	globalEval(/*FILE-BEGIN*/"var SDL;\r\n(function (SDL) {\r\n    (function (UI) {\r\n        (function (Core) {\r\n            /// \u003creference path=\"../../SDL.Client.Core/Libraries/jQuery/SDL.jQuery.d.ts\" /\u003e\r\n            /// \u003creference path=\"../../SDL.Client.Core/Types/Types.d.ts\" /\u003e\r\n            /// \u003creference path=\"../../SDL.Client.Core/Types/Array.d.ts\" /\u003e\r\n            /// \u003creference path=\"../../SDL.Client.Core/Types/OO.d.ts\" /\u003e\r\n            /// \u003creference path=\"../../SDL.Client.Core/Diagnostics/Assert.d.ts\" /\u003e\r\n            /// \u003creference path=\"../../SDL.Client.Core/Resources/ResourceManager.d.ts\" /\u003e\r\n            /// \u003creference path=\"../Controls/ControlBase.ts\" /\u003e\r\n            (function (Renderers) {\r\n                var ControlRenderer = (function () {\r\n                    function ControlRenderer() {\r\n                    }\r\n                    ControlRenderer.renderControl = function (type, element, settings, callback, errorcallback) {\r\n                        if (element) {\r\n                            SDL.jQuery(element).data(\"control-create\", true);\r\n                        }\r\n\r\n                        SDL.Client.Resources.ResourceManager.load(type, function () {\r\n                            if (!element || SDL.jQuery(element).data(\"control-create\")) {\r\n                                var ctor = ControlRenderer.types[type];\r\n                                if (!ctor) {\r\n                                    ctor = ControlRenderer.types[type] = ControlRenderer.getTypeConstructor(type);\r\n                                }\r\n\r\n                                if (!element) {\r\n                                    if (ctor.createElement) {\r\n                                        element = ctor.createElement(document, settings, SDL.jQuery, callback ? (function () {\r\n                                            return callback(control);\r\n                                        }) : null, errorcallback);\r\n                                    } else {\r\n                                        element = document.createElement(\"div\");\r\n                                    }\r\n                                }\r\n\r\n                                // Instantiate the control\r\n                                var control;\r\n                                if (ctor.isAsynchronous) {\r\n                                    var callbackInvoked = false;\r\n                                    var _callback = callback ? function () {\r\n                                        callbackInvoked = true;\r\n                                        if (control) {\r\n                                            callback(control);\r\n                                            callback = null;\r\n                                        }\r\n                                    } : null;\r\n                                    control = new ctor(element, settings, SDL.jQuery, _callback, errorcallback);\r\n                                    if (callback \u0026\u0026 callbackInvoked) {\r\n                                        callback(control);\r\n                                    }\r\n                                } else {\r\n                                    control = new ctor(element, settings, SDL.jQuery);\r\n                                    if (callback) {\r\n                                        callback(control);\r\n                                    }\r\n                                }\r\n                            }\r\n                        });\r\n                    };\r\n\r\n                    ControlRenderer.onControlCreated = function (control) {\r\n                        var type = control.getTypeName();\r\n                        if (ControlRenderer.createdControls[type]) {\r\n                            ControlRenderer.createdControls[type].push(control);\r\n                        } else {\r\n                            ControlRenderer.createdControls[type] = [control];\r\n                        }\r\n                    };\r\n\r\n                    ControlRenderer.disposeControl = function (control) {\r\n                        if (control.getElement) {\r\n                            SDL.jQuery(control.getElement()).removeData();\r\n                        }\r\n                        if (control.dispose) {\r\n                            control.dispose();\r\n                        }\r\n                    };\r\n\r\n                    ControlRenderer.onControlDisposed = function (control) {\r\n                        var type = control.getTypeName();\r\n                        if (ControlRenderer.createdControls[type]) {\r\n                            SDL.Client.Types.Array.removeAt(ControlRenderer.createdControls[type], ControlRenderer.createdControls[type].indexOf(control));\r\n                        }\r\n                    };\r\n\r\n                    ControlRenderer.getCreatedControlCounts = function () {\r\n                        var createdControls = {};\r\n                        SDL.jQuery.each(ControlRenderer.createdControls, function (type, controls) {\r\n                            createdControls[type] = controls.length;\r\n                        });\r\n                        return createdControls;\r\n                    };\r\n\r\n                    ControlRenderer.getTypeConstructor = function (type) {\r\n                        SDL.Client.Diagnostics.Assert.isString(type, \"Control type name is expected.\");\r\n\r\n                        var ctor;\r\n                        try  {\r\n                            ctor = SDL.Client.Type.resolveNamespace(type);\r\n                        } catch (err) {\r\n                            SDL.Client.Diagnostics.Assert.raiseError(\"Unable to evaluate \\\"\" + type + \"\\\": \" + err.description);\r\n                        }\r\n                        SDL.Client.Diagnostics.Assert.isFunction(ctor, \"Unable to evaluate \\\"\" + type + \"\\\".\");\r\n                        return ctor;\r\n                    };\r\n                    ControlRenderer.types = {};\r\n                    ControlRenderer.createdControls = {};\r\n                    return ControlRenderer;\r\n                })();\r\n                Renderers.ControlRenderer = ControlRenderer;\r\n                ;\r\n            })(Core.Renderers || (Core.Renderers = {}));\r\n            var Renderers = Core.Renderers;\r\n        })(UI.Core || (UI.Core = {}));\r\n        var Core = UI.Core;\r\n    })(SDL.UI || (SDL.UI = {}));\r\n    var UI = SDL.UI;\r\n})(SDL || (SDL = {}));\r\n;\r\n//# sourceMappingURL=ControlRenderer.js.map\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Renderers/ControlRenderer.js");
	globalEval(/*FILE-BEGIN*/"var SDL;\r\n(function (SDL) {\r\n    (function (UI) {\r\n        (function (Core) {\r\n            /// \u003creference path=\"../../SDL.Client.Core/Libraries/jQuery/jQuery.d.ts\" /\u003e\r\n            /// \u003creference path=\"../../SDL.Client.Core/Types/Object.d.ts\" /\u003e\r\n            (function (Controls) {\r\n                function getInstanceAttributeName(control) {\r\n                    return \"data-__control__-\" + SDL.Client.Types.Object.getUniqueId(control);\r\n                }\r\n                Controls.getInstanceAttributeName = getInstanceAttributeName;\r\n            })(Core.Controls || (Core.Controls = {}));\r\n            var Controls = Core.Controls;\r\n        })(UI.Core || (UI.Core = {}));\r\n        var Core = UI.Core;\r\n    })(SDL.UI || (SDL.UI = {}));\r\n    var UI = SDL.UI;\r\n})(SDL || (SDL = {}));\r\n//# sourceMappingURL=Base.js.map\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Controls/Base.js");
	globalEval(/*FILE-BEGIN*/"var SDL;\r\n(function (SDL) {\r\n    (function (UI) {\r\n        (function (Core) {\r\n            /// \u003creference path=\"../../SDL.Client.Core/Libraries/jQuery/jQuery.d.ts\" /\u003e\r\n            /// \u003creference path=\"../Renderers/ControlRenderer.ts\" /\u003e\r\n            /// \u003creference path=\"Base.ts\" /\u003e\r\n            (function (Controls) {\r\n                function createJQueryPlugin(jQuery, control, name, methods) {\r\n                    jQuery.fn[name] = function SDL$UI$Core$ControlBase$widget(options) {\r\n                        var instances = [];\r\n                        var jQueryObject = this;\r\n\r\n                        jQueryObject.each(function () {\r\n                            var element = this;\r\n                            var attrName = Controls.getInstanceAttributeName(control);\r\n                            var instance = element[attrName];\r\n                            if (!instance || (instance.getDisposed \u0026\u0026 instance.getDisposed())) {\r\n                                // create a control instance\r\n                                instance = element[attrName] = new control(element, options, jQuery);\r\n                            } else if (options \u0026\u0026 instance.update) {\r\n                                // Call update on the existing instance\r\n                                instance.update(options);\r\n                            }\r\n                            instances.push(instance);\r\n                        });\r\n\r\n                        jQueryObject = jQueryObject.pushStack(instances);\r\n\r\n                        if (methods) {\r\n                            jQuery.each(methods, function (i, methodDefinition) {\r\n                                if (methodDefinition \u0026\u0026 methodDefinition.method) {\r\n                                    jQueryObject[methodDefinition.method] = function () {\r\n                                        var implementation = methodDefinition.implementation || methodDefinition.method;\r\n                                        for (var i = 0, len = this.length; i \u003c len; i++) {\r\n                                            var instance = jQueryObject[i];\r\n                                            var result = instance[implementation].apply(instance, arguments);\r\n                                            if (methodDefinition.returnsValue) {\r\n                                                return result;\r\n                                            }\r\n                                        }\r\n                                        return jQueryObject;\r\n                                    };\r\n                                }\r\n                            });\r\n\r\n                            jQueryObject[\"dispose\"] = function () {\r\n                                for (var i = 0, len = this.length; i \u003c len; i++) {\r\n                                    SDL.UI.Core.Renderers.ControlRenderer.disposeControl(jQueryObject[i]);\r\n                                }\r\n                                return jQueryObject.end();\r\n                            };\r\n                        }\r\n\r\n                        return jQueryObject;\r\n                    };\r\n                }\r\n                Controls.createJQueryPlugin = createJQueryPlugin;\r\n            })(Core.Controls || (Core.Controls = {}));\r\n            var Controls = Core.Controls;\r\n        })(UI.Core || (UI.Core = {}));\r\n        var Core = UI.Core;\r\n    })(SDL.UI || (SDL.UI = {}));\r\n    var UI = SDL.UI;\r\n})(SDL || (SDL = {}));\r\n//# sourceMappingURL=jQuery.js.map\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Controls/jQuery.js");
	globalEval(/*FILE-BEGIN*/"var __extends = this.__extends || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    __.prototype = b.prototype;\r\n    d.prototype = new __();\r\n};\r\nvar SDL;\r\n(function (SDL) {\r\n    (function (UI) {\r\n        (function (Core) {\r\n            /// \u003creference path=\"../../SDL.Client.Core/Libraries/jQuery/jQuery.d.ts\" /\u003e\r\n            /// \u003creference path=\"../../SDL.Client.Core/Types/Types.d.ts\" /\u003e\r\n            /// \u003creference path=\"../../SDL.Client.Core/Types/ObjectWithEvents.d.ts\" /\u003e\r\n            /// \u003creference path=\"../Renderers/ControlRenderer.ts\" /\u003e\r\n            /// \u003creference path=\"Base.ts\" /\u003e\r\n            (function (Controls) {\r\n                eval(SDL.Client.Types.OO.enableCustomInheritance);\r\n                var ControlBase = (function (_super) {\r\n                    __extends(ControlBase, _super);\r\n                    function ControlBase(element, options, jQuery, callback, errorcallback) {\r\n                        _super.call(this);\r\n                        var p = this.properties;\r\n                        p.element = element;\r\n                        p.options = options;\r\n                        p.jQuery = jQuery;\r\n                        p.callback = callback;\r\n                        p.errorcallback = errorcallback;\r\n                    }\r\n                    ControlBase.prototype.update = function (options) {\r\n                        this.properties.options = options;\r\n                        // will be overwritten in deriving class\r\n                    };\r\n\r\n                    ControlBase.prototype.$initialize = function () {\r\n                        var controlType = SDL.Client.Type.resolveNamespace(this.getTypeName());\r\n                        this.properties.element[Controls.getInstanceAttributeName(controlType)] = this;\r\n                        Core.Renderers.ControlRenderer.onControlCreated(this);\r\n                        this.render();\r\n                    };\r\n\r\n                    ControlBase.prototype.render = function () {\r\n                        this.setRendered();\r\n                        // override in subclasses\r\n                    };\r\n\r\n                    ControlBase.prototype.setRendered = function () {\r\n                        var p = this.properties;\r\n                        p.errorcallback = null;\r\n                        if (p.callback) {\r\n                            p.callback();\r\n                            p.callback = null;\r\n                        }\r\n                    };\r\n\r\n                    ControlBase.prototype.getElement = function () {\r\n                        return this.properties.element;\r\n                    };\r\n\r\n                    ControlBase.prototype.getJQuery = function () {\r\n                        return this.properties.jQuery;\r\n                    };\r\n\r\n                    ControlBase.prototype.dispose = function () {\r\n                        this.callBase(\"SDL.Client.Types.ObjectWithEvents\", \"dispose\");\r\n                        Core.Renderers.ControlRenderer.onControlDisposed(this);\r\n                    };\r\n                    return ControlBase;\r\n                })(SDL.Client.Types.ObjectWithEvents);\r\n                Controls.ControlBase = ControlBase;\r\n\r\n                ControlBase.prototype.disposeInterface = SDL.Client.Types.OO.nonInheritable(function SDL$UI$Core$Controls$ControlBase$disposeInterface() {\r\n                });\r\n\r\n                SDL.Client.Types.OO.createInterface(\"SDL.UI.Core.Controls.ControlBase\", ControlBase);\r\n            })(Core.Controls || (Core.Controls = {}));\r\n            var Controls = Core.Controls;\r\n        })(UI.Core || (UI.Core = {}));\r\n        var Core = UI.Core;\r\n    })(SDL.UI || (SDL.UI = {}));\r\n    var UI = SDL.UI;\r\n})(SDL || (SDL = {}));\r\n//# sourceMappingURL=ControlBase.js.map\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Controls/ControlBase.js");
	globalEval(/*FILE-BEGIN*/"/*! @namespace {SDL.UI.Core.Event.Constants} */\r\nSDL.Client.Type.registerNamespace(\"SDL.UI.Core.Event.Constants\");\r\n\r\n/**\r\n * Defines the ASCII key codes for some common keys.\r\n * @enum\r\n */\r\nSDL.UI.Core.Event.Constants.Keys =\r\n{\r\n\tBACKSPACE: 8,\r\n\tALT: 18,\r\n\tDELETE: 46,\r\n\tDOWN: 40,\r\n\tEND: 35,\r\n\tENTER: 13,\r\n\tESCAPE: 27,\r\n\tHOME: 36,\r\n\tLEFT: 37,\r\n\tPAGEDOWN: 34,\r\n\tPAGEUP: 33,\r\n\tRIGHT: 39,\r\n\tSPACE: 32,\r\n\tTAB: 9,\r\n\tUP: 38,\r\n\r\n\tA: 65,\r\n\tC: 67,\r\n\tV: 86,\r\n\tX: 88,\r\n\r\n\tF1: 112,\r\n\tF2: 113,\r\n\tF3: 114,\r\n\tF4: 115,\r\n\tF5: 116,\r\n\tF6: 117,\r\n\tF7: 118,\r\n\tF8: 119,\r\n\tF9: 120,\r\n\tF10: 121,\r\n\tF11: 122,\r\n\tF12: 123\r\n};\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Event/Constants.js");
	globalEval(/*FILE-BEGIN*/"var SDL;\r\n(function (SDL) {\r\n    (function (UI) {\r\n        (function (Core) {\r\n            /// \u003creference path=\"../../SDL.Client.Core/Libraries/jQuery/SDL.jQuery.d.ts\" /\u003e\r\n            /// \u003creference path=\"../../SDL.Client.Core/Types/Types.d.ts\" /\u003e\r\n            /// \u003creference path=\"../../SDL.Client.Core/Types/Array.d.ts\" /\u003e\r\n            /// \u003creference path=\"../../SDL.Client.Core/Types/OO.d.ts\" /\u003e\r\n            /// \u003creference path=\"../../SDL.Client.Core/Diagnostics/Assert.d.ts\" /\u003e\r\n            /// \u003creference path=\"../../SDL.Client.Core/Resources/ResourceManager.d.ts\" /\u003e\r\n            (function (Renderers) {\r\n                ;\r\n\r\n                var ViewRenderer = (function () {\r\n                    function ViewRenderer() {\r\n                    }\r\n                    ViewRenderer.registerTemplateRenderer = function (type, renderer) {\r\n                        ViewRenderer.templateRenderers[type] = renderer;\r\n                    };\r\n\r\n                    ViewRenderer.getTemplateRenderer = function (type) {\r\n                        return ViewRenderer.templateRenderers[type];\r\n                    };\r\n\r\n                    ViewRenderer.renderView = function (type, element, settings, callback, errorcallback) {\r\n                        if (element) {\r\n                            SDL.jQuery(element).data(\"view-create\", true);\r\n                        }\r\n\r\n                        SDL.Client.Resources.ResourceManager.load(type, function () {\r\n                            if (!element || SDL.jQuery(element).data(\"view-create\")) {\r\n                                var ctor = ViewRenderer.types[type];\r\n                                if (!ctor) {\r\n                                    ctor = ViewRenderer.types[type] = ViewRenderer.getTypeConstructor(type);\r\n                                }\r\n\r\n                                if (!element) {\r\n                                    if (ctor.createElement) {\r\n                                        element = ctor.createElement(document, settings);\r\n                                    } else {\r\n                                        element = document.createElement(\"div\");\r\n                                    }\r\n                                }\r\n\r\n                                // Instantiate the view\r\n                                var view = new ctor(element, settings);\r\n                                if (!SDL.Client.Types.OO.implementsInterface(view, \"SDL.UI.Core.Views.ViewBase\")) {\r\n                                    SDL.Client.Diagnostics.Assert.raiseError(\"\u0027\" + type + \"\u0027 must implement SDL.UI.Core.Views.ViewBase interface.\");\r\n                                }\r\n\r\n                                // Render the view\r\n                                view.render(!callback ? null : function () {\r\n                                    callback(view);\r\n                                });\r\n                            }\r\n                        }, errorcallback);\r\n                    };\r\n\r\n                    ViewRenderer.onViewCreated = function (view) {\r\n                        var type = view.getTypeName();\r\n                        if (ViewRenderer.createdViews[type]) {\r\n                            ViewRenderer.createdViews[type].push(view);\r\n                        } else {\r\n                            ViewRenderer.createdViews[type] = [view];\r\n                        }\r\n                    };\r\n\r\n                    ViewRenderer.disposeView = function (view) {\r\n                        SDL.jQuery(view.getElement()).removeData();\r\n                        view.dispose();\r\n                    };\r\n\r\n                    ViewRenderer.onViewDisposed = function (view) {\r\n                        var type = view.getTypeName();\r\n                        if (ViewRenderer.createdViews[type]) {\r\n                            SDL.Client.Types.Array.removeAt(ViewRenderer.createdViews[type], ViewRenderer.createdViews[type].indexOf(view));\r\n                        }\r\n                    };\r\n\r\n                    ViewRenderer.getCreatedViewCounts = function () {\r\n                        var createdViews = {};\r\n                        SDL.jQuery.each(ViewRenderer.createdViews, function (type, views) {\r\n                            createdViews[type] = views.length;\r\n                        });\r\n                        return createdViews;\r\n                    };\r\n\r\n                    ViewRenderer.getTypeConstructor = function (type) {\r\n                        SDL.Client.Diagnostics.Assert.isString(type, \"View type name is expected.\");\r\n\r\n                        var ctor;\r\n                        try  {\r\n                            ctor = SDL.Client.Type.resolveNamespace(type);\r\n                        } catch (err) {\r\n                            SDL.Client.Diagnostics.Assert.raiseError(\"Unable to evaluate \\\"\" + type + \"\\\": \" + err.description);\r\n                        }\r\n                        SDL.Client.Diagnostics.Assert.isFunction(ctor, \"Unable to evaluate \\\"\" + type + \"\\\".\");\r\n                        return ctor;\r\n                    };\r\n                    ViewRenderer.templateRenderers = {};\r\n                    ViewRenderer.types = {};\r\n                    ViewRenderer.createdViews = {};\r\n                    return ViewRenderer;\r\n                })();\r\n                Renderers.ViewRenderer = ViewRenderer;\r\n                ;\r\n            })(Core.Renderers || (Core.Renderers = {}));\r\n            var Renderers = Core.Renderers;\r\n        })(UI.Core || (UI.Core = {}));\r\n        var Core = UI.Core;\r\n    })(SDL.UI || (SDL.UI = {}));\r\n    var UI = SDL.UI;\r\n})(SDL || (SDL = {}));\r\n;\r\n//# sourceMappingURL=ViewRenderer.js.map\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Renderers/ViewRenderer.js");
	globalEval(/*FILE-BEGIN*/"/*! @namespace {SDL.UI.Core.Utils.Css} */\r\nSDL.Client.Type.registerNamespace(\"SDL.UI.Core.Utils.Css\");\r\n\r\nSDL.UI.Core.Utils.Css.addDomClasses = function SDL$UI$Core$Utils$Css$addDomClasses(doc)\r\n{\r\n\tvar $documentElement = SDL.jQuery(doc.documentElement);\r\n\tif (SDL.jQuery.browser.msie)\r\n\t{\r\n\t\t$documentElement.addClass(\"ie\");\r\n\t}\r\n\telse if (SDL.jQuery.browser.mozilla)\r\n\t{\r\n\t\t$documentElement.addClass(\"gecko\");\r\n\t}\r\n\telse if (SDL.jQuery.browser.webkit)\r\n\t{\r\n\t\t$documentElement.addClass(\"webkit\");\r\n\t}\r\n};\r\n\r\nSDL.UI.Core.Utils.Css.addDomClasses(document);\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Utils/Css.js");
	globalEval(/*FILE-BEGIN*/"/*! @namespace {SDL.UI.Core.Utils.Dom} */\r\n(function($)\r\n{\r\n\t$.fn.parentWindow = function()\r\n\t{\r\n\t\t// assuming all elements are in the same window\r\n\t\tvar elem = this[0];\r\n\t\twin = elem \u0026\u0026 elem.ownerDocument \u0026\u0026 (elem.ownerDocument.defaultView || elem.ownerDocument.parentWindow);\r\n\t\treturn win ? $(win) : $();\r\n\t};\r\n\r\n\t$.fn.enableSelection = function()\r\n\t{\r\n\t\treturn this.attr(\u0027unselectable\u0027, \u0027off\u0027)\r\n\t\t\t\t.css(\u0027user-select\u0027, \u0027text\u0027)\r\n\t\t\t\t.css(\u0027-webkit-user-select\u0027, \u0027text\u0027)\r\n\t\t\t\t.css(\u0027-moz-user-select\u0027, \u0027text\u0027)\r\n\t\t\t\t.css(\u0027-ms-user-select\u0027, \u0027text\u0027)\r\n\t\t\t\t.off(\"selectstart\");\r\n\t};\r\n\r\n\t$.fn.disableSelection = function()\r\n\t{\r\n\t\treturn this.attr(\u0027unselectable\u0027, \u0027on\u0027)\r\n\t\t\t.css(\u0027user-select\u0027, \u0027none\u0027)\r\n\t\t\t.css(\u0027-webkit-user-select\u0027, \u0027none\u0027)\r\n\t\t\t.css(\u0027-moz-user-select\u0027, \u0027-moz-none\u0027)\r\n\t\t\t.css(\u0027-ms-user-select\u0027, \u0027none\u0027)\r\n\t\t\t.on(\"selectstart\", function(e) { return $(e.target).is(\"input:text\"); });\r\n\t};\r\n\r\n\t$.uniqueId = function SDL$Client$Types$Object$uniqueId()\r\n\t{\r\n\t\treturn SDL.Client.Types.Object.getUniqueId(this[0]);\r\n\t};\r\n\r\n})(SDL.jQuery);"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Utils/Dom.js");
	globalEval(/*FILE-BEGIN*/"/*! @namespace {SDL.UI.Core.Utils.Event} */\r\nSDL.Client.Type.registerNamespace(\"SDL.UI.Core.Utils.Event\");\r\n\r\n/**\r\n * Returns \u003cc\u003etrue\u003c/c\u003e if the current event was raised by a left mouse click.\r\n * @param {DOMEvent} e The event that was raised.\r\n * @return {Boolean} A value indicating whether the current event was raised by a left mouse click.\r\n */\r\nSDL.UI.Core.Utils.Event.isLeftButton = function SDL$UI$Core$Utils$Event$isLeftButton(e)\r\n{\r\n\treturn e \u0026\u0026 (SDL.jQuery.browser.msie ? (e.button == 1 || e.type == \"click\") : e.button == 0) || false;\r\n};\r\n\r\n/**\r\n * Returns \u003cc\u003etrue\u003c/c\u003e if the event has Ctrl key set.\r\n * @param {DOMEvent} e The event.\r\n */\r\nSDL.UI.Core.Utils.Event.ctrlKey = function SDL$UI$Core$Utils$Event$ctrlKey(e)\r\n{\r\n\treturn e \u0026\u0026 (SDL.jQuery.browser.macintosh ? (e.metaKey \u0026\u0026 !e.ctrlKey) : e.ctrlKey) || false;\r\n};"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Utils/Event.js");
	globalEval(/*FILE-BEGIN*/"/*! @namespace {SDL.UI.Core.Views.ViewBase} */\r\nSDL.Client.Types.OO.createInterface(\"SDL.UI.Core.Views.ViewBase\");\r\n\r\n/**\r\n* Provides the base class for all tridion controls.\r\n* @constructor\r\n* @param {HTMLElement} markupElement The html element that contains the declarative markup for this control.\r\n*/\r\nSDL.UI.Core.Views.ViewBase.$constructor = function SDL$UI$Core$View$ViewBase$constructor(element, settings)\r\n{\r\n    this.addInterface(\"SDL.Client.Types.ObjectWithEvents\");\r\n\r\n    var p = this.properties;\r\n\tp.element = element;\r\n\tp.settings = settings;\r\n};\r\n\r\nSDL.UI.Core.Views.ViewBase.prototype.$initialize = function SDL$UI$Core$View$ViewBase$initialize()\r\n{\r\n\tSDL.UI.Core.Renderers.ViewRenderer.onViewCreated(this);\r\n\tthis.properties.templateName = this.getTypeName();\r\n};\r\n\r\nSDL.UI.Core.Views.ViewBase.prototype.getRenderOptions = function SDL$UI$Core$View$ViewBase$getRenderOptions()\r\n{\r\n\treturn null;\r\n};\r\n\r\nSDL.UI.Core.Views.ViewBase.prototype.render = function SDL$UI$Core$View$ViewBase$render(callback)\r\n{\r\n\tthis.getTemplateRenderer().render(this.getTemplateData(), this.properties.element, this.getRenderOptions(), callback);\r\n};\r\n\r\nSDL.UI.Core.Views.ViewBase.prototype.getTemplateData = function SDL$UI$Core$View$ViewBase$getTemplateData()\r\n{\r\n\tvar templateName = this.getTemplateName();\r\n\tvar templateResource = SDL.Client.Resources.ResourceManager.getTemplateResource(templateName);\r\n\tif (!templateResource || !templateResource.loaded)\r\n\t{\r\n\t\tthrow Error(\"Template resource \u0027\" + templateName + \"\u0027 is not loaded.\");\r\n\t}\r\n\treturn templateResource.template;\r\n};\r\n\r\nSDL.UI.Core.Views.ViewBase.prototype.getTemplateRenderer = function SDL$UI$Core$View$ViewBase$getTemplateRenderer()\r\n{\r\n\tvar templateName = this.getTemplateName();\r\n\tvar templateResource = SDL.Client.Resources.ResourceManager.getTemplateResource(templateName);\r\n\tif (!templateResource || !templateResource.loaded)\r\n\t{\r\n\t\tthrow Error(\"Template resource \u0027\" + templateName + \"\u0027 is not loaded.\");\r\n\t}\r\n\tvar renderer = SDL.UI.Core.Renderers.ViewRenderer.getTemplateRenderer(templateResource.type);\r\n\tif (!renderer)\r\n\t{\r\n\t\tthrow Error(\"No renderer is registered for tempalte type \u0027\" + templateResource.type + \"\u0027 (tempalte \u0027\" + templateName + \"\u0027). \");\r\n\t}\r\n\treturn renderer;\r\n};\r\n\r\nSDL.UI.Core.Views.ViewBase.prototype.getTemplateName = function SDL$UI$Core$View$ViewBase$getTemplateName()\r\n{\r\n    return this.properties.templateName;\r\n}\r\n\r\nSDL.UI.Core.Views.ViewBase.prototype.getElement = function SDL$UI$Core$View$ViewBase$getElement()\r\n{\r\n    return this.properties.element;\r\n}\r\n\r\nSDL.UI.Core.Views.ViewBase.prototype.disposeInterface = SDL.Client.Types.OO.nonInheritable(function SDL$UI$Core$View$ViewBase$disposeInterface()\r\n{\r\n\tSDL.UI.Core.Renderers.ViewRenderer.onViewDisposed(this);\r\n});"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Views/ViewBase.js");
	globalEval(/*FILE-BEGIN*/"var SDL;\r\n(function (SDL) {\r\n    (function (UI) {\r\n        /// \u003creference path=\"../../SDL.Client.Core/Libraries/jQuery/SDL.jQuery.d.ts\" /\u003e\r\n        /// \u003creference path=\"../../SDL.Client.Core/ConfigurationManager/ConfigurationManager.d.ts\" /\u003e\r\n        /// \u003creference path=\"../../SDL.Client.Core/Resources/ResourceManager.d.ts\" /\u003e\r\n        /// \u003creference path=\"../../SDL.Client.Core/Event/EventRegister.d.ts\" /\u003e\r\n        /// \u003creference path=\"../Renderers/ViewRenderer.ts\" /\u003e\r\n        /// \u003creference path=\"../Renderers/ControlRenderer.ts\" /\u003e\r\n        (function (Core) {\r\n            var cm = SDL.Client.Configuration.ConfigurationManager;\r\n            var rm = SDL.Client.Resources.ResourceManager;\r\n\r\n            var pageNode;\r\n            var pageNodes = SDL.Client.Xml.selectNodes(cm.configuration, \"//configuration/pages/page[@url!=\u0027*\u0027 and @view]\");\r\n            var path = window.location.pathname.toLowerCase();\r\n\r\n            for (var i = 0, len = pageNodes.length; i \u003c len; i++) {\r\n                var _pageNode = pageNodes[i];\r\n                if (_pageNode.getAttribute(\"url\").toLowerCase() == path) {\r\n                    pageNode = _pageNode;\r\n                    break;\r\n                }\r\n            }\r\n            if (!pageNode) {\r\n                pageNode = SDL.Client.Xml.selectSingleNode(cm.configuration, \"//configuration/pages/page[@url=\u0027*\u0027 and @view]\");\r\n            }\r\n\r\n            if (pageNode) {\r\n                var view = pageNode.getAttribute(\"view\");\r\n                rm.load(\"SDL.UI.Core.Renderers.ViewRenderer\", function () {\r\n                    var target = document.getElementById(\"main-view-target\") || document.body;\r\n                    Core.Renderers.ViewRenderer.renderView(view, target, null, function (view) {\r\n                        SDL.Client.Event.EventRegister.addEventHandler(SDL.Client.Event.EventRegister, \"beforedispose\", function () {\r\n                            Core.Renderers.ViewRenderer.disposeView(view);\r\n                        });\r\n                    });\r\n\r\n                    SDL.Client.Event.EventRegister.addEventListener(\"dispose\", function () {\r\n                        var undisposed = [];\r\n                        SDL.jQuery.each(Core.Renderers.ViewRenderer.getCreatedViewCounts(), function (i, value) {\r\n                            if (value != 0) {\r\n                                undisposed.push(i + \" (\" + value + \")\");\r\n                            }\r\n                        });\r\n\r\n                        if (Core.Renderers.ControlRenderer != null) {\r\n                            SDL.jQuery.each(Core.Renderers.ControlRenderer.getCreatedControlCounts(), function (i, value) {\r\n                                if (value != 0) {\r\n                                    undisposed.push(i + \" (\" + value + \")\");\r\n                                }\r\n                            });\r\n                        }\r\n\r\n                        if (undisposed.length) {\r\n                            alert(\"Some views/controls have been left undisposed:\\n\" + undisposed.join(\"\\n\"));\r\n                        }\r\n                    });\r\n                });\r\n                rm.load(view);\r\n            }\r\n        })(UI.Core || (UI.Core = {}));\r\n        var Core = UI.Core;\r\n    })(SDL.UI || (SDL.UI = {}));\r\n    var UI = SDL.UI;\r\n})(SDL || (SDL = {}));\r\n//# sourceMappingURL=init.js.map\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Bootstrap/init.js");
})();