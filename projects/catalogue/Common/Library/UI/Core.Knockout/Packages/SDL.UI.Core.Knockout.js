/*SDL-PACKAGE*/
var SDL;
(function()
{
	var packageContextUrl;
	var defaultLocation = location.protocol + '//' + location.host + '/';
	if (SDL && SDL.Client && SDL.Client.Resources && SDL.Client.Resources.executingPackageUrl)
	{
		packageContextUrl = SDL.Client.Resources.executingPackageUrl.replace(/[^\/]*$/, '');
		SDL.Client.Resources.executingPackageUrl = null;
	}
	else
	{
		var scripts = document.getElementsByTagName('script');
		for (var i = 0, len = scripts.length; i < len; i++)
		{
			var script = scripts[i];
			var src = script.src;
			if (src)
			{
				if (script.getAttribute('data-package-name') == 'SDL.UI.Core.Knockout')
				{
					packageContextUrl = src.replace(/[^\/]*$/, '');
					break;
				}
				else if (!packageContextUrl &&
					src.slice(-24).toLowerCase() == '/sdl.ui.core.knockout.js')
				{
					packageContextUrl = src.slice(0, -23);
				}
			}
		}
	}

	var globalEval = eval;
	globalEval(/*FILE-BEGIN*/"/*!\r\n * Knockout JavaScript library v3.2.0\r\n * (c) Steven Sanderson - http://knockoutjs.com/\r\n * License: MIT (http://www.opensource.org/licenses/mit-license.php)\r\n */\r\n\r\n(function(){\r\nvar DEBUG=true;\r\n(function(undefined){\r\n    // (0, eval)(\u0027this\u0027) is a robust way of getting a reference to the global object\r\n    // For details, see http://stackoverflow.com/questions/14119988/return-this-0-evalthis/14120023#14120023\r\n    var window = this || (0, eval)(\u0027this\u0027),\r\n        document = window[\u0027document\u0027],\r\n        navigator = window[\u0027navigator\u0027],\r\n        jQueryInstance = window[\"jQuery\"],\r\n        JSON = window[\"JSON\"];\r\n(function(factory) {\r\n    // Support three module loading scenarios\r\n    if (typeof require === \u0027function\u0027 \u0026\u0026 typeof exports === \u0027object\u0027 \u0026\u0026 typeof module === \u0027object\u0027) {\r\n        // [1] CommonJS/Node.js\r\n        var target = module[\u0027exports\u0027] || exports; // module.exports is for Node.js\r\n        factory(target, require);\r\n    } else if (typeof define === \u0027function\u0027 \u0026\u0026 define[\u0027amd\u0027]) {\r\n        // [2] AMD anonymous module\r\n        define([\u0027exports\u0027, \u0027require\u0027], factory);\r\n    } else {\r\n        // [3] No module loader (plain \u003cscript\u003e tag) - put directly in global namespace\r\n        factory(window[\u0027ko\u0027] = {});\r\n    }\r\n}(function(koExports, require){\r\n// Internally, all KO objects are attached to koExports (even the non-exported ones whose names will be minified by the closure compiler).\r\n// In the future, the following \"ko\" variable may be made distinct from \"koExports\" so that private objects are not externally reachable.\r\nvar ko = typeof koExports !== \u0027undefined\u0027 ? koExports : {};\r\n// Google Closure Compiler helpers (used only to make the minified file smaller)\r\nko.exportSymbol = function(koPath, object) {\r\n    var tokens = koPath.split(\".\");\r\n\r\n    // In the future, \"ko\" may become distinct from \"koExports\" (so that non-exported objects are not reachable)\r\n    // At that point, \"target\" would be set to: (typeof koExports !== \"undefined\" ? koExports : ko)\r\n    var target = ko;\r\n\r\n    for (var i = 0; i \u003c tokens.length - 1; i++)\r\n        target = target[tokens[i]];\r\n    target[tokens[tokens.length - 1]] = object;\r\n};\r\nko.exportProperty = function(owner, publicName, object) {\r\n    owner[publicName] = object;\r\n};\r\nko.version = \"3.2.0\";\r\n\r\nko.exportSymbol(\u0027version\u0027, ko.version);\r\nko.utils = (function () {\r\n    function objectForEach(obj, action) {\r\n        for (var prop in obj) {\r\n            if (obj.hasOwnProperty(prop)) {\r\n                action(prop, obj[prop]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function extend(target, source) {\r\n        if (source) {\r\n            for(var prop in source) {\r\n                if(source.hasOwnProperty(prop)) {\r\n                    target[prop] = source[prop];\r\n                }\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n\r\n    function setPrototypeOf(obj, proto) {\r\n        obj.__proto__ = proto;\r\n        return obj;\r\n    }\r\n\r\n    var canSetPrototype = ({ __proto__: [] } instanceof Array);\r\n\r\n    // Represent the known event types in a compact way, then at runtime transform it into a hash with event name as key (for fast lookup)\r\n    var knownEvents = {}, knownEventTypesByEventName = {};\r\n    var keyEventTypeName = (navigator \u0026\u0026 /Firefox\\/2/i.test(navigator.userAgent)) ? \u0027KeyboardEvent\u0027 : \u0027UIEvents\u0027;\r\n    knownEvents[keyEventTypeName] = [\u0027keyup\u0027, \u0027keydown\u0027, \u0027keypress\u0027];\r\n    knownEvents[\u0027MouseEvents\u0027] = [\u0027click\u0027, \u0027dblclick\u0027, \u0027mousedown\u0027, \u0027mouseup\u0027, \u0027mousemove\u0027, \u0027mouseover\u0027, \u0027mouseout\u0027, \u0027mouseenter\u0027, \u0027mouseleave\u0027];\r\n    objectForEach(knownEvents, function(eventType, knownEventsForType) {\r\n        if (knownEventsForType.length) {\r\n            for (var i = 0, j = knownEventsForType.length; i \u003c j; i++)\r\n                knownEventTypesByEventName[knownEventsForType[i]] = eventType;\r\n        }\r\n    });\r\n    var eventsThatMustBeRegisteredUsingAttachEvent = { \u0027propertychange\u0027: true }; // Workaround for an IE9 issue - https://github.com/SteveSanderson/knockout/issues/406\r\n\r\n    // Detect IE versions for bug workarounds (uses IE conditionals, not UA string, for robustness)\r\n    // Note that, since IE 10 does not support conditional comments, the following logic only detects IE \u003c 10.\r\n    // Currently this is by design, since IE 10+ behaves correctly when treated as a standard browser.\r\n    // If there is a future need to detect specific versions of IE10+, we will amend this.\r\n    var ieVersion = document \u0026\u0026 (function() {\r\n        var version = 3, div = document.createElement(\u0027div\u0027), iElems = div.getElementsByTagName(\u0027i\u0027);\r\n\r\n        // Keep constructing conditional HTML blocks until we hit one that resolves to an empty fragment\r\n        while (\r\n            div.innerHTML = \u0027\u003c!--[if gt IE \u0027 + (++version) + \u0027]\u003e\u003ci\u003e\u003c/i\u003e\u003c![endif]--\u003e\u0027,\r\n            iElems[0]\r\n        ) {}\r\n        return version \u003e 4 ? version : undefined;\r\n    }());\r\n    var isIe6 = ieVersion === 6,\r\n        isIe7 = ieVersion === 7;\r\n\r\n    function isClickOnCheckableElement(element, eventType) {\r\n        if ((ko.utils.tagNameLower(element) !== \"input\") || !element.type) return false;\r\n        if (eventType.toLowerCase() != \"click\") return false;\r\n        var inputType = element.type;\r\n        return (inputType == \"checkbox\") || (inputType == \"radio\");\r\n    }\r\n\r\n    return {\r\n        fieldsIncludedWithJsonPost: [\u0027authenticity_token\u0027, /^__RequestVerificationToken(_.*)?$/],\r\n\r\n        arrayForEach: function (array, action) {\r\n            for (var i = 0, j = array.length; i \u003c j; i++)\r\n                action(array[i], i);\r\n        },\r\n\r\n        arrayIndexOf: function (array, item) {\r\n            if (typeof Array.prototype.indexOf == \"function\")\r\n                return Array.prototype.indexOf.call(array, item);\r\n            for (var i = 0, j = array.length; i \u003c j; i++)\r\n                if (array[i] === item)\r\n                    return i;\r\n            return -1;\r\n        },\r\n\r\n        arrayFirst: function (array, predicate, predicateOwner) {\r\n            for (var i = 0, j = array.length; i \u003c j; i++)\r\n                if (predicate.call(predicateOwner, array[i], i))\r\n                    return array[i];\r\n            return null;\r\n        },\r\n\r\n        arrayRemoveItem: function (array, itemToRemove) {\r\n            var index = ko.utils.arrayIndexOf(array, itemToRemove);\r\n            if (index \u003e 0) {\r\n                array.splice(index, 1);\r\n            }\r\n            else if (index === 0) {\r\n                array.shift();\r\n            }\r\n        },\r\n\r\n        arrayGetDistinctValues: function (array) {\r\n            array = array || [];\r\n            var result = [];\r\n            for (var i = 0, j = array.length; i \u003c j; i++) {\r\n                if (ko.utils.arrayIndexOf(result, array[i]) \u003c 0)\r\n                    result.push(array[i]);\r\n            }\r\n            return result;\r\n        },\r\n\r\n        arrayMap: function (array, mapping) {\r\n            array = array || [];\r\n            var result = [];\r\n            for (var i = 0, j = array.length; i \u003c j; i++)\r\n                result.push(mapping(array[i], i));\r\n            return result;\r\n        },\r\n\r\n        arrayFilter: function (array, predicate) {\r\n            array = array || [];\r\n            var result = [];\r\n            for (var i = 0, j = array.length; i \u003c j; i++)\r\n                if (predicate(array[i], i))\r\n                    result.push(array[i]);\r\n            return result;\r\n        },\r\n\r\n        arrayPushAll: function (array, valuesToPush) {\r\n            if (valuesToPush instanceof Array)\r\n                array.push.apply(array, valuesToPush);\r\n            else\r\n                for (var i = 0, j = valuesToPush.length; i \u003c j; i++)\r\n                    array.push(valuesToPush[i]);\r\n            return array;\r\n        },\r\n\r\n        addOrRemoveItem: function(array, value, included) {\r\n            var existingEntryIndex = ko.utils.arrayIndexOf(ko.utils.peekObservable(array), value);\r\n            if (existingEntryIndex \u003c 0) {\r\n                if (included)\r\n                    array.push(value);\r\n            } else {\r\n                if (!included)\r\n                    array.splice(existingEntryIndex, 1);\r\n            }\r\n        },\r\n\r\n        canSetPrototype: canSetPrototype,\r\n\r\n        extend: extend,\r\n\r\n        setPrototypeOf: setPrototypeOf,\r\n\r\n        setPrototypeOfOrExtend: canSetPrototype ? setPrototypeOf : extend,\r\n\r\n        objectForEach: objectForEach,\r\n\r\n        objectMap: function(source, mapping) {\r\n            if (!source)\r\n                return source;\r\n            var target = {};\r\n            for (var prop in source) {\r\n                if (source.hasOwnProperty(prop)) {\r\n                    target[prop] = mapping(source[prop], prop, source);\r\n                }\r\n            }\r\n            return target;\r\n        },\r\n\r\n        emptyDomNode: function (domNode) {\r\n            while (domNode.firstChild) {\r\n                ko.removeNode(domNode.firstChild);\r\n            }\r\n        },\r\n\r\n        moveCleanedNodesToContainerElement: function(nodes) {\r\n            // Ensure it\u0027s a real array, as we\u0027re about to reparent the nodes and\r\n            // we don\u0027t want the underlying collection to change while we\u0027re doing that.\r\n            var nodesArray = ko.utils.makeArray(nodes);\r\n\r\n            var container = document.createElement(\u0027div\u0027);\r\n            for (var i = 0, j = nodesArray.length; i \u003c j; i++) {\r\n                container.appendChild(ko.cleanNode(nodesArray[i]));\r\n            }\r\n            return container;\r\n        },\r\n\r\n        cloneNodes: function (nodesArray, shouldCleanNodes) {\r\n            for (var i = 0, j = nodesArray.length, newNodesArray = []; i \u003c j; i++) {\r\n                var clonedNode = nodesArray[i].cloneNode(true);\r\n                newNodesArray.push(shouldCleanNodes ? ko.cleanNode(clonedNode) : clonedNode);\r\n            }\r\n            return newNodesArray;\r\n        },\r\n\r\n        setDomNodeChildren: function (domNode, childNodes) {\r\n            ko.utils.emptyDomNode(domNode);\r\n            if (childNodes) {\r\n                for (var i = 0, j = childNodes.length; i \u003c j; i++)\r\n                    domNode.appendChild(childNodes[i]);\r\n            }\r\n        },\r\n\r\n        replaceDomNodes: function (nodeToReplaceOrNodeArray, newNodesArray) {\r\n            var nodesToReplaceArray = nodeToReplaceOrNodeArray.nodeType ? [nodeToReplaceOrNodeArray] : nodeToReplaceOrNodeArray;\r\n            if (nodesToReplaceArray.length \u003e 0) {\r\n                var insertionPoint = nodesToReplaceArray[0];\r\n                var parent = insertionPoint.parentNode;\r\n                for (var i = 0, j = newNodesArray.length; i \u003c j; i++)\r\n                    parent.insertBefore(newNodesArray[i], insertionPoint);\r\n                for (var i = 0, j = nodesToReplaceArray.length; i \u003c j; i++) {\r\n                    ko.removeNode(nodesToReplaceArray[i]);\r\n                }\r\n            }\r\n        },\r\n\r\n        fixUpContinuousNodeArray: function(continuousNodeArray, parentNode) {\r\n            // Before acting on a set of nodes that were previously outputted by a template function, we have to reconcile\r\n            // them against what is in the DOM right now. It may be that some of the nodes have already been removed, or that\r\n            // new nodes might have been inserted in the middle, for example by a binding. Also, there may previously have been\r\n            // leading comment nodes (created by rewritten string-based templates) that have since been removed during binding.\r\n            // So, this function translates the old \"map\" output array into its best guess of the set of current DOM nodes.\r\n            //\r\n            // Rules:\r\n            //   [A] Any leading nodes that have been removed should be ignored\r\n            //       These most likely correspond to memoization nodes that were already removed during binding\r\n            //       See https://github.com/SteveSanderson/knockout/pull/440\r\n            //   [B] We want to output a continuous series of nodes. So, ignore any nodes that have already been removed,\r\n            //       and include any nodes that have been inserted among the previous collection\r\n\r\n            if (continuousNodeArray.length) {\r\n                // The parent node can be a virtual element; so get the real parent node\r\n                parentNode = (parentNode.nodeType === 8 \u0026\u0026 parentNode.parentNode) || parentNode;\r\n\r\n                // Rule [A]\r\n                while (continuousNodeArray.length \u0026\u0026 continuousNodeArray[0].parentNode !== parentNode)\r\n                    continuousNodeArray.shift();\r\n\r\n                // Rule [B]\r\n                if (continuousNodeArray.length \u003e 1) {\r\n                    var current = continuousNodeArray[0], last = continuousNodeArray[continuousNodeArray.length - 1];\r\n                    // Replace with the actual new continuous node set\r\n                    continuousNodeArray.length = 0;\r\n                    while (current !== last) {\r\n                        continuousNodeArray.push(current);\r\n                        current = current.nextSibling;\r\n                        if (!current) // Won\u0027t happen, except if the developer has manually removed some DOM elements (then we\u0027re in an undefined scenario)\r\n                            return;\r\n                    }\r\n                    continuousNodeArray.push(last);\r\n                }\r\n            }\r\n            return continuousNodeArray;\r\n        },\r\n\r\n        setOptionNodeSelectionState: function (optionNode, isSelected) {\r\n            // IE6 sometimes throws \"unknown error\" if you try to write to .selected directly, whereas Firefox struggles with setAttribute. Pick one based on browser.\r\n            if (ieVersion \u003c 7)\r\n                optionNode.setAttribute(\"selected\", isSelected);\r\n            else\r\n                optionNode.selected = isSelected;\r\n        },\r\n\r\n        stringTrim: function (string) {\r\n            return string === null || string === undefined ? \u0027\u0027 :\r\n                string.trim ?\r\n                    string.trim() :\r\n                    string.toString().replace(/^[\\s\\xa0]+|[\\s\\xa0]+$/g, \u0027\u0027);\r\n        },\r\n\r\n        stringStartsWith: function (string, startsWith) {\r\n            string = string || \"\";\r\n            if (startsWith.length \u003e string.length)\r\n                return false;\r\n            return string.substring(0, startsWith.length) === startsWith;\r\n        },\r\n\r\n        domNodeIsContainedBy: function (node, containedByNode) {\r\n            if (node === containedByNode)\r\n                return true;\r\n            if (node.nodeType === 11)\r\n                return false; // Fixes issue #1162 - can\u0027t use node.contains for document fragments on IE8\r\n            if (containedByNode.contains)\r\n                return containedByNode.contains(node.nodeType === 3 ? node.parentNode : node);\r\n            if (containedByNode.compareDocumentPosition)\r\n                return (containedByNode.compareDocumentPosition(node) \u0026 16) == 16;\r\n            while (node \u0026\u0026 node != containedByNode) {\r\n                node = node.parentNode;\r\n            }\r\n            return !!node;\r\n        },\r\n\r\n        domNodeIsAttachedToDocument: function (node) {\r\n            return ko.utils.domNodeIsContainedBy(node, node.ownerDocument.documentElement);\r\n        },\r\n\r\n        anyDomNodeIsAttachedToDocument: function(nodes) {\r\n            return !!ko.utils.arrayFirst(nodes, ko.utils.domNodeIsAttachedToDocument);\r\n        },\r\n\r\n        tagNameLower: function(element) {\r\n            // For HTML elements, tagName will always be upper case; for XHTML elements, it\u0027ll be lower case.\r\n            // Possible future optimization: If we know it\u0027s an element from an XHTML document (not HTML),\r\n            // we don\u0027t need to do the .toLowerCase() as it will always be lower case anyway.\r\n            return element \u0026\u0026 element.tagName \u0026\u0026 element.tagName.toLowerCase();\r\n        },\r\n\r\n        registerEventHandler: function (element, eventType, handler) {\r\n            var mustUseAttachEvent = ieVersion \u0026\u0026 eventsThatMustBeRegisteredUsingAttachEvent[eventType];\r\n            if (!mustUseAttachEvent \u0026\u0026 jQueryInstance) {\r\n                jQueryInstance(element)[\u0027bind\u0027](eventType, handler);\r\n            } else if (!mustUseAttachEvent \u0026\u0026 typeof element.addEventListener == \"function\")\r\n                element.addEventListener(eventType, handler, false);\r\n            else if (typeof element.attachEvent != \"undefined\") {\r\n                var attachEventHandler = function (event) { handler.call(element, event); },\r\n                    attachEventName = \"on\" + eventType;\r\n                element.attachEvent(attachEventName, attachEventHandler);\r\n\r\n                // IE does not dispose attachEvent handlers automatically (unlike with addEventListener)\r\n                // so to avoid leaks, we have to remove them manually. See bug #856\r\n                ko.utils.domNodeDisposal.addDisposeCallback(element, function() {\r\n                    element.detachEvent(attachEventName, attachEventHandler);\r\n                });\r\n            } else\r\n                throw new Error(\"Browser doesn\u0027t support addEventListener or attachEvent\");\r\n        },\r\n\r\n        triggerEvent: function (element, eventType) {\r\n            if (!(element \u0026\u0026 element.nodeType))\r\n                throw new Error(\"element must be a DOM node when calling triggerEvent\");\r\n\r\n            // For click events on checkboxes and radio buttons, jQuery toggles the element checked state *after* the\r\n            // event handler runs instead of *before*. (This was fixed in 1.9 for checkboxes but not for radio buttons.)\r\n            // IE doesn\u0027t change the checked state when you trigger the click event using \"fireEvent\".\r\n            // In both cases, we\u0027ll use the click method instead.\r\n            var useClickWorkaround = isClickOnCheckableElement(element, eventType);\r\n\r\n            if (jQueryInstance \u0026\u0026 !useClickWorkaround) {\r\n                jQueryInstance(element)[\u0027trigger\u0027](eventType);\r\n            } else if (typeof document.createEvent == \"function\") {\r\n                if (typeof element.dispatchEvent == \"function\") {\r\n                    var eventCategory = knownEventTypesByEventName[eventType] || \"HTMLEvents\";\r\n                    var event = document.createEvent(eventCategory);\r\n                    event.initEvent(eventType, true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, element);\r\n                    element.dispatchEvent(event);\r\n                }\r\n                else\r\n                    throw new Error(\"The supplied element doesn\u0027t support dispatchEvent\");\r\n            } else if (useClickWorkaround \u0026\u0026 element.click) {\r\n                element.click();\r\n            } else if (typeof element.fireEvent != \"undefined\") {\r\n                element.fireEvent(\"on\" + eventType);\r\n            } else {\r\n                throw new Error(\"Browser doesn\u0027t support triggering events\");\r\n            }\r\n        },\r\n\r\n        unwrapObservable: function (value) {\r\n            return ko.isObservable(value) ? value() : value;\r\n        },\r\n\r\n        peekObservable: function (value) {\r\n            return ko.isObservable(value) ? value.peek() : value;\r\n        },\r\n\r\n        toggleDomNodeCssClass: function (node, classNames, shouldHaveClass) {\r\n            if (classNames) {\r\n                var cssClassNameRegex = /\\S+/g,\r\n                    currentClassNames = node.className.match(cssClassNameRegex) || [];\r\n                ko.utils.arrayForEach(classNames.match(cssClassNameRegex), function(className) {\r\n                    ko.utils.addOrRemoveItem(currentClassNames, className, shouldHaveClass);\r\n                });\r\n                node.className = currentClassNames.join(\" \");\r\n            }\r\n        },\r\n\r\n        setTextContent: function(element, textContent) {\r\n            var value = ko.utils.unwrapObservable(textContent);\r\n            if ((value === null) || (value === undefined))\r\n                value = \"\";\r\n\r\n            // We need there to be exactly one child: a text node.\r\n            // If there are no children, more than one, or if it\u0027s not a text node,\r\n            // we\u0027ll clear everything and create a single text node.\r\n            var innerTextNode = ko.virtualElements.firstChild(element);\r\n            if (!innerTextNode || innerTextNode.nodeType != 3 || ko.virtualElements.nextSibling(innerTextNode)) {\r\n                ko.virtualElements.setDomNodeChildren(element, [element.ownerDocument.createTextNode(value)]);\r\n            } else {\r\n                innerTextNode.data = value;\r\n            }\r\n\r\n            ko.utils.forceRefresh(element);\r\n        },\r\n\r\n        setElementName: function(element, name) {\r\n            element.name = name;\r\n\r\n            // Workaround IE 6/7 issue\r\n            // - https://github.com/SteveSanderson/knockout/issues/197\r\n            // - http://www.matts411.com/post/setting_the_name_attribute_in_ie_dom/\r\n            if (ieVersion \u003c= 7) {\r\n                try {\r\n                    element.mergeAttributes(document.createElement(\"\u003cinput name=\u0027\" + element.name + \"\u0027/\u003e\"), false);\r\n                }\r\n                catch(e) {} // For IE9 with doc mode \"IE9 Standards\" and browser mode \"IE9 Compatibility View\"\r\n            }\r\n        },\r\n\r\n        forceRefresh: function(node) {\r\n            // Workaround for an IE9 rendering bug - https://github.com/SteveSanderson/knockout/issues/209\r\n            if (ieVersion \u003e= 9) {\r\n                // For text nodes and comment nodes (most likely virtual elements), we will have to refresh the container\r\n                var elem = node.nodeType == 1 ? node : node.parentNode;\r\n                if (elem.style)\r\n                    elem.style.zoom = elem.style.zoom;\r\n            }\r\n        },\r\n\r\n        ensureSelectElementIsRenderedCorrectly: function(selectElement) {\r\n            // Workaround for IE9 rendering bug - it doesn\u0027t reliably display all the text in dynamically-added select boxes unless you force it to re-render by updating the width.\r\n            // (See https://github.com/SteveSanderson/knockout/issues/312, http://stackoverflow.com/questions/5908494/select-only-shows-first-char-of-selected-option)\r\n            // Also fixes IE7 and IE8 bug that causes selects to be zero width if enclosed by \u0027if\u0027 or \u0027with\u0027. (See issue #839)\r\n            if (ieVersion) {\r\n                var originalWidth = selectElement.style.width;\r\n                selectElement.style.width = 0;\r\n                selectElement.style.width = originalWidth;\r\n            }\r\n        },\r\n\r\n        range: function (min, max) {\r\n            min = ko.utils.unwrapObservable(min);\r\n            max = ko.utils.unwrapObservable(max);\r\n            var result = [];\r\n            for (var i = min; i \u003c= max; i++)\r\n                result.push(i);\r\n            return result;\r\n        },\r\n\r\n        makeArray: function(arrayLikeObject) {\r\n            var result = [];\r\n            for (var i = 0, j = arrayLikeObject.length; i \u003c j; i++) {\r\n                result.push(arrayLikeObject[i]);\r\n            };\r\n            return result;\r\n        },\r\n\r\n        isIe6 : isIe6,\r\n        isIe7 : isIe7,\r\n        ieVersion : ieVersion,\r\n\r\n        getFormFields: function(form, fieldName) {\r\n            var fields = ko.utils.makeArray(form.getElementsByTagName(\"input\")).concat(ko.utils.makeArray(form.getElementsByTagName(\"textarea\")));\r\n            var isMatchingField = (typeof fieldName == \u0027string\u0027)\r\n                ? function(field) { return field.name === fieldName }\r\n                : function(field) { return fieldName.test(field.name) }; // Treat fieldName as regex or object containing predicate\r\n            var matches = [];\r\n            for (var i = fields.length - 1; i \u003e= 0; i--) {\r\n                if (isMatchingField(fields[i]))\r\n                    matches.push(fields[i]);\r\n            };\r\n            return matches;\r\n        },\r\n\r\n        parseJson: function (jsonString) {\r\n            if (typeof jsonString == \"string\") {\r\n                jsonString = ko.utils.stringTrim(jsonString);\r\n                if (jsonString) {\r\n                    if (JSON \u0026\u0026 JSON.parse) // Use native parsing where available\r\n                        return JSON.parse(jsonString);\r\n                    return (new Function(\"return \" + jsonString))(); // Fallback on less safe parsing for older browsers\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n\r\n        stringifyJson: function (data, replacer, space) {   // replacer and space are optional\r\n            if (!JSON || !JSON.stringify)\r\n                throw new Error(\"Cannot find JSON.stringify(). Some browsers (e.g., IE \u003c 8) don\u0027t support it natively, but you can overcome this by adding a script reference to json2.js, downloadable from http://www.json.org/json2.js\");\r\n            return JSON.stringify(ko.utils.unwrapObservable(data), replacer, space);\r\n        },\r\n\r\n        postJson: function (urlOrForm, data, options) {\r\n            options = options || {};\r\n            var params = options[\u0027params\u0027] || {};\r\n            var includeFields = options[\u0027includeFields\u0027] || this.fieldsIncludedWithJsonPost;\r\n            var url = urlOrForm;\r\n\r\n            // If we were given a form, use its \u0027action\u0027 URL and pick out any requested field values\r\n            if((typeof urlOrForm == \u0027object\u0027) \u0026\u0026 (ko.utils.tagNameLower(urlOrForm) === \"form\")) {\r\n                var originalForm = urlOrForm;\r\n                url = originalForm.action;\r\n                for (var i = includeFields.length - 1; i \u003e= 0; i--) {\r\n                    var fields = ko.utils.getFormFields(originalForm, includeFields[i]);\r\n                    for (var j = fields.length - 1; j \u003e= 0; j--)\r\n                        params[fields[j].name] = fields[j].value;\r\n                }\r\n            }\r\n\r\n            data = ko.utils.unwrapObservable(data);\r\n            var form = document.createElement(\"form\");\r\n            form.style.display = \"none\";\r\n            form.action = url;\r\n            form.method = \"post\";\r\n            for (var key in data) {\r\n                // Since \u0027data\u0027 this is a model object, we include all properties including those inherited from its prototype\r\n                var input = document.createElement(\"input\");\r\n                input.type = \"hidden\";\r\n                input.name = key;\r\n                input.value = ko.utils.stringifyJson(ko.utils.unwrapObservable(data[key]));\r\n                form.appendChild(input);\r\n            }\r\n            objectForEach(params, function(key, value) {\r\n                var input = document.createElement(\"input\");\r\n                input.type = \"hidden\";\r\n                input.name = key;\r\n                input.value = value;\r\n                form.appendChild(input);\r\n            });\r\n            document.body.appendChild(form);\r\n            options[\u0027submitter\u0027] ? options[\u0027submitter\u0027](form) : form.submit();\r\n            setTimeout(function () { form.parentNode.removeChild(form); }, 0);\r\n        }\r\n    }\r\n}());\r\n\r\nko.exportSymbol(\u0027utils\u0027, ko.utils);\r\nko.exportSymbol(\u0027utils.arrayForEach\u0027, ko.utils.arrayForEach);\r\nko.exportSymbol(\u0027utils.arrayFirst\u0027, ko.utils.arrayFirst);\r\nko.exportSymbol(\u0027utils.arrayFilter\u0027, ko.utils.arrayFilter);\r\nko.exportSymbol(\u0027utils.arrayGetDistinctValues\u0027, ko.utils.arrayGetDistinctValues);\r\nko.exportSymbol(\u0027utils.arrayIndexOf\u0027, ko.utils.arrayIndexOf);\r\nko.exportSymbol(\u0027utils.arrayMap\u0027, ko.utils.arrayMap);\r\nko.exportSymbol(\u0027utils.arrayPushAll\u0027, ko.utils.arrayPushAll);\r\nko.exportSymbol(\u0027utils.arrayRemoveItem\u0027, ko.utils.arrayRemoveItem);\r\nko.exportSymbol(\u0027utils.extend\u0027, ko.utils.extend);\r\nko.exportSymbol(\u0027utils.fieldsIncludedWithJsonPost\u0027, ko.utils.fieldsIncludedWithJsonPost);\r\nko.exportSymbol(\u0027utils.getFormFields\u0027, ko.utils.getFormFields);\r\nko.exportSymbol(\u0027utils.peekObservable\u0027, ko.utils.peekObservable);\r\nko.exportSymbol(\u0027utils.postJson\u0027, ko.utils.postJson);\r\nko.exportSymbol(\u0027utils.parseJson\u0027, ko.utils.parseJson);\r\nko.exportSymbol(\u0027utils.registerEventHandler\u0027, ko.utils.registerEventHandler);\r\nko.exportSymbol(\u0027utils.stringifyJson\u0027, ko.utils.stringifyJson);\r\nko.exportSymbol(\u0027utils.range\u0027, ko.utils.range);\r\nko.exportSymbol(\u0027utils.toggleDomNodeCssClass\u0027, ko.utils.toggleDomNodeCssClass);\r\nko.exportSymbol(\u0027utils.triggerEvent\u0027, ko.utils.triggerEvent);\r\nko.exportSymbol(\u0027utils.unwrapObservable\u0027, ko.utils.unwrapObservable);\r\nko.exportSymbol(\u0027utils.objectForEach\u0027, ko.utils.objectForEach);\r\nko.exportSymbol(\u0027utils.addOrRemoveItem\u0027, ko.utils.addOrRemoveItem);\r\nko.exportSymbol(\u0027unwrap\u0027, ko.utils.unwrapObservable); // Convenient shorthand, because this is used so commonly\r\n\r\nif (!Function.prototype[\u0027bind\u0027]) {\r\n    // Function.prototype.bind is a standard part of ECMAScript 5th Edition (December 2009, http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf)\r\n    // In case the browser doesn\u0027t implement it natively, provide a JavaScript implementation. This implementation is based on the one in prototype.js\r\n    Function.prototype[\u0027bind\u0027] = function (object) {\r\n        var originalFunction = this, args = Array.prototype.slice.call(arguments), object = args.shift();\r\n        return function () {\r\n            return originalFunction.apply(object, args.concat(Array.prototype.slice.call(arguments)));\r\n        };\r\n    };\r\n}\r\n\r\nko.utils.domData = new (function () {\r\n    var uniqueId = 0;\r\n    var dataStoreKeyExpandoPropertyName = \"__ko__\" + (new Date).getTime();\r\n    var dataStore = {};\r\n\r\n    function getAll(node, createIfNotFound) {\r\n        var dataStoreKey = node[dataStoreKeyExpandoPropertyName];\r\n        var hasExistingDataStore = dataStoreKey \u0026\u0026 (dataStoreKey !== \"null\") \u0026\u0026 dataStore[dataStoreKey];\r\n        if (!hasExistingDataStore) {\r\n            if (!createIfNotFound)\r\n                return undefined;\r\n            dataStoreKey = node[dataStoreKeyExpandoPropertyName] = \"ko\" + uniqueId++;\r\n            dataStore[dataStoreKey] = {};\r\n        }\r\n        return dataStore[dataStoreKey];\r\n    }\r\n\r\n    return {\r\n        get: function (node, key) {\r\n            var allDataForNode = getAll(node, false);\r\n            return allDataForNode === undefined ? undefined : allDataForNode[key];\r\n        },\r\n        set: function (node, key, value) {\r\n            if (value === undefined) {\r\n                // Make sure we don\u0027t actually create a new domData key if we are actually deleting a value\r\n                if (getAll(node, false) === undefined)\r\n                    return;\r\n            }\r\n            var allDataForNode = getAll(node, true);\r\n            allDataForNode[key] = value;\r\n        },\r\n        clear: function (node) {\r\n            var dataStoreKey = node[dataStoreKeyExpandoPropertyName];\r\n            if (dataStoreKey) {\r\n                delete dataStore[dataStoreKey];\r\n                node[dataStoreKeyExpandoPropertyName] = null;\r\n                return true; // Exposing \"did clean\" flag purely so specs can infer whether things have been cleaned up as intended\r\n            }\r\n            return false;\r\n        },\r\n\r\n        nextKey: function () {\r\n            return (uniqueId++) + dataStoreKeyExpandoPropertyName;\r\n        }\r\n    };\r\n})();\r\n\r\nko.exportSymbol(\u0027utils.domData\u0027, ko.utils.domData);\r\nko.exportSymbol(\u0027utils.domData.clear\u0027, ko.utils.domData.clear); // Exporting only so specs can clear up after themselves fully\r\n\r\nko.utils.domNodeDisposal = new (function () {\r\n    var domDataKey = ko.utils.domData.nextKey();\r\n    var cleanableNodeTypes = { 1: true, 8: true, 9: true };       // Element, Comment, Document\r\n    var cleanableNodeTypesWithDescendants = { 1: true, 9: true }; // Element, Document\r\n\r\n    function getDisposeCallbacksCollection(node, createIfNotFound) {\r\n        var allDisposeCallbacks = ko.utils.domData.get(node, domDataKey);\r\n        if ((allDisposeCallbacks === undefined) \u0026\u0026 createIfNotFound) {\r\n            allDisposeCallbacks = [];\r\n            ko.utils.domData.set(node, domDataKey, allDisposeCallbacks);\r\n        }\r\n        return allDisposeCallbacks;\r\n    }\r\n    function destroyCallbacksCollection(node) {\r\n        ko.utils.domData.set(node, domDataKey, undefined);\r\n    }\r\n\r\n    function cleanSingleNode(node) {\r\n        // Run all the dispose callbacks\r\n        var callbacks = getDisposeCallbacksCollection(node, false);\r\n        if (callbacks) {\r\n            callbacks = callbacks.slice(0); // Clone, as the array may be modified during iteration (typically, callbacks will remove themselves)\r\n            for (var i = 0; i \u003c callbacks.length; i++)\r\n                callbacks[i](node);\r\n        }\r\n\r\n        // Erase the DOM data\r\n        ko.utils.domData.clear(node);\r\n\r\n        // Perform cleanup needed by external libraries (currently only jQuery, but can be extended)\r\n        ko.utils.domNodeDisposal[\"cleanExternalData\"](node);\r\n\r\n        // Clear any immediate-child comment nodes, as these wouldn\u0027t have been found by\r\n        // node.getElementsByTagName(\"*\") in cleanNode() (comment nodes aren\u0027t elements)\r\n        if (cleanableNodeTypesWithDescendants[node.nodeType])\r\n            cleanImmediateCommentTypeChildren(node);\r\n    }\r\n\r\n    function cleanImmediateCommentTypeChildren(nodeWithChildren) {\r\n        var child, nextChild = nodeWithChildren.firstChild;\r\n        while (child = nextChild) {\r\n            nextChild = child.nextSibling;\r\n            if (child.nodeType === 8)\r\n                cleanSingleNode(child);\r\n        }\r\n    }\r\n\r\n    return {\r\n        addDisposeCallback : function(node, callback) {\r\n            if (typeof callback != \"function\")\r\n                throw new Error(\"Callback must be a function\");\r\n            getDisposeCallbacksCollection(node, true).push(callback);\r\n        },\r\n\r\n        removeDisposeCallback : function(node, callback) {\r\n            var callbacksCollection = getDisposeCallbacksCollection(node, false);\r\n            if (callbacksCollection) {\r\n                ko.utils.arrayRemoveItem(callbacksCollection, callback);\r\n                if (callbacksCollection.length == 0)\r\n                    destroyCallbacksCollection(node);\r\n            }\r\n        },\r\n\r\n        cleanNode : function(node) {\r\n            // First clean this node, where applicable\r\n            if (cleanableNodeTypes[node.nodeType]) {\r\n                cleanSingleNode(node);\r\n\r\n                // ... then its descendants, where applicable\r\n                if (cleanableNodeTypesWithDescendants[node.nodeType]) {\r\n                    // Clone the descendants list in case it changes during iteration\r\n                    var descendants = [];\r\n                    ko.utils.arrayPushAll(descendants, node.getElementsByTagName(\"*\"));\r\n                    for (var i = 0, j = descendants.length; i \u003c j; i++)\r\n                        cleanSingleNode(descendants[i]);\r\n                }\r\n            }\r\n            return node;\r\n        },\r\n\r\n        removeNode : function(node) {\r\n            ko.cleanNode(node);\r\n            if (node.parentNode)\r\n                node.parentNode.removeChild(node);\r\n        },\r\n\r\n        \"cleanExternalData\" : function (node) {\r\n            // Special support for jQuery here because it\u0027s so commonly used.\r\n            // Many jQuery plugins (including jquery.tmpl) store data using jQuery\u0027s equivalent of domData\r\n            // so notify it to tear down any resources associated with the node \u0026 descendants here.\r\n            if (jQueryInstance \u0026\u0026 (typeof jQueryInstance[\u0027cleanData\u0027] == \"function\"))\r\n                jQueryInstance[\u0027cleanData\u0027]([node]);\r\n        }\r\n    }\r\n})();\r\nko.cleanNode = ko.utils.domNodeDisposal.cleanNode; // Shorthand name for convenience\r\nko.removeNode = ko.utils.domNodeDisposal.removeNode; // Shorthand name for convenience\r\nko.exportSymbol(\u0027cleanNode\u0027, ko.cleanNode);\r\nko.exportSymbol(\u0027removeNode\u0027, ko.removeNode);\r\nko.exportSymbol(\u0027utils.domNodeDisposal\u0027, ko.utils.domNodeDisposal);\r\nko.exportSymbol(\u0027utils.domNodeDisposal.addDisposeCallback\u0027, ko.utils.domNodeDisposal.addDisposeCallback);\r\nko.exportSymbol(\u0027utils.domNodeDisposal.removeDisposeCallback\u0027, ko.utils.domNodeDisposal.removeDisposeCallback);\r\n(function () {\r\n    var leadingCommentRegex = /^(\\s*)\u003c!--(.*?)--\u003e/;\r\n\r\n    function simpleHtmlParse(html) {\r\n        // Based on jQuery\u0027s \"clean\" function, but only accounting for table-related elements.\r\n        // If you have referenced jQuery, this won\u0027t be used anyway - KO will use jQuery\u0027s \"clean\" function directly\r\n\r\n        // Note that there\u0027s still an issue in IE \u003c 9 whereby it will discard comment nodes that are the first child of\r\n        // a descendant node. For example: \"\u003cdiv\u003e\u003c!-- mycomment --\u003eabc\u003c/div\u003e\" will get parsed as \"\u003cdiv\u003eabc\u003c/div\u003e\"\r\n        // This won\u0027t affect anyone who has referenced jQuery, and there\u0027s always the workaround of inserting a dummy node\r\n        // (possibly a text node) in front of the comment. So, KO does not attempt to workaround this IE issue automatically at present.\r\n\r\n        // Trim whitespace, otherwise indexOf won\u0027t work as expected\r\n        var tags = ko.utils.stringTrim(html).toLowerCase(), div = document.createElement(\"div\");\r\n\r\n        // Finds the first match from the left column, and returns the corresponding \"wrap\" data from the right column\r\n        var wrap = tags.match(/^\u003c(thead|tbody|tfoot)/)              \u0026\u0026 [1, \"\u003ctable\u003e\", \"\u003c/table\u003e\"] ||\r\n                   !tags.indexOf(\"\u003ctr\")                             \u0026\u0026 [2, \"\u003ctable\u003e\u003ctbody\u003e\", \"\u003c/tbody\u003e\u003c/table\u003e\"] ||\r\n                   (!tags.indexOf(\"\u003ctd\") || !tags.indexOf(\"\u003cth\"))   \u0026\u0026 [3, \"\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\", \"\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\"] ||\r\n                   /* anything else */                                 [0, \"\", \"\"];\r\n\r\n        // Go to html and back, then peel off extra wrappers\r\n        // Note that we always prefix with some dummy text, because otherwise, IE\u003c9 will strip out leading comment nodes in descendants. Total madness.\r\n        var markup = \"ignored\u003cdiv\u003e\" + wrap[1] + html + wrap[2] + \"\u003c/div\u003e\";\r\n        if (typeof window[\u0027innerShiv\u0027] == \"function\") {\r\n            div.appendChild(window[\u0027innerShiv\u0027](markup));\r\n        } else {\r\n            div.innerHTML = markup;\r\n        }\r\n\r\n        // Move to the right depth\r\n        while (wrap[0]--)\r\n            div = div.lastChild;\r\n\r\n        return ko.utils.makeArray(div.lastChild.childNodes);\r\n    }\r\n\r\n    function jQueryHtmlParse(html) {\r\n        // jQuery\u0027s \"parseHTML\" function was introduced in jQuery 1.8.0 and is a documented public API.\r\n        if (jQueryInstance[\u0027parseHTML\u0027]) {\r\n            return jQueryInstance[\u0027parseHTML\u0027](html) || []; // Ensure we always return an array and never null\r\n        } else {\r\n            // For jQuery \u003c 1.8.0, we fall back on the undocumented internal \"clean\" function.\r\n            var elems = jQueryInstance[\u0027clean\u0027]([html]);\r\n\r\n            // As of jQuery 1.7.1, jQuery parses the HTML by appending it to some dummy parent nodes held in an in-memory document fragment.\r\n            // Unfortunately, it never clears the dummy parent nodes from the document fragment, so it leaks memory over time.\r\n            // Fix this by finding the top-most dummy parent element, and detaching it from its owner fragment.\r\n            if (elems \u0026\u0026 elems[0]) {\r\n                // Find the top-most parent element that\u0027s a direct child of a document fragment\r\n                var elem = elems[0];\r\n                while (elem.parentNode \u0026\u0026 elem.parentNode.nodeType !== 11 /* i.e., DocumentFragment */)\r\n                    elem = elem.parentNode;\r\n                // ... then detach it\r\n                if (elem.parentNode)\r\n                    elem.parentNode.removeChild(elem);\r\n            }\r\n\r\n            return elems;\r\n        }\r\n    }\r\n\r\n    ko.utils.parseHtmlFragment = function(html) {\r\n        return jQueryInstance ? jQueryHtmlParse(html)   // As below, benefit from jQuery\u0027s optimisations where possible\r\n                              : simpleHtmlParse(html);  // ... otherwise, this simple logic will do in most common cases.\r\n    };\r\n\r\n    ko.utils.setHtml = function(node, html) {\r\n        ko.utils.emptyDomNode(node);\r\n\r\n        // There\u0027s no legitimate reason to display a stringified observable without unwrapping it, so we\u0027ll unwrap it\r\n        html = ko.utils.unwrapObservable(html);\r\n\r\n        if ((html !== null) \u0026\u0026 (html !== undefined)) {\r\n            if (typeof html != \u0027string\u0027)\r\n                html = html.toString();\r\n\r\n            // jQuery contains a lot of sophisticated code to parse arbitrary HTML fragments,\r\n            // for example \u003ctr\u003e elements which are not normally allowed to exist on their own.\r\n            // If you\u0027ve referenced jQuery we\u0027ll use that rather than duplicating its code.\r\n            if (jQueryInstance) {\r\n                jQueryInstance(node)[\u0027html\u0027](html);\r\n            } else {\r\n                // ... otherwise, use KO\u0027s own parsing logic.\r\n                var parsedNodes = ko.utils.parseHtmlFragment(html);\r\n                for (var i = 0; i \u003c parsedNodes.length; i++)\r\n                    node.appendChild(parsedNodes[i]);\r\n            }\r\n        }\r\n    };\r\n})();\r\n\r\nko.exportSymbol(\u0027utils.parseHtmlFragment\u0027, ko.utils.parseHtmlFragment);\r\nko.exportSymbol(\u0027utils.setHtml\u0027, ko.utils.setHtml);\r\n\r\nko.memoization = (function () {\r\n    var memos = {};\r\n\r\n    function randomMax8HexChars() {\r\n        return (((1 + Math.random()) * 0x100000000) | 0).toString(16).substring(1);\r\n    }\r\n    function generateRandomId() {\r\n        return randomMax8HexChars() + randomMax8HexChars();\r\n    }\r\n    function findMemoNodes(rootNode, appendToArray) {\r\n        if (!rootNode)\r\n            return;\r\n        if (rootNode.nodeType == 8) {\r\n            var memoId = ko.memoization.parseMemoText(rootNode.nodeValue);\r\n            if (memoId != null)\r\n                appendToArray.push({ domNode: rootNode, memoId: memoId });\r\n        } else if (rootNode.nodeType == 1) {\r\n            for (var i = 0, childNodes = rootNode.childNodes, j = childNodes.length; i \u003c j; i++)\r\n                findMemoNodes(childNodes[i], appendToArray);\r\n        }\r\n    }\r\n\r\n    return {\r\n        memoize: function (callback) {\r\n            if (typeof callback != \"function\")\r\n                throw new Error(\"You can only pass a function to ko.memoization.memoize()\");\r\n            var memoId = generateRandomId();\r\n            memos[memoId] = callback;\r\n            return \"\u003c!--[ko_memo:\" + memoId + \"]--\u003e\";\r\n        },\r\n\r\n        unmemoize: function (memoId, callbackParams) {\r\n            var callback = memos[memoId];\r\n            if (callback === undefined)\r\n                throw new Error(\"Couldn\u0027t find any memo with ID \" + memoId + \". Perhaps it\u0027s already been unmemoized.\");\r\n            try {\r\n                callback.apply(null, callbackParams || []);\r\n                return true;\r\n            }\r\n            finally { delete memos[memoId]; }\r\n        },\r\n\r\n        unmemoizeDomNodeAndDescendants: function (domNode, extraCallbackParamsArray) {\r\n            var memos = [];\r\n            findMemoNodes(domNode, memos);\r\n            for (var i = 0, j = memos.length; i \u003c j; i++) {\r\n                var node = memos[i].domNode;\r\n                var combinedParams = [node];\r\n                if (extraCallbackParamsArray)\r\n                    ko.utils.arrayPushAll(combinedParams, extraCallbackParamsArray);\r\n                ko.memoization.unmemoize(memos[i].memoId, combinedParams);\r\n                node.nodeValue = \"\"; // Neuter this node so we don\u0027t try to unmemoize it again\r\n                if (node.parentNode)\r\n                    node.parentNode.removeChild(node); // If possible, erase it totally (not always possible - someone else might just hold a reference to it then call unmemoizeDomNodeAndDescendants again)\r\n            }\r\n        },\r\n\r\n        parseMemoText: function (memoText) {\r\n            var match = memoText.match(/^\\[ko_memo\\:(.*?)\\]$/);\r\n            return match ? match[1] : null;\r\n        }\r\n    };\r\n})();\r\n\r\nko.exportSymbol(\u0027memoization\u0027, ko.memoization);\r\nko.exportSymbol(\u0027memoization.memoize\u0027, ko.memoization.memoize);\r\nko.exportSymbol(\u0027memoization.unmemoize\u0027, ko.memoization.unmemoize);\r\nko.exportSymbol(\u0027memoization.parseMemoText\u0027, ko.memoization.parseMemoText);\r\nko.exportSymbol(\u0027memoization.unmemoizeDomNodeAndDescendants\u0027, ko.memoization.unmemoizeDomNodeAndDescendants);\r\nko.extenders = {\r\n    \u0027throttle\u0027: function(target, timeout) {\r\n        // Throttling means two things:\r\n\r\n        // (1) For dependent observables, we throttle *evaluations* so that, no matter how fast its dependencies\r\n        //     notify updates, the target doesn\u0027t re-evaluate (and hence doesn\u0027t notify) faster than a certain rate\r\n        target[\u0027throttleEvaluation\u0027] = timeout;\r\n\r\n        // (2) For writable targets (observables, or writable dependent observables), we throttle *writes*\r\n        //     so the target cannot change value synchronously or faster than a certain rate\r\n        var writeTimeoutInstance = null;\r\n        return ko.dependentObservable({\r\n            \u0027read\u0027: target,\r\n            \u0027write\u0027: function(value) {\r\n                clearTimeout(writeTimeoutInstance);\r\n                writeTimeoutInstance = setTimeout(function() {\r\n                    target(value);\r\n                }, timeout);\r\n            }\r\n        });\r\n    },\r\n\r\n    \u0027rateLimit\u0027: function(target, options) {\r\n        var timeout, method, limitFunction;\r\n\r\n        if (typeof options == \u0027number\u0027) {\r\n            timeout = options;\r\n        } else {\r\n            timeout = options[\u0027timeout\u0027];\r\n            method = options[\u0027method\u0027];\r\n        }\r\n\r\n        limitFunction = method == \u0027notifyWhenChangesStop\u0027 ?  debounce : throttle;\r\n        target.limit(function(callback) {\r\n            return limitFunction(callback, timeout);\r\n        });\r\n    },\r\n\r\n    \u0027notify\u0027: function(target, notifyWhen) {\r\n        target[\"equalityComparer\"] = notifyWhen == \"always\" ?\r\n            null :  // null equalityComparer means to always notify\r\n            valuesArePrimitiveAndEqual;\r\n    }\r\n};\r\n\r\nvar primitiveTypes = { \u0027undefined\u0027:1, \u0027boolean\u0027:1, \u0027number\u0027:1, \u0027string\u0027:1 };\r\nfunction valuesArePrimitiveAndEqual(a, b) {\r\n    var oldValueIsPrimitive = (a === null) || (typeof(a) in primitiveTypes);\r\n    return oldValueIsPrimitive ? (a === b) : false;\r\n}\r\n\r\nfunction throttle(callback, timeout) {\r\n    var timeoutInstance;\r\n    return function () {\r\n        if (!timeoutInstance) {\r\n            timeoutInstance = setTimeout(function() {\r\n                timeoutInstance = undefined;\r\n                callback();\r\n            }, timeout);\r\n        }\r\n    };\r\n}\r\n\r\nfunction debounce(callback, timeout) {\r\n    var timeoutInstance;\r\n    return function () {\r\n        clearTimeout(timeoutInstance);\r\n        timeoutInstance = setTimeout(callback, timeout);\r\n    };\r\n}\r\n\r\nfunction applyExtenders(requestedExtenders) {\r\n    var target = this;\r\n    if (requestedExtenders) {\r\n        ko.utils.objectForEach(requestedExtenders, function(key, value) {\r\n            var extenderHandler = ko.extenders[key];\r\n            if (typeof extenderHandler == \u0027function\u0027) {\r\n                target = extenderHandler(target, value) || target;\r\n            }\r\n        });\r\n    }\r\n    return target;\r\n}\r\n\r\nko.exportSymbol(\u0027extenders\u0027, ko.extenders);\r\n\r\nko.subscription = function (target, callback, disposeCallback) {\r\n    this.target = target;\r\n    this.callback = callback;\r\n    this.disposeCallback = disposeCallback;\r\n    this.isDisposed = false;\r\n    ko.exportProperty(this, \u0027dispose\u0027, this.dispose);\r\n};\r\nko.subscription.prototype.dispose = function () {\r\n    this.isDisposed = true;\r\n    this.disposeCallback();\r\n};\r\n\r\nko.subscribable = function () {\r\n    ko.utils.setPrototypeOfOrExtend(this, ko.subscribable[\u0027fn\u0027]);\r\n    this._subscriptions = {};\r\n}\r\n\r\nvar defaultEvent = \"change\";\r\n\r\nvar ko_subscribable_fn = {\r\n    subscribe: function (callback, callbackTarget, event) {\r\n        var self = this;\r\n\r\n        event = event || defaultEvent;\r\n        var boundCallback = callbackTarget ? callback.bind(callbackTarget) : callback;\r\n\r\n        var subscription = new ko.subscription(self, boundCallback, function () {\r\n            ko.utils.arrayRemoveItem(self._subscriptions[event], subscription);\r\n            if (self.afterSubscriptionRemove)\r\n                self.afterSubscriptionRemove(event);\r\n        });\r\n\r\n        if (self.beforeSubscriptionAdd)\r\n            self.beforeSubscriptionAdd(event);\r\n\r\n        if (!self._subscriptions[event])\r\n            self._subscriptions[event] = [];\r\n        self._subscriptions[event].push(subscription);\r\n\r\n        return subscription;\r\n    },\r\n\r\n    \"notifySubscribers\": function (valueToNotify, event) {\r\n        event = event || defaultEvent;\r\n        if (this.hasSubscriptionsForEvent(event)) {\r\n            try {\r\n                ko.dependencyDetection.begin(); // Begin suppressing dependency detection (by setting the top frame to undefined)\r\n                for (var a = this._subscriptions[event].slice(0), i = 0, subscription; subscription = a[i]; ++i) {\r\n                    // In case a subscription was disposed during the arrayForEach cycle, check\r\n                    // for isDisposed on each subscription before invoking its callback\r\n                    if (!subscription.isDisposed)\r\n                        subscription.callback(valueToNotify);\r\n                }\r\n            } finally {\r\n                ko.dependencyDetection.end(); // End suppressing dependency detection\r\n            }\r\n        }\r\n    },\r\n\r\n    limit: function(limitFunction) {\r\n        var self = this, selfIsObservable = ko.isObservable(self),\r\n            isPending, previousValue, pendingValue, beforeChange = \u0027beforeChange\u0027;\r\n\r\n        if (!self._origNotifySubscribers) {\r\n            self._origNotifySubscribers = self[\"notifySubscribers\"];\r\n            self[\"notifySubscribers\"] = function(value, event) {\r\n                if (!event || event === defaultEvent) {\r\n                    self._rateLimitedChange(value);\r\n                } else if (event === beforeChange) {\r\n                    self._rateLimitedBeforeChange(value);\r\n                } else {\r\n                    self._origNotifySubscribers(value, event);\r\n                }\r\n            };\r\n        }\r\n\r\n        var finish = limitFunction(function() {\r\n            // If an observable provided a reference to itself, access it to get the latest value.\r\n            // This allows computed observables to delay calculating their value until needed.\r\n            if (selfIsObservable \u0026\u0026 pendingValue === self) {\r\n                pendingValue = self();\r\n            }\r\n            isPending = false;\r\n            if (self.isDifferent(previousValue, pendingValue)) {\r\n                self._origNotifySubscribers(previousValue = pendingValue);\r\n            }\r\n        });\r\n\r\n        self._rateLimitedChange = function(value) {\r\n            isPending = true;\r\n            pendingValue = value;\r\n            finish();\r\n        };\r\n        self._rateLimitedBeforeChange = function(value) {\r\n            if (!isPending) {\r\n                previousValue = value;\r\n                self._origNotifySubscribers(value, beforeChange);\r\n            }\r\n        };\r\n    },\r\n\r\n    hasSubscriptionsForEvent: function(event) {\r\n        return this._subscriptions[event] \u0026\u0026 this._subscriptions[event].length;\r\n    },\r\n\r\n    getSubscriptionsCount: function () {\r\n        var total = 0;\r\n        ko.utils.objectForEach(this._subscriptions, function(eventName, subscriptions) {\r\n            total += subscriptions.length;\r\n        });\r\n        return total;\r\n    },\r\n\r\n    isDifferent: function(oldValue, newValue) {\r\n        return !this[\u0027equalityComparer\u0027] || !this[\u0027equalityComparer\u0027](oldValue, newValue);\r\n    },\r\n\r\n    extend: applyExtenders\r\n};\r\n\r\nko.exportProperty(ko_subscribable_fn, \u0027subscribe\u0027, ko_subscribable_fn.subscribe);\r\nko.exportProperty(ko_subscribable_fn, \u0027extend\u0027, ko_subscribable_fn.extend);\r\nko.exportProperty(ko_subscribable_fn, \u0027getSubscriptionsCount\u0027, ko_subscribable_fn.getSubscriptionsCount);\r\n\r\n// For browsers that support proto assignment, we overwrite the prototype of each\r\n// observable instance. Since observables are functions, we need Function.prototype\r\n// to still be in the prototype chain.\r\nif (ko.utils.canSetPrototype) {\r\n    ko.utils.setPrototypeOf(ko_subscribable_fn, Function.prototype);\r\n}\r\n\r\nko.subscribable[\u0027fn\u0027] = ko_subscribable_fn;\r\n\r\n\r\nko.isSubscribable = function (instance) {\r\n    return instance != null \u0026\u0026 typeof instance.subscribe == \"function\" \u0026\u0026 typeof instance[\"notifySubscribers\"] == \"function\";\r\n};\r\n\r\nko.exportSymbol(\u0027subscribable\u0027, ko.subscribable);\r\nko.exportSymbol(\u0027isSubscribable\u0027, ko.isSubscribable);\r\n\r\nko.computedContext = ko.dependencyDetection = (function () {\r\n    var outerFrames = [],\r\n        currentFrame,\r\n        lastId = 0;\r\n\r\n    // Return a unique ID that can be assigned to an observable for dependency tracking.\r\n    // Theoretically, you could eventually overflow the number storage size, resulting\r\n    // in duplicate IDs. But in JavaScript, the largest exact integral value is 2^53\r\n    // or 9,007,199,254,740,992. If you created 1,000,000 IDs per second, it would\r\n    // take over 285 years to reach that number.\r\n    // Reference http://blog.vjeux.com/2010/javascript/javascript-max_int-number-limits.html\r\n    function getId() {\r\n        return ++lastId;\r\n    }\r\n\r\n    function begin(options) {\r\n        outerFrames.push(currentFrame);\r\n        currentFrame = options;\r\n    }\r\n\r\n    function end() {\r\n        currentFrame = outerFrames.pop();\r\n    }\r\n\r\n    return {\r\n        begin: begin,\r\n\r\n        end: end,\r\n\r\n        registerDependency: function (subscribable) {\r\n            if (currentFrame) {\r\n                if (!ko.isSubscribable(subscribable))\r\n                    throw new Error(\"Only subscribable things can act as dependencies\");\r\n                currentFrame.callback(subscribable, subscribable._id || (subscribable._id = getId()));\r\n            }\r\n        },\r\n\r\n        ignore: function (callback, callbackTarget, callbackArgs) {\r\n            try {\r\n                begin();\r\n                return callback.apply(callbackTarget, callbackArgs || []);\r\n            } finally {\r\n                end();\r\n            }\r\n        },\r\n\r\n        getDependenciesCount: function () {\r\n            if (currentFrame)\r\n                return currentFrame.computed.getDependenciesCount();\r\n        },\r\n\r\n        isInitial: function() {\r\n            if (currentFrame)\r\n                return currentFrame.isInitial;\r\n        }\r\n    };\r\n})();\r\n\r\nko.exportSymbol(\u0027computedContext\u0027, ko.computedContext);\r\nko.exportSymbol(\u0027computedContext.getDependenciesCount\u0027, ko.computedContext.getDependenciesCount);\r\nko.exportSymbol(\u0027computedContext.isInitial\u0027, ko.computedContext.isInitial);\r\nko.exportSymbol(\u0027computedContext.isSleeping\u0027, ko.computedContext.isSleeping);\r\nko.observable = function (initialValue) {\r\n    var _latestValue = initialValue;\r\n\r\n    function observable() {\r\n        if (arguments.length \u003e 0) {\r\n            // Write\r\n\r\n            // Ignore writes if the value hasn\u0027t changed\r\n            if (observable.isDifferent(_latestValue, arguments[0])) {\r\n                observable.valueWillMutate();\r\n                _latestValue = arguments[0];\r\n                if (DEBUG) observable._latestValue = _latestValue;\r\n                observable.valueHasMutated();\r\n            }\r\n            return this; // Permits chained assignments\r\n        }\r\n        else {\r\n            // Read\r\n            ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation\r\n            return _latestValue;\r\n        }\r\n    }\r\n    ko.subscribable.call(observable);\r\n    ko.utils.setPrototypeOfOrExtend(observable, ko.observable[\u0027fn\u0027]);\r\n\r\n    if (DEBUG) observable._latestValue = _latestValue;\r\n    observable.peek = function() { return _latestValue };\r\n    observable.valueHasMutated = function () { observable[\"notifySubscribers\"](_latestValue); }\r\n    observable.valueWillMutate = function () { observable[\"notifySubscribers\"](_latestValue, \"beforeChange\"); }\r\n\r\n    ko.exportProperty(observable, \u0027peek\u0027, observable.peek);\r\n    ko.exportProperty(observable, \"valueHasMutated\", observable.valueHasMutated);\r\n    ko.exportProperty(observable, \"valueWillMutate\", observable.valueWillMutate);\r\n\r\n    return observable;\r\n}\r\n\r\nko.observable[\u0027fn\u0027] = {\r\n    \"equalityComparer\": valuesArePrimitiveAndEqual\r\n};\r\n\r\nvar protoProperty = ko.observable.protoProperty = \"__ko_proto__\";\r\nko.observable[\u0027fn\u0027][protoProperty] = ko.observable;\r\n\r\n// Note that for browsers that don\u0027t support proto assignment, the\r\n// inheritance chain is created manually in the ko.observable constructor\r\nif (ko.utils.canSetPrototype) {\r\n    ko.utils.setPrototypeOf(ko.observable[\u0027fn\u0027], ko.subscribable[\u0027fn\u0027]);\r\n}\r\n\r\nko.hasPrototype = function(instance, prototype) {\r\n    if ((instance === null) || (instance === undefined) || (instance[protoProperty] === undefined)) return false;\r\n    if (instance[protoProperty] === prototype) return true;\r\n    return ko.hasPrototype(instance[protoProperty], prototype); // Walk the prototype chain\r\n};\r\n\r\nko.isObservable = function (instance) {\r\n    return ko.hasPrototype(instance, ko.observable);\r\n}\r\nko.isWriteableObservable = function (instance) {\r\n    // Observable\r\n    if ((typeof instance == \"function\") \u0026\u0026 instance[protoProperty] === ko.observable)\r\n        return true;\r\n    // Writeable dependent observable\r\n    if ((typeof instance == \"function\") \u0026\u0026 (instance[protoProperty] === ko.dependentObservable) \u0026\u0026 (instance.hasWriteFunction))\r\n        return true;\r\n    // Anything else\r\n    return false;\r\n}\r\n\r\n\r\nko.exportSymbol(\u0027observable\u0027, ko.observable);\r\nko.exportSymbol(\u0027isObservable\u0027, ko.isObservable);\r\nko.exportSymbol(\u0027isWriteableObservable\u0027, ko.isWriteableObservable);\r\nko.exportSymbol(\u0027isWritableObservable\u0027, ko.isWriteableObservable);\r\nko.observableArray = function (initialValues) {\r\n    initialValues = initialValues || [];\r\n\r\n    if (typeof initialValues != \u0027object\u0027 || !(\u0027length\u0027 in initialValues))\r\n        throw new Error(\"The argument passed when initializing an observable array must be an array, or null, or undefined.\");\r\n\r\n    var result = ko.observable(initialValues);\r\n    ko.utils.setPrototypeOfOrExtend(result, ko.observableArray[\u0027fn\u0027]);\r\n    return result.extend({\u0027trackArrayChanges\u0027:true});\r\n};\r\n\r\nko.observableArray[\u0027fn\u0027] = {\r\n    \u0027remove\u0027: function (valueOrPredicate) {\r\n        var underlyingArray = this.peek();\r\n        var removedValues = [];\r\n        var predicate = typeof valueOrPredicate == \"function\" \u0026\u0026 !ko.isObservable(valueOrPredicate) ? valueOrPredicate : function (value) { return value === valueOrPredicate; };\r\n        for (var i = 0; i \u003c underlyingArray.length; i++) {\r\n            var value = underlyingArray[i];\r\n            if (predicate(value)) {\r\n                if (removedValues.length === 0) {\r\n                    this.valueWillMutate();\r\n                }\r\n                removedValues.push(value);\r\n                underlyingArray.splice(i, 1);\r\n                i--;\r\n            }\r\n        }\r\n        if (removedValues.length) {\r\n            this.valueHasMutated();\r\n        }\r\n        return removedValues;\r\n    },\r\n\r\n    \u0027removeAll\u0027: function (arrayOfValues) {\r\n        // If you passed zero args, we remove everything\r\n        if (arrayOfValues === undefined) {\r\n            var underlyingArray = this.peek();\r\n            var allValues = underlyingArray.slice(0);\r\n            this.valueWillMutate();\r\n            underlyingArray.splice(0, underlyingArray.length);\r\n            this.valueHasMutated();\r\n            return allValues;\r\n        }\r\n        // If you passed an arg, we interpret it as an array of entries to remove\r\n        if (!arrayOfValues)\r\n            return [];\r\n        return this[\u0027remove\u0027](function (value) {\r\n            return ko.utils.arrayIndexOf(arrayOfValues, value) \u003e= 0;\r\n        });\r\n    },\r\n\r\n    \u0027destroy\u0027: function (valueOrPredicate) {\r\n        var underlyingArray = this.peek();\r\n        var predicate = typeof valueOrPredicate == \"function\" \u0026\u0026 !ko.isObservable(valueOrPredicate) ? valueOrPredicate : function (value) { return value === valueOrPredicate; };\r\n        this.valueWillMutate();\r\n        for (var i = underlyingArray.length - 1; i \u003e= 0; i--) {\r\n            var value = underlyingArray[i];\r\n            if (predicate(value))\r\n                underlyingArray[i][\"_destroy\"] = true;\r\n        }\r\n        this.valueHasMutated();\r\n    },\r\n\r\n    \u0027destroyAll\u0027: function (arrayOfValues) {\r\n        // If you passed zero args, we destroy everything\r\n        if (arrayOfValues === undefined)\r\n            return this[\u0027destroy\u0027](function() { return true });\r\n\r\n        // If you passed an arg, we interpret it as an array of entries to destroy\r\n        if (!arrayOfValues)\r\n            return [];\r\n        return this[\u0027destroy\u0027](function (value) {\r\n            return ko.utils.arrayIndexOf(arrayOfValues, value) \u003e= 0;\r\n        });\r\n    },\r\n\r\n    \u0027indexOf\u0027: function (item) {\r\n        var underlyingArray = this();\r\n        return ko.utils.arrayIndexOf(underlyingArray, item);\r\n    },\r\n\r\n    \u0027replace\u0027: function(oldItem, newItem) {\r\n        var index = this[\u0027indexOf\u0027](oldItem);\r\n        if (index \u003e= 0) {\r\n            this.valueWillMutate();\r\n            this.peek()[index] = newItem;\r\n            this.valueHasMutated();\r\n        }\r\n    }\r\n};\r\n\r\n// Populate ko.observableArray.fn with read/write functions from native arrays\r\n// Important: Do not add any additional functions here that may reasonably be used to *read* data from the array\r\n// because we\u0027ll eval them without causing subscriptions, so ko.computed output could end up getting stale\r\nko.utils.arrayForEach([\"pop\", \"push\", \"reverse\", \"shift\", \"sort\", \"splice\", \"unshift\"], function (methodName) {\r\n    ko.observableArray[\u0027fn\u0027][methodName] = function () {\r\n        // Use \"peek\" to avoid creating a subscription in any computed that we\u0027re executing in the context of\r\n        // (for consistency with mutating regular observables)\r\n        var underlyingArray = this.peek();\r\n        this.valueWillMutate();\r\n        this.cacheDiffForKnownOperation(underlyingArray, methodName, arguments);\r\n        var methodCallResult = underlyingArray[methodName].apply(underlyingArray, arguments);\r\n        this.valueHasMutated();\r\n        return methodCallResult;\r\n    };\r\n});\r\n\r\n// Populate ko.observableArray.fn with read-only functions from native arrays\r\nko.utils.arrayForEach([\"slice\"], function (methodName) {\r\n    ko.observableArray[\u0027fn\u0027][methodName] = function () {\r\n        var underlyingArray = this();\r\n        return underlyingArray[methodName].apply(underlyingArray, arguments);\r\n    };\r\n});\r\n\r\n// Note that for browsers that don\u0027t support proto assignment, the\r\n// inheritance chain is created manually in the ko.observableArray constructor\r\nif (ko.utils.canSetPrototype) {\r\n    ko.utils.setPrototypeOf(ko.observableArray[\u0027fn\u0027], ko.observable[\u0027fn\u0027]);\r\n}\r\n\r\nko.exportSymbol(\u0027observableArray\u0027, ko.observableArray);\r\nvar arrayChangeEventName = \u0027arrayChange\u0027;\r\nko.extenders[\u0027trackArrayChanges\u0027] = function(target) {\r\n    // Only modify the target observable once\r\n    if (target.cacheDiffForKnownOperation) {\r\n        return;\r\n    }\r\n    var trackingChanges = false,\r\n        cachedDiff = null,\r\n        pendingNotifications = 0,\r\n        underlyingSubscribeFunction = target.subscribe;\r\n\r\n    // Intercept \"subscribe\" calls, and for array change events, ensure change tracking is enabled\r\n    target.subscribe = target[\u0027subscribe\u0027] = function(callback, callbackTarget, event) {\r\n        if (event === arrayChangeEventName) {\r\n            trackChanges();\r\n        }\r\n        return underlyingSubscribeFunction.apply(this, arguments);\r\n    };\r\n\r\n    function trackChanges() {\r\n        // Calling \u0027trackChanges\u0027 multiple times is the same as calling it once\r\n        if (trackingChanges) {\r\n            return;\r\n        }\r\n\r\n        trackingChanges = true;\r\n\r\n        // Intercept \"notifySubscribers\" to track how many times it was called.\r\n        var underlyingNotifySubscribersFunction = target[\u0027notifySubscribers\u0027];\r\n        target[\u0027notifySubscribers\u0027] = function(valueToNotify, event) {\r\n            if (!event || event === defaultEvent) {\r\n                ++pendingNotifications;\r\n            }\r\n            return underlyingNotifySubscribersFunction.apply(this, arguments);\r\n        };\r\n\r\n        // Each time the array changes value, capture a clone so that on the next\r\n        // change it\u0027s possible to produce a diff\r\n        var previousContents = [].concat(target.peek() || []);\r\n        cachedDiff = null;\r\n        target.subscribe(function(currentContents) {\r\n            // Make a copy of the current contents and ensure it\u0027s an array\r\n            currentContents = [].concat(currentContents || []);\r\n\r\n            // Compute the diff and issue notifications, but only if someone is listening\r\n            if (target.hasSubscriptionsForEvent(arrayChangeEventName)) {\r\n                var changes = getChanges(previousContents, currentContents);\r\n                if (changes.length) {\r\n                    target[\u0027notifySubscribers\u0027](changes, arrayChangeEventName);\r\n                }\r\n            }\r\n\r\n            // Eliminate references to the old, removed items, so they can be GCed\r\n            previousContents = currentContents;\r\n            cachedDiff = null;\r\n            pendingNotifications = 0;\r\n        });\r\n    }\r\n\r\n    function getChanges(previousContents, currentContents) {\r\n        // We try to re-use cached diffs.\r\n        // The scenarios where pendingNotifications \u003e 1 are when using rate-limiting or the Deferred Updates\r\n        // plugin, which without this check would not be compatible with arrayChange notifications. Normally,\r\n        // notifications are issued immediately so we wouldn\u0027t be queueing up more than one.\r\n        if (!cachedDiff || pendingNotifications \u003e 1) {\r\n            cachedDiff = ko.utils.compareArrays(previousContents, currentContents, { \u0027sparse\u0027: true });\r\n        }\r\n\r\n        return cachedDiff;\r\n    }\r\n\r\n    target.cacheDiffForKnownOperation = function(rawArray, operationName, args) {\r\n        // Only run if we\u0027re currently tracking changes for this observable array\r\n        // and there aren\u0027t any pending deferred notifications.\r\n        if (!trackingChanges || pendingNotifications) {\r\n            return;\r\n        }\r\n        var diff = [],\r\n            arrayLength = rawArray.length,\r\n            argsLength = args.length,\r\n            offset = 0;\r\n\r\n        function pushDiff(status, value, index) {\r\n            return diff[diff.length] = { \u0027status\u0027: status, \u0027value\u0027: value, \u0027index\u0027: index };\r\n        }\r\n        switch (operationName) {\r\n            case \u0027push\u0027:\r\n                offset = arrayLength;\r\n            case \u0027unshift\u0027:\r\n                for (var index = 0; index \u003c argsLength; index++) {\r\n                    pushDiff(\u0027added\u0027, args[index], offset + index);\r\n                }\r\n                break;\r\n\r\n            case \u0027pop\u0027:\r\n                offset = arrayLength - 1;\r\n            case \u0027shift\u0027:\r\n                if (arrayLength) {\r\n                    pushDiff(\u0027deleted\u0027, rawArray[offset], offset);\r\n                }\r\n                break;\r\n\r\n            case \u0027splice\u0027:\r\n                // Negative start index means \u0027from end of array\u0027. After that we clamp to [0...arrayLength].\r\n                // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\r\n                var startIndex = Math.min(Math.max(0, args[0] \u003c 0 ? arrayLength + args[0] : args[0]), arrayLength),\r\n                    endDeleteIndex = argsLength === 1 ? arrayLength : Math.min(startIndex + (args[1] || 0), arrayLength),\r\n                    endAddIndex = startIndex + argsLength - 2,\r\n                    endIndex = Math.max(endDeleteIndex, endAddIndex),\r\n                    additions = [], deletions = [];\r\n                for (var index = startIndex, argsIndex = 2; index \u003c endIndex; ++index, ++argsIndex) {\r\n                    if (index \u003c endDeleteIndex)\r\n                        deletions.push(pushDiff(\u0027deleted\u0027, rawArray[index], index));\r\n                    if (index \u003c endAddIndex)\r\n                        additions.push(pushDiff(\u0027added\u0027, args[argsIndex], index));\r\n                }\r\n                ko.utils.findMovesInArrayComparison(deletions, additions);\r\n                break;\r\n\r\n            default:\r\n                return;\r\n        }\r\n        cachedDiff = diff;\r\n    };\r\n};\r\nko.computed = ko.dependentObservable = function (evaluatorFunctionOrOptions, evaluatorFunctionTarget, options) {\r\n    var _latestValue,\r\n        _needsEvaluation = true,\r\n        _isBeingEvaluated = false,\r\n        _suppressDisposalUntilDisposeWhenReturnsFalse = false,\r\n        _isDisposed = false,\r\n        readFunction = evaluatorFunctionOrOptions,\r\n        pure = false,\r\n        isSleeping = false;\r\n\r\n    if (readFunction \u0026\u0026 typeof readFunction == \"object\") {\r\n        // Single-parameter syntax - everything is on this \"options\" param\r\n        options = readFunction;\r\n        readFunction = options[\"read\"];\r\n    } else {\r\n        // Multi-parameter syntax - construct the options according to the params passed\r\n        options = options || {};\r\n        if (!readFunction)\r\n            readFunction = options[\"read\"];\r\n    }\r\n    if (typeof readFunction != \"function\")\r\n        throw new Error(\"Pass a function that returns the value of the ko.computed\");\r\n\r\n    function addSubscriptionToDependency(subscribable, id) {\r\n        if (!_subscriptionsToDependencies[id]) {\r\n            _subscriptionsToDependencies[id] = subscribable.subscribe(evaluatePossiblyAsync);\r\n            ++_dependenciesCount;\r\n        }\r\n    }\r\n\r\n    function disposeAllSubscriptionsToDependencies() {\r\n        ko.utils.objectForEach(_subscriptionsToDependencies, function (id, subscription) {\r\n            subscription.dispose();\r\n        });\r\n        _subscriptionsToDependencies = {};\r\n    }\r\n\r\n    function disposeComputed() {\r\n        disposeAllSubscriptionsToDependencies();\r\n        _dependenciesCount = 0;\r\n        _isDisposed = true;\r\n        _needsEvaluation = false;\r\n    }\r\n\r\n    function evaluatePossiblyAsync() {\r\n        var throttleEvaluationTimeout = dependentObservable[\u0027throttleEvaluation\u0027];\r\n        if (throttleEvaluationTimeout \u0026\u0026 throttleEvaluationTimeout \u003e= 0) {\r\n            clearTimeout(evaluationTimeoutInstance);\r\n            evaluationTimeoutInstance = setTimeout(evaluateImmediate, throttleEvaluationTimeout);\r\n        } else if (dependentObservable._evalRateLimited) {\r\n            dependentObservable._evalRateLimited();\r\n        } else {\r\n            evaluateImmediate();\r\n        }\r\n    }\r\n\r\n    function evaluateImmediate(suppressChangeNotification) {\r\n        if (_isBeingEvaluated) {\r\n            if (pure) {\r\n                throw Error(\"A \u0027pure\u0027 computed must not be called recursively\");\r\n            }\r\n            // If the evaluation of a ko.computed causes side effects, it\u0027s possible that it will trigger its own re-evaluation.\r\n            // This is not desirable (it\u0027s hard for a developer to realise a chain of dependencies might cause this, and they almost\r\n            // certainly didn\u0027t intend infinite re-evaluations). So, for predictability, we simply prevent ko.computeds from causing\r\n            // their own re-evaluation. Further discussion at https://github.com/SteveSanderson/knockout/pull/387\r\n            return;\r\n        }\r\n\r\n        // Do not evaluate (and possibly capture new dependencies) if disposed\r\n        if (_isDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (disposeWhen \u0026\u0026 disposeWhen()) {\r\n            // See comment below about _suppressDisposalUntilDisposeWhenReturnsFalse\r\n            if (!_suppressDisposalUntilDisposeWhenReturnsFalse) {\r\n                dispose();\r\n                return;\r\n            }\r\n        } else {\r\n            // It just did return false, so we can stop suppressing now\r\n            _suppressDisposalUntilDisposeWhenReturnsFalse = false;\r\n        }\r\n\r\n        _isBeingEvaluated = true;\r\n\r\n        // When sleeping, recalculate the value and return.\r\n        if (isSleeping) {\r\n            try {\r\n                var dependencyTracking = {};\r\n                ko.dependencyDetection.begin({\r\n                    callback: function (subscribable, id) {\r\n                        if (!dependencyTracking[id]) {\r\n                            dependencyTracking[id] = 1;\r\n                            ++_dependenciesCount;\r\n                        }\r\n                    },\r\n                    computed: dependentObservable,\r\n                    isInitial: undefined\r\n                });\r\n                _dependenciesCount = 0;\r\n                _latestValue = readFunction.call(evaluatorFunctionTarget);\r\n            } finally {\r\n                ko.dependencyDetection.end();\r\n                _isBeingEvaluated = false;\r\n            }\r\n        } else {\r\n            try {\r\n                // Initially, we assume that none of the subscriptions are still being used (i.e., all are candidates for disposal).\r\n                // Then, during evaluation, we cross off any that are in fact still being used.\r\n                var disposalCandidates = _subscriptionsToDependencies, disposalCount = _dependenciesCount;\r\n                ko.dependencyDetection.begin({\r\n                    callback: function(subscribable, id) {\r\n                        if (!_isDisposed) {\r\n                            if (disposalCount \u0026\u0026 disposalCandidates[id]) {\r\n                                // Don\u0027t want to dispose this subscription, as it\u0027s still being used\r\n                                _subscriptionsToDependencies[id] = disposalCandidates[id];\r\n                                ++_dependenciesCount;\r\n                                delete disposalCandidates[id];\r\n                                --disposalCount;\r\n                            } else {\r\n                                // Brand new subscription - add it\r\n                                addSubscriptionToDependency(subscribable, id);\r\n                            }\r\n                        }\r\n                    },\r\n                    computed: dependentObservable,\r\n                    isInitial: pure ? undefined : !_dependenciesCount        // If we\u0027re evaluating when there are no previous dependencies, it must be the first time\r\n                });\r\n\r\n                _subscriptionsToDependencies = {};\r\n                _dependenciesCount = 0;\r\n\r\n                try {\r\n                    var newValue = evaluatorFunctionTarget ? readFunction.call(evaluatorFunctionTarget) : readFunction();\r\n\r\n                } finally {\r\n                    ko.dependencyDetection.end();\r\n\r\n                    // For each subscription no longer being used, remove it from the active subscriptions list and dispose it\r\n                    if (disposalCount) {\r\n                        ko.utils.objectForEach(disposalCandidates, function(id, toDispose) {\r\n                            toDispose.dispose();\r\n                        });\r\n                    }\r\n\r\n                    _needsEvaluation = false;\r\n                }\r\n\r\n                if (dependentObservable.isDifferent(_latestValue, newValue)) {\r\n                    dependentObservable[\"notifySubscribers\"](_latestValue, \"beforeChange\");\r\n\r\n                    _latestValue = newValue;\r\n                    if (DEBUG) dependentObservable._latestValue = _latestValue;\r\n\r\n                    if (suppressChangeNotification !== true) {  // Check for strict true value since setTimeout in Firefox passes a numeric value to the function\r\n                        dependentObservable[\"notifySubscribers\"](_latestValue);\r\n                    }\r\n                }\r\n            } finally {\r\n                _isBeingEvaluated = false;\r\n            }\r\n        }\r\n\r\n        if (!_dependenciesCount)\r\n            dispose();\r\n    }\r\n\r\n    function dependentObservable() {\r\n        if (arguments.length \u003e 0) {\r\n            if (typeof writeFunction === \"function\") {\r\n                // Writing a value\r\n                writeFunction.apply(evaluatorFunctionTarget, arguments);\r\n            } else {\r\n                throw new Error(\"Cannot write a value to a ko.computed unless you specify a \u0027write\u0027 option. If you wish to read the current value, don\u0027t pass any parameters.\");\r\n            }\r\n            return this; // Permits chained assignments\r\n        } else {\r\n            // Reading the value\r\n            ko.dependencyDetection.registerDependency(dependentObservable);\r\n            if (_needsEvaluation)\r\n                evaluateImmediate(true /* suppressChangeNotification */);\r\n            return _latestValue;\r\n        }\r\n    }\r\n\r\n    function peek() {\r\n        // Peek won\u0027t re-evaluate, except to get the initial value when \"deferEvaluation\" is set, or while the computed is sleeping.\r\n        // Those are the only times that both of these conditions will be satisfied.\r\n        if (_needsEvaluation \u0026\u0026 !_dependenciesCount)\r\n            evaluateImmediate(true /* suppressChangeNotification */);\r\n        return _latestValue;\r\n    }\r\n\r\n    function isActive() {\r\n        return _needsEvaluation || _dependenciesCount \u003e 0;\r\n    }\r\n\r\n    // By here, \"options\" is always non-null\r\n    var writeFunction = options[\"write\"],\r\n        disposeWhenNodeIsRemoved = options[\"disposeWhenNodeIsRemoved\"] || options.disposeWhenNodeIsRemoved || null,\r\n        disposeWhenOption = options[\"disposeWhen\"] || options.disposeWhen,\r\n        disposeWhen = disposeWhenOption,\r\n        dispose = disposeComputed,\r\n        _subscriptionsToDependencies = {},\r\n        _dependenciesCount = 0,\r\n        evaluationTimeoutInstance = null;\r\n\r\n    if (!evaluatorFunctionTarget)\r\n        evaluatorFunctionTarget = options[\"owner\"];\r\n\r\n    ko.subscribable.call(dependentObservable);\r\n    ko.utils.setPrototypeOfOrExtend(dependentObservable, ko.dependentObservable[\u0027fn\u0027]);\r\n\r\n    dependentObservable.peek = peek;\r\n    dependentObservable.getDependenciesCount = function () { return _dependenciesCount; };\r\n    dependentObservable.hasWriteFunction = typeof options[\"write\"] === \"function\";\r\n    dependentObservable.dispose = function () { dispose(); };\r\n    dependentObservable.isActive = isActive;\r\n\r\n    // Replace the limit function with one that delays evaluation as well.\r\n    var originalLimit = dependentObservable.limit;\r\n    dependentObservable.limit = function(limitFunction) {\r\n        originalLimit.call(dependentObservable, limitFunction);\r\n        dependentObservable._evalRateLimited = function() {\r\n            dependentObservable._rateLimitedBeforeChange(_latestValue);\r\n\r\n            _needsEvaluation = true;    // Mark as dirty\r\n\r\n            // Pass the observable to the rate-limit code, which will access it when\r\n            // it\u0027s time to do the notification.\r\n            dependentObservable._rateLimitedChange(dependentObservable);\r\n        }\r\n    };\r\n\r\n    if (options[\u0027pure\u0027]) {\r\n        pure = true;\r\n        isSleeping = true;     // Starts off sleeping; will awake on the first subscription\r\n        dependentObservable.beforeSubscriptionAdd = function () {\r\n            // If asleep, wake up the computed and evaluate to register any dependencies.\r\n            if (isSleeping) {\r\n                isSleeping = false;\r\n                evaluateImmediate(true /* suppressChangeNotification */);\r\n            }\r\n        }\r\n        dependentObservable.afterSubscriptionRemove = function () {\r\n            if (!dependentObservable.getSubscriptionsCount()) {\r\n                disposeAllSubscriptionsToDependencies();\r\n                isSleeping = _needsEvaluation = true;\r\n            }\r\n        }\r\n    } else if (options[\u0027deferEvaluation\u0027]) {\r\n        // This will force a computed with deferEvaluation to evaluate when the first subscriptions is registered.\r\n        dependentObservable.beforeSubscriptionAdd = function () {\r\n            peek();\r\n            delete dependentObservable.beforeSubscriptionAdd;\r\n        }\r\n    }\r\n\r\n    ko.exportProperty(dependentObservable, \u0027peek\u0027, dependentObservable.peek);\r\n    ko.exportProperty(dependentObservable, \u0027dispose\u0027, dependentObservable.dispose);\r\n    ko.exportProperty(dependentObservable, \u0027isActive\u0027, dependentObservable.isActive);\r\n    ko.exportProperty(dependentObservable, \u0027getDependenciesCount\u0027, dependentObservable.getDependenciesCount);\r\n\r\n    // Add a \"disposeWhen\" callback that, on each evaluation, disposes if the node was removed without using ko.removeNode.\r\n    if (disposeWhenNodeIsRemoved) {\r\n        // Since this computed is associated with a DOM node, and we don\u0027t want to dispose the computed\r\n        // until the DOM node is *removed* from the document (as opposed to never having been in the document),\r\n        // we\u0027ll prevent disposal until \"disposeWhen\" first returns false.\r\n        _suppressDisposalUntilDisposeWhenReturnsFalse = true;\r\n\r\n        // Only watch for the node\u0027s disposal if the value really is a node. It might not be,\r\n        // e.g., { disposeWhenNodeIsRemoved: true } can be used to opt into the \"only dispose\r\n        // after first false result\" behaviour even if there\u0027s no specific node to watch. This\r\n        // technique is intended for KO\u0027s internal use only and shouldn\u0027t be documented or used\r\n        // by application code, as it\u0027s likely to change in a future version of KO.\r\n        if (disposeWhenNodeIsRemoved.nodeType) {\r\n            disposeWhen = function () {\r\n                return !ko.utils.domNodeIsAttachedToDocument(disposeWhenNodeIsRemoved) || (disposeWhenOption \u0026\u0026 disposeWhenOption());\r\n            };\r\n        }\r\n    }\r\n\r\n    // Evaluate, unless sleeping or deferEvaluation is true\r\n    if (!isSleeping \u0026\u0026 !options[\u0027deferEvaluation\u0027])\r\n        evaluateImmediate();\r\n\r\n    // Attach a DOM node disposal callback so that the computed will be proactively disposed as soon as the node is\r\n    // removed using ko.removeNode. But skip if isActive is false (there will never be any dependencies to dispose).\r\n    if (disposeWhenNodeIsRemoved \u0026\u0026 isActive() \u0026\u0026 disposeWhenNodeIsRemoved.nodeType) {\r\n        dispose = function() {\r\n            ko.utils.domNodeDisposal.removeDisposeCallback(disposeWhenNodeIsRemoved, dispose);\r\n            disposeComputed();\r\n        };\r\n        ko.utils.domNodeDisposal.addDisposeCallback(disposeWhenNodeIsRemoved, dispose);\r\n    }\r\n\r\n    return dependentObservable;\r\n};\r\n\r\nko.isComputed = function(instance) {\r\n    return ko.hasPrototype(instance, ko.dependentObservable);\r\n};\r\n\r\nvar protoProp = ko.observable.protoProperty; // == \"__ko_proto__\"\r\nko.dependentObservable[protoProp] = ko.observable;\r\n\r\nko.dependentObservable[\u0027fn\u0027] = {\r\n    \"equalityComparer\": valuesArePrimitiveAndEqual\r\n};\r\nko.dependentObservable[\u0027fn\u0027][protoProp] = ko.dependentObservable;\r\n\r\n// Note that for browsers that don\u0027t support proto assignment, the\r\n// inheritance chain is created manually in the ko.dependentObservable constructor\r\nif (ko.utils.canSetPrototype) {\r\n    ko.utils.setPrototypeOf(ko.dependentObservable[\u0027fn\u0027], ko.subscribable[\u0027fn\u0027]);\r\n}\r\n\r\nko.exportSymbol(\u0027dependentObservable\u0027, ko.dependentObservable);\r\nko.exportSymbol(\u0027computed\u0027, ko.dependentObservable); // Make \"ko.computed\" an alias for \"ko.dependentObservable\"\r\nko.exportSymbol(\u0027isComputed\u0027, ko.isComputed);\r\n\r\nko.pureComputed = function (evaluatorFunctionOrOptions, evaluatorFunctionTarget) {\r\n    if (typeof evaluatorFunctionOrOptions === \u0027function\u0027) {\r\n        return ko.computed(evaluatorFunctionOrOptions, evaluatorFunctionTarget, {\u0027pure\u0027:true});\r\n    } else {\r\n        evaluatorFunctionOrOptions = ko.utils.extend({}, evaluatorFunctionOrOptions);   // make a copy of the parameter object\r\n        evaluatorFunctionOrOptions[\u0027pure\u0027] = true;\r\n        return ko.computed(evaluatorFunctionOrOptions, evaluatorFunctionTarget);\r\n    }\r\n}\r\nko.exportSymbol(\u0027pureComputed\u0027, ko.pureComputed);\r\n\r\n(function() {\r\n    var maxNestedObservableDepth = 10; // Escape the (unlikely) pathalogical case where an observable\u0027s current value is itself (or similar reference cycle)\r\n\r\n    ko.toJS = function(rootObject) {\r\n        if (arguments.length == 0)\r\n            throw new Error(\"When calling ko.toJS, pass the object you want to convert.\");\r\n\r\n        // We just unwrap everything at every level in the object graph\r\n        return mapJsObjectGraph(rootObject, function(valueToMap) {\r\n            // Loop because an observable\u0027s value might in turn be another observable wrapper\r\n            for (var i = 0; ko.isObservable(valueToMap) \u0026\u0026 (i \u003c maxNestedObservableDepth); i++)\r\n                valueToMap = valueToMap();\r\n            return valueToMap;\r\n        });\r\n    };\r\n\r\n    ko.toJSON = function(rootObject, replacer, space) {     // replacer and space are optional\r\n        var plainJavaScriptObject = ko.toJS(rootObject);\r\n        return ko.utils.stringifyJson(plainJavaScriptObject, replacer, space);\r\n    };\r\n\r\n    function mapJsObjectGraph(rootObject, mapInputCallback, visitedObjects) {\r\n        visitedObjects = visitedObjects || new objectLookup();\r\n\r\n        rootObject = mapInputCallback(rootObject);\r\n        var canHaveProperties = (typeof rootObject == \"object\") \u0026\u0026 (rootObject !== null) \u0026\u0026 (rootObject !== undefined) \u0026\u0026 (!(rootObject instanceof Date)) \u0026\u0026 (!(rootObject instanceof String)) \u0026\u0026 (!(rootObject instanceof Number)) \u0026\u0026 (!(rootObject instanceof Boolean));\r\n        if (!canHaveProperties)\r\n            return rootObject;\r\n\r\n        var outputProperties = rootObject instanceof Array ? [] : {};\r\n        visitedObjects.save(rootObject, outputProperties);\r\n\r\n        visitPropertiesOrArrayEntries(rootObject, function(indexer) {\r\n            var propertyValue = mapInputCallback(rootObject[indexer]);\r\n\r\n            switch (typeof propertyValue) {\r\n                case \"boolean\":\r\n                case \"number\":\r\n                case \"string\":\r\n                case \"function\":\r\n                    outputProperties[indexer] = propertyValue;\r\n                    break;\r\n                case \"object\":\r\n                case \"undefined\":\r\n                    var previouslyMappedValue = visitedObjects.get(propertyValue);\r\n                    outputProperties[indexer] = (previouslyMappedValue !== undefined)\r\n                        ? previouslyMappedValue\r\n                        : mapJsObjectGraph(propertyValue, mapInputCallback, visitedObjects);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return outputProperties;\r\n    }\r\n\r\n    function visitPropertiesOrArrayEntries(rootObject, visitorCallback) {\r\n        if (rootObject instanceof Array) {\r\n            for (var i = 0; i \u003c rootObject.length; i++)\r\n                visitorCallback(i);\r\n\r\n            // For arrays, also respect toJSON property for custom mappings (fixes #278)\r\n            if (typeof rootObject[\u0027toJSON\u0027] == \u0027function\u0027)\r\n                visitorCallback(\u0027toJSON\u0027);\r\n        } else {\r\n            for (var propertyName in rootObject) {\r\n                visitorCallback(propertyName);\r\n            }\r\n        }\r\n    };\r\n\r\n    function objectLookup() {\r\n        this.keys = [];\r\n        this.values = [];\r\n    };\r\n\r\n    objectLookup.prototype = {\r\n        constructor: objectLookup,\r\n        save: function(key, value) {\r\n            var existingIndex = ko.utils.arrayIndexOf(this.keys, key);\r\n            if (existingIndex \u003e= 0)\r\n                this.values[existingIndex] = value;\r\n            else {\r\n                this.keys.push(key);\r\n                this.values.push(value);\r\n            }\r\n        },\r\n        get: function(key) {\r\n            var existingIndex = ko.utils.arrayIndexOf(this.keys, key);\r\n            return (existingIndex \u003e= 0) ? this.values[existingIndex] : undefined;\r\n        }\r\n    };\r\n})();\r\n\r\nko.exportSymbol(\u0027toJS\u0027, ko.toJS);\r\nko.exportSymbol(\u0027toJSON\u0027, ko.toJSON);\r\n(function () {\r\n    var hasDomDataExpandoProperty = \u0027__ko__hasDomDataOptionValue__\u0027;\r\n\r\n    // Normally, SELECT elements and their OPTIONs can only take value of type \u0027string\u0027 (because the values\r\n    // are stored on DOM attributes). ko.selectExtensions provides a way for SELECTs/OPTIONs to have values\r\n    // that are arbitrary objects. This is very convenient when implementing things like cascading dropdowns.\r\n    ko.selectExtensions = {\r\n        readValue : function(element) {\r\n            switch (ko.utils.tagNameLower(element)) {\r\n                case \u0027option\u0027:\r\n                    if (element[hasDomDataExpandoProperty] === true)\r\n                        return ko.utils.domData.get(element, ko.bindingHandlers.options.optionValueDomDataKey);\r\n                    return ko.utils.ieVersion \u003c= 7\r\n                        ? (element.getAttributeNode(\u0027value\u0027) \u0026\u0026 element.getAttributeNode(\u0027value\u0027).specified ? element.value : element.text)\r\n                        : element.value;\r\n                case \u0027select\u0027:\r\n                    return element.selectedIndex \u003e= 0 ? ko.selectExtensions.readValue(element.options[element.selectedIndex]) : undefined;\r\n                default:\r\n                    return element.value;\r\n            }\r\n        },\r\n\r\n        writeValue: function(element, value, allowUnset) {\r\n            switch (ko.utils.tagNameLower(element)) {\r\n                case \u0027option\u0027:\r\n                    switch(typeof value) {\r\n                        case \"string\":\r\n                            ko.utils.domData.set(element, ko.bindingHandlers.options.optionValueDomDataKey, undefined);\r\n                            if (hasDomDataExpandoProperty in element) { // IE \u003c= 8 throws errors if you delete non-existent properties from a DOM node\r\n                                delete element[hasDomDataExpandoProperty];\r\n                            }\r\n                            element.value = value;\r\n                            break;\r\n                        default:\r\n                            // Store arbitrary object using DomData\r\n                            ko.utils.domData.set(element, ko.bindingHandlers.options.optionValueDomDataKey, value);\r\n                            element[hasDomDataExpandoProperty] = true;\r\n\r\n                            // Special treatment of numbers is just for backward compatibility. KO 1.2.1 wrote numerical values to element.value.\r\n                            element.value = typeof value === \"number\" ? value : \"\";\r\n                            break;\r\n                    }\r\n                    break;\r\n                case \u0027select\u0027:\r\n                    if (value === \"\" || value === null)       // A blank string or null value will select the caption\r\n                        value = undefined;\r\n                    var selection = -1;\r\n                    for (var i = 0, n = element.options.length, optionValue; i \u003c n; ++i) {\r\n                        optionValue = ko.selectExtensions.readValue(element.options[i]);\r\n                        // Include special check to handle selecting a caption with a blank string value\r\n                        if (optionValue == value || (optionValue == \"\" \u0026\u0026 value === undefined)) {\r\n                            selection = i;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (allowUnset || selection \u003e= 0 || (value === undefined \u0026\u0026 element.size \u003e 1)) {\r\n                        element.selectedIndex = selection;\r\n                    }\r\n                    break;\r\n                default:\r\n                    if ((value === null) || (value === undefined))\r\n                        value = \"\";\r\n                    element.value = value;\r\n                    break;\r\n            }\r\n        }\r\n    };\r\n})();\r\n\r\nko.exportSymbol(\u0027selectExtensions\u0027, ko.selectExtensions);\r\nko.exportSymbol(\u0027selectExtensions.readValue\u0027, ko.selectExtensions.readValue);\r\nko.exportSymbol(\u0027selectExtensions.writeValue\u0027, ko.selectExtensions.writeValue);\r\nko.expressionRewriting = (function () {\r\n    var javaScriptReservedWords = [\"true\", \"false\", \"null\", \"undefined\"];\r\n\r\n    // Matches something that can be assigned to--either an isolated identifier or something ending with a property accessor\r\n    // This is designed to be simple and avoid false negatives, but could produce false positives (e.g., a+b.c).\r\n    // This also will not properly handle nested brackets (e.g., obj1[obj2[\u0027prop\u0027]]; see #911).\r\n    var javaScriptAssignmentTarget = /^(?:[$_a-z][$\\w]*|(.+)(\\.\\s*[$_a-z][$\\w]*|\\[.+\\]))$/i;\r\n\r\n    function getWriteableValue(expression) {\r\n        if (ko.utils.arrayIndexOf(javaScriptReservedWords, expression) \u003e= 0)\r\n            return false;\r\n        var match = expression.match(javaScriptAssignmentTarget);\r\n        return match === null ? false : match[1] ? (\u0027Object(\u0027 + match[1] + \u0027)\u0027 + match[2]) : expression;\r\n    }\r\n\r\n    // The following regular expressions will be used to split an object-literal string into tokens\r\n\r\n        // These two match strings, either with double quotes or single quotes\r\n    var stringDouble = \u0027\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\"\u0027,\r\n        stringSingle = \"\u0027(?:[^\u0027\\\\\\\\]|\\\\\\\\.)*\u0027\",\r\n        // Matches a regular expression (text enclosed by slashes), but will also match sets of divisions\r\n        // as a regular expression (this is handled by the parsing loop below).\r\n        stringRegexp = \u0027/(?:[^/\\\\\\\\]|\\\\\\\\.)*/\\w*\u0027,\r\n        // These characters have special meaning to the parser and must not appear in the middle of a\r\n        // token, except as part of a string.\r\n        specials = \u0027,\"\\\u0027{}()/:[\\\\]\u0027,\r\n        // Match text (at least two characters) that does not contain any of the above special characters,\r\n        // although some of the special characters are allowed to start it (all but the colon and comma).\r\n        // The text can contain spaces, but leading or trailing spaces are skipped.\r\n        everyThingElse = \u0027[^\\\\s:,/][^\u0027 + specials + \u0027]*[^\\\\s\u0027 + specials + \u0027]\u0027,\r\n        // Match any non-space character not matched already. This will match colons and commas, since they\u0027re\r\n        // not matched by \"everyThingElse\", but will also match any other single character that wasn\u0027t already\r\n        // matched (for example: in \"a: 1, b: 2\", each of the non-space characters will be matched by oneNotSpace).\r\n        oneNotSpace = \u0027[^\\\\s]\u0027,\r\n\r\n        // Create the actual regular expression by or-ing the above strings. The order is important.\r\n        bindingToken = RegExp(stringDouble + \u0027|\u0027 + stringSingle + \u0027|\u0027 + stringRegexp + \u0027|\u0027 + everyThingElse + \u0027|\u0027 + oneNotSpace, \u0027g\u0027),\r\n\r\n        // Match end of previous token to determine whether a slash is a division or regex.\r\n        divisionLookBehind = /[\\])\"\u0027A-Za-z0-9_$]+$/,\r\n        keywordRegexLookBehind = {\u0027in\u0027:1,\u0027return\u0027:1,\u0027typeof\u0027:1};\r\n\r\n    function parseObjectLiteral(objectLiteralString) {\r\n        // Trim leading and trailing spaces from the string\r\n        var str = ko.utils.stringTrim(objectLiteralString);\r\n\r\n        // Trim braces \u0027{\u0027 surrounding the whole object literal\r\n        if (str.charCodeAt(0) === 123) str = str.slice(1, -1);\r\n\r\n        // Split into tokens\r\n        var result = [], toks = str.match(bindingToken), key, values, depth = 0;\r\n\r\n        if (toks) {\r\n            // Append a comma so that we don\u0027t need a separate code block to deal with the last item\r\n            toks.push(\u0027,\u0027);\r\n\r\n            for (var i = 0, tok; tok = toks[i]; ++i) {\r\n                var c = tok.charCodeAt(0);\r\n                // A comma signals the end of a key/value pair if depth is zero\r\n                if (c === 44) { // \",\"\r\n                    if (depth \u003c= 0) {\r\n                        if (key)\r\n                            result.push(values ? {key: key, value: values.join(\u0027\u0027)} : {\u0027unknown\u0027: key});\r\n                        key = values = depth = 0;\r\n                        continue;\r\n                    }\r\n                // Simply skip the colon that separates the name and value\r\n                } else if (c === 58) { // \":\"\r\n                    if (!values)\r\n                        continue;\r\n                // A set of slashes is initially matched as a regular expression, but could be division\r\n                } else if (c === 47 \u0026\u0026 i \u0026\u0026 tok.length \u003e 1) {  // \"/\"\r\n                    // Look at the end of the previous token to determine if the slash is actually division\r\n                    var match = toks[i-1].match(divisionLookBehind);\r\n                    if (match \u0026\u0026 !keywordRegexLookBehind[match[0]]) {\r\n                        // The slash is actually a division punctuator; re-parse the remainder of the string (not including the slash)\r\n                        str = str.substr(str.indexOf(tok) + 1);\r\n                        toks = str.match(bindingToken);\r\n                        toks.push(\u0027,\u0027);\r\n                        i = -1;\r\n                        // Continue with just the slash\r\n                        tok = \u0027/\u0027;\r\n                    }\r\n                // Increment depth for parentheses, braces, and brackets so that interior commas are ignored\r\n                } else if (c === 40 || c === 123 || c === 91) { // \u0027(\u0027, \u0027{\u0027, \u0027[\u0027\r\n                    ++depth;\r\n                } else if (c === 41 || c === 125 || c === 93) { // \u0027)\u0027, \u0027}\u0027, \u0027]\u0027\r\n                    --depth;\r\n                // The key must be a single token; if it\u0027s a string, trim the quotes\r\n                } else if (!key \u0026\u0026 !values) {\r\n                    key = (c === 34 || c === 39) /* \u0027\"\u0027, \"\u0027\" */ ? tok.slice(1, -1) : tok;\r\n                    continue;\r\n                }\r\n                if (values)\r\n                    values.push(tok);\r\n                else\r\n                    values = [tok];\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // Two-way bindings include a write function that allow the handler to update the value even if it\u0027s not an observable.\r\n    var twoWayBindings = {};\r\n\r\n    function preProcessBindings(bindingsStringOrKeyValueArray, bindingOptions) {\r\n        bindingOptions = bindingOptions || {};\r\n\r\n        function processKeyValue(key, val) {\r\n            var writableVal;\r\n            function callPreprocessHook(obj) {\r\n                return (obj \u0026\u0026 obj[\u0027preprocess\u0027]) ? (val = obj[\u0027preprocess\u0027](val, key, processKeyValue)) : true;\r\n            }\r\n            if (!bindingParams) {\r\n                if (!callPreprocessHook(ko[\u0027getBindingHandler\u0027](key)))\r\n                    return;\r\n\r\n                if (twoWayBindings[key] \u0026\u0026 (writableVal = getWriteableValue(val))) {\r\n                    // For two-way bindings, provide a write method in case the value\r\n                    // isn\u0027t a writable observable.\r\n                    propertyAccessorResultStrings.push(\"\u0027\" + key + \"\u0027:function(_z){\" + writableVal + \"=_z}\");\r\n                }\r\n            }\r\n            // Values are wrapped in a function so that each value can be accessed independently\r\n            if (makeValueAccessors) {\r\n                val = \u0027function(){return \u0027 + val + \u0027 }\u0027;\r\n            }\r\n            resultStrings.push(\"\u0027\" + key + \"\u0027:\" + val);\r\n        }\r\n\r\n        var resultStrings = [],\r\n            propertyAccessorResultStrings = [],\r\n            makeValueAccessors = bindingOptions[\u0027valueAccessors\u0027],\r\n            bindingParams = bindingOptions[\u0027bindingParams\u0027],\r\n            keyValueArray = typeof bindingsStringOrKeyValueArray === \"string\" ?\r\n                parseObjectLiteral(bindingsStringOrKeyValueArray) : bindingsStringOrKeyValueArray;\r\n\r\n        ko.utils.arrayForEach(keyValueArray, function(keyValue) {\r\n            processKeyValue(keyValue.key || keyValue[\u0027unknown\u0027], keyValue.value);\r\n        });\r\n\r\n        if (propertyAccessorResultStrings.length)\r\n            processKeyValue(\u0027_ko_property_writers\u0027, \"{\" + propertyAccessorResultStrings.join(\",\") + \" }\");\r\n\r\n        return resultStrings.join(\",\");\r\n    }\r\n\r\n    return {\r\n        bindingRewriteValidators: [],\r\n\r\n        twoWayBindings: twoWayBindings,\r\n\r\n        parseObjectLiteral: parseObjectLiteral,\r\n\r\n        preProcessBindings: preProcessBindings,\r\n\r\n        keyValueArrayContainsKey: function(keyValueArray, key) {\r\n            for (var i = 0; i \u003c keyValueArray.length; i++)\r\n                if (keyValueArray[i][\u0027key\u0027] == key)\r\n                    return true;\r\n            return false;\r\n        },\r\n\r\n        // Internal, private KO utility for updating model properties from within bindings\r\n        // property:            If the property being updated is (or might be) an observable, pass it here\r\n        //                      If it turns out to be a writable observable, it will be written to directly\r\n        // allBindings:         An object with a get method to retrieve bindings in the current execution context.\r\n        //                      This will be searched for a \u0027_ko_property_writers\u0027 property in case you\u0027re writing to a non-observable\r\n        // key:                 The key identifying the property to be written. Example: for { hasFocus: myValue }, write to \u0027myValue\u0027 by specifying the key \u0027hasFocus\u0027\r\n        // value:               The value to be written\r\n        // checkIfDifferent:    If true, and if the property being written is a writable observable, the value will only be written if\r\n        //                      it is !== existing value on that writable observable\r\n        writeValueToProperty: function(property, allBindings, key, value, checkIfDifferent) {\r\n            if (!property || !ko.isObservable(property)) {\r\n                var propWriters = allBindings.get(\u0027_ko_property_writers\u0027);\r\n                if (propWriters \u0026\u0026 propWriters[key])\r\n                    propWriters[key](value);\r\n            } else if (ko.isWriteableObservable(property) \u0026\u0026 (!checkIfDifferent || property.peek() !== value)) {\r\n                property(value);\r\n            }\r\n        }\r\n    };\r\n})();\r\n\r\nko.exportSymbol(\u0027expressionRewriting\u0027, ko.expressionRewriting);\r\nko.exportSymbol(\u0027expressionRewriting.bindingRewriteValidators\u0027, ko.expressionRewriting.bindingRewriteValidators);\r\nko.exportSymbol(\u0027expressionRewriting.parseObjectLiteral\u0027, ko.expressionRewriting.parseObjectLiteral);\r\nko.exportSymbol(\u0027expressionRewriting.preProcessBindings\u0027, ko.expressionRewriting.preProcessBindings);\r\n\r\n// Making bindings explicitly declare themselves as \"two way\" isn\u0027t ideal in the long term (it would be better if\r\n// all bindings could use an official \u0027property writer\u0027 API without needing to declare that they might). However,\r\n// since this is not, and has never been, a public API (_ko_property_writers was never documented), it\u0027s acceptable\r\n// as an internal implementation detail in the short term.\r\n// For those developers who rely on _ko_property_writers in their custom bindings, we expose _twoWayBindings as an\r\n// undocumented feature that makes it relatively easy to upgrade to KO 3.0. However, this is still not an official\r\n// public API, and we reserve the right to remove it at any time if we create a real public property writers API.\r\nko.exportSymbol(\u0027expressionRewriting._twoWayBindings\u0027, ko.expressionRewriting.twoWayBindings);\r\n\r\n// For backward compatibility, define the following aliases. (Previously, these function names were misleading because\r\n// they referred to JSON specifically, even though they actually work with arbitrary JavaScript object literal expressions.)\r\nko.exportSymbol(\u0027jsonExpressionRewriting\u0027, ko.expressionRewriting);\r\nko.exportSymbol(\u0027jsonExpressionRewriting.insertPropertyAccessorsIntoJson\u0027, ko.expressionRewriting.preProcessBindings);\r\n(function() {\r\n    // \"Virtual elements\" is an abstraction on top of the usual DOM API which understands the notion that comment nodes\r\n    // may be used to represent hierarchy (in addition to the DOM\u0027s natural hierarchy).\r\n    // If you call the DOM-manipulating functions on ko.virtualElements, you will be able to read and write the state\r\n    // of that virtual hierarchy\r\n    //\r\n    // The point of all this is to support containerless templates (e.g., \u003c!-- ko foreach:someCollection --\u003eblah\u003c!-- /ko --\u003e)\r\n    // without having to scatter special cases all over the binding and templating code.\r\n\r\n    // IE 9 cannot reliably read the \"nodeValue\" property of a comment node (see https://github.com/SteveSanderson/knockout/issues/186)\r\n    // but it does give them a nonstandard alternative property called \"text\" that it can read reliably. Other browsers don\u0027t have that property.\r\n    // So, use node.text where available, and node.nodeValue elsewhere\r\n    var commentNodesHaveTextProperty = document \u0026\u0026 document.createComment(\"test\").text === \"\u003c!--test--\u003e\";\r\n\r\n    var startCommentRegex = commentNodesHaveTextProperty ? /^\u003c!--\\s*ko(?:\\s+([\\s\\S]+))?\\s*--\u003e$/ : /^\\s*ko(?:\\s+([\\s\\S]+))?\\s*$/;\r\n    var endCommentRegex =   commentNodesHaveTextProperty ? /^\u003c!--\\s*\\/ko\\s*--\u003e$/ : /^\\s*\\/ko\\s*$/;\r\n    var htmlTagsWithOptionallyClosingChildren = { \u0027ul\u0027: true, \u0027ol\u0027: true };\r\n\r\n    function isStartComment(node) {\r\n        return (node.nodeType == 8) \u0026\u0026 startCommentRegex.test(commentNodesHaveTextProperty ? node.text : node.nodeValue);\r\n    }\r\n\r\n    function isEndComment(node) {\r\n        return (node.nodeType == 8) \u0026\u0026 endCommentRegex.test(commentNodesHaveTextProperty ? node.text : node.nodeValue);\r\n    }\r\n\r\n    function getVirtualChildren(startComment, allowUnbalanced) {\r\n        var currentNode = startComment;\r\n        var depth = 1;\r\n        var children = [];\r\n        while (currentNode = currentNode.nextSibling) {\r\n            if (isEndComment(currentNode)) {\r\n                depth--;\r\n                if (depth === 0)\r\n                    return children;\r\n            }\r\n\r\n            children.push(currentNode);\r\n\r\n            if (isStartComment(currentNode))\r\n                depth++;\r\n        }\r\n        if (!allowUnbalanced)\r\n            throw new Error(\"Cannot find closing comment tag to match: \" + startComment.nodeValue);\r\n        return null;\r\n    }\r\n\r\n    function getMatchingEndComment(startComment, allowUnbalanced) {\r\n        var allVirtualChildren = getVirtualChildren(startComment, allowUnbalanced);\r\n        if (allVirtualChildren) {\r\n            if (allVirtualChildren.length \u003e 0)\r\n                return allVirtualChildren[allVirtualChildren.length - 1].nextSibling;\r\n            return startComment.nextSibling;\r\n        } else\r\n            return null; // Must have no matching end comment, and allowUnbalanced is true\r\n    }\r\n\r\n    function getUnbalancedChildTags(node) {\r\n        // e.g., from \u003cdiv\u003eOK\u003c/div\u003e\u003c!-- ko blah --\u003e\u003cspan\u003eAnother\u003c/span\u003e, returns: \u003c!-- ko blah --\u003e\u003cspan\u003eAnother\u003c/span\u003e\r\n        //       from \u003cdiv\u003eOK\u003c/div\u003e\u003c!-- /ko --\u003e\u003c!-- /ko --\u003e,             returns: \u003c!-- /ko --\u003e\u003c!-- /ko --\u003e\r\n        var childNode = node.firstChild, captureRemaining = null;\r\n        if (childNode) {\r\n            do {\r\n                if (captureRemaining)                   // We already hit an unbalanced node and are now just scooping up all subsequent nodes\r\n                    captureRemaining.push(childNode);\r\n                else if (isStartComment(childNode)) {\r\n                    var matchingEndComment = getMatchingEndComment(childNode, /* allowUnbalanced: */ true);\r\n                    if (matchingEndComment)             // It\u0027s a balanced tag, so skip immediately to the end of this virtual set\r\n                        childNode = matchingEndComment;\r\n                    else\r\n                        captureRemaining = [childNode]; // It\u0027s unbalanced, so start capturing from this point\r\n                } else if (isEndComment(childNode)) {\r\n                    captureRemaining = [childNode];     // It\u0027s unbalanced (if it wasn\u0027t, we\u0027d have skipped over it already), so start capturing\r\n                }\r\n            } while (childNode = childNode.nextSibling);\r\n        }\r\n        return captureRemaining;\r\n    }\r\n\r\n    ko.virtualElements = {\r\n        allowedBindings: {},\r\n\r\n        childNodes: function(node) {\r\n            return isStartComment(node) ? getVirtualChildren(node) : node.childNodes;\r\n        },\r\n\r\n        emptyNode: function(node) {\r\n            if (!isStartComment(node))\r\n                ko.utils.emptyDomNode(node);\r\n            else {\r\n                var virtualChildren = ko.virtualElements.childNodes(node);\r\n                for (var i = 0, j = virtualChildren.length; i \u003c j; i++)\r\n                    ko.removeNode(virtualChildren[i]);\r\n            }\r\n        },\r\n\r\n        setDomNodeChildren: function(node, childNodes) {\r\n            if (!isStartComment(node))\r\n                ko.utils.setDomNodeChildren(node, childNodes);\r\n            else {\r\n                ko.virtualElements.emptyNode(node);\r\n                var endCommentNode = node.nextSibling; // Must be the next sibling, as we just emptied the children\r\n                for (var i = 0, j = childNodes.length; i \u003c j; i++)\r\n                    endCommentNode.parentNode.insertBefore(childNodes[i], endCommentNode);\r\n            }\r\n        },\r\n\r\n        prepend: function(containerNode, nodeToPrepend) {\r\n            if (!isStartComment(containerNode)) {\r\n                if (containerNode.firstChild)\r\n                    containerNode.insertBefore(nodeToPrepend, containerNode.firstChild);\r\n                else\r\n                    containerNode.appendChild(nodeToPrepend);\r\n            } else {\r\n                // Start comments must always have a parent and at least one following sibling (the end comment)\r\n                containerNode.parentNode.insertBefore(nodeToPrepend, containerNode.nextSibling);\r\n            }\r\n        },\r\n\r\n        insertAfter: function(containerNode, nodeToInsert, insertAfterNode) {\r\n            if (!insertAfterNode) {\r\n                ko.virtualElements.prepend(containerNode, nodeToInsert);\r\n            } else if (!isStartComment(containerNode)) {\r\n                // Insert after insertion point\r\n                if (insertAfterNode.nextSibling)\r\n                    containerNode.insertBefore(nodeToInsert, insertAfterNode.nextSibling);\r\n                else\r\n                    containerNode.appendChild(nodeToInsert);\r\n            } else {\r\n                // Children of start comments must always have a parent and at least one following sibling (the end comment)\r\n                containerNode.parentNode.insertBefore(nodeToInsert, insertAfterNode.nextSibling);\r\n            }\r\n        },\r\n\r\n        firstChild: function(node) {\r\n            if (!isStartComment(node))\r\n                return node.firstChild;\r\n            if (!node.nextSibling || isEndComment(node.nextSibling))\r\n                return null;\r\n            return node.nextSibling;\r\n        },\r\n\r\n        nextSibling: function(node) {\r\n            if (isStartComment(node))\r\n                node = getMatchingEndComment(node);\r\n            if (node.nextSibling \u0026\u0026 isEndComment(node.nextSibling))\r\n                return null;\r\n            return node.nextSibling;\r\n        },\r\n\r\n        hasBindingValue: isStartComment,\r\n\r\n        virtualNodeBindingValue: function(node) {\r\n            var regexMatch = (commentNodesHaveTextProperty ? node.text : node.nodeValue).match(startCommentRegex);\r\n            return regexMatch ? regexMatch[1] : null;\r\n        },\r\n\r\n        normaliseVirtualElementDomStructure: function(elementVerified) {\r\n            // Workaround for https://github.com/SteveSanderson/knockout/issues/155\r\n            // (IE \u003c= 8 or IE 9 quirks mode parses your HTML weirdly, treating closing \u003c/li\u003e tags as if they don\u0027t exist, thereby moving comment nodes\r\n            // that are direct descendants of \u003cul\u003e into the preceding \u003cli\u003e)\r\n            if (!htmlTagsWithOptionallyClosingChildren[ko.utils.tagNameLower(elementVerified)])\r\n                return;\r\n\r\n            // Scan immediate children to see if they contain unbalanced comment tags. If they do, those comment tags\r\n            // must be intended to appear *after* that child, so move them there.\r\n            var childNode = elementVerified.firstChild;\r\n            if (childNode) {\r\n                do {\r\n                    if (childNode.nodeType === 1) {\r\n                        var unbalancedTags = getUnbalancedChildTags(childNode);\r\n                        if (unbalancedTags) {\r\n                            // Fix up the DOM by moving the unbalanced tags to where they most likely were intended to be placed - *after* the child\r\n                            var nodeToInsertBefore = childNode.nextSibling;\r\n                            for (var i = 0; i \u003c unbalancedTags.length; i++) {\r\n                                if (nodeToInsertBefore)\r\n                                    elementVerified.insertBefore(unbalancedTags[i], nodeToInsertBefore);\r\n                                else\r\n                                    elementVerified.appendChild(unbalancedTags[i]);\r\n                            }\r\n                        }\r\n                    }\r\n                } while (childNode = childNode.nextSibling);\r\n            }\r\n        }\r\n    };\r\n})();\r\nko.exportSymbol(\u0027virtualElements\u0027, ko.virtualElements);\r\nko.exportSymbol(\u0027virtualElements.allowedBindings\u0027, ko.virtualElements.allowedBindings);\r\nko.exportSymbol(\u0027virtualElements.emptyNode\u0027, ko.virtualElements.emptyNode);\r\n//ko.exportSymbol(\u0027virtualElements.firstChild\u0027, ko.virtualElements.firstChild);     // firstChild is not minified\r\nko.exportSymbol(\u0027virtualElements.insertAfter\u0027, ko.virtualElements.insertAfter);\r\n//ko.exportSymbol(\u0027virtualElements.nextSibling\u0027, ko.virtualElements.nextSibling);   // nextSibling is not minified\r\nko.exportSymbol(\u0027virtualElements.prepend\u0027, ko.virtualElements.prepend);\r\nko.exportSymbol(\u0027virtualElements.setDomNodeChildren\u0027, ko.virtualElements.setDomNodeChildren);\r\n(function() {\r\n    var defaultBindingAttributeName = \"data-bind\";\r\n\r\n    ko.bindingProvider = function() {\r\n        this.bindingCache = {};\r\n    };\r\n\r\n    ko.utils.extend(ko.bindingProvider.prototype, {\r\n        \u0027nodeHasBindings\u0027: function(node) {\r\n            switch (node.nodeType) {\r\n                case 1: // Element\r\n                    return node.getAttribute(defaultBindingAttributeName) != null\r\n                        || ko.components[\u0027getComponentNameForNode\u0027](node);\r\n                case 8: // Comment node\r\n                    return ko.virtualElements.hasBindingValue(node);\r\n                default: return false;\r\n            }\r\n        },\r\n\r\n        \u0027getBindings\u0027: function(node, bindingContext) {\r\n            var bindingsString = this[\u0027getBindingsString\u0027](node, bindingContext),\r\n                parsedBindings = bindingsString ? this[\u0027parseBindingsString\u0027](bindingsString, bindingContext, node) : null;\r\n            return ko.components.addBindingsForCustomElement(parsedBindings, node, bindingContext, /* valueAccessors */ false);\r\n        },\r\n\r\n        \u0027getBindingAccessors\u0027: function(node, bindingContext) {\r\n            var bindingsString = this[\u0027getBindingsString\u0027](node, bindingContext),\r\n                parsedBindings = bindingsString ? this[\u0027parseBindingsString\u0027](bindingsString, bindingContext, node, { \u0027valueAccessors\u0027: true }) : null;\r\n            return ko.components.addBindingsForCustomElement(parsedBindings, node, bindingContext, /* valueAccessors */ true);\r\n        },\r\n\r\n        // The following function is only used internally by this default provider.\r\n        // It\u0027s not part of the interface definition for a general binding provider.\r\n        \u0027getBindingsString\u0027: function(node, bindingContext) {\r\n            switch (node.nodeType) {\r\n                case 1: return node.getAttribute(defaultBindingAttributeName);   // Element\r\n                case 8: return ko.virtualElements.virtualNodeBindingValue(node); // Comment node\r\n                default: return null;\r\n            }\r\n        },\r\n\r\n        // The following function is only used internally by this default provider.\r\n        // It\u0027s not part of the interface definition for a general binding provider.\r\n        \u0027parseBindingsString\u0027: function(bindingsString, bindingContext, node, options) {\r\n            try {\r\n                var bindingFunction = createBindingsStringEvaluatorViaCache(bindingsString, this.bindingCache, options);\r\n                return bindingFunction(bindingContext, node);\r\n            } catch (ex) {\r\n                ex.message = \"Unable to parse bindings.\\nBindings value: \" + bindingsString + \"\\nMessage: \" + ex.message;\r\n                throw ex;\r\n            }\r\n        }\r\n    });\r\n\r\n    ko.bindingProvider[\u0027instance\u0027] = new ko.bindingProvider();\r\n\r\n    function createBindingsStringEvaluatorViaCache(bindingsString, cache, options) {\r\n        var cacheKey = bindingsString + (options \u0026\u0026 options[\u0027valueAccessors\u0027] || \u0027\u0027);\r\n        return cache[cacheKey]\r\n            || (cache[cacheKey] = createBindingsStringEvaluator(bindingsString, options));\r\n    }\r\n\r\n    function createBindingsStringEvaluator(bindingsString, options) {\r\n        // Build the source for a function that evaluates \"expression\"\r\n        // For each scope variable, add an extra level of \"with\" nesting\r\n        // Example result: with(sc1) { with(sc0) { return (expression) } }\r\n        var rewrittenBindings = ko.expressionRewriting.preProcessBindings(bindingsString, options),\r\n            functionBody = \"with($context){with($data||{}){return{\" + rewrittenBindings + \"}}}\";\r\n        return new Function(\"$context\", \"$element\", functionBody);\r\n    }\r\n})();\r\n\r\nko.exportSymbol(\u0027bindingProvider\u0027, ko.bindingProvider);\r\n(function () {\r\n    ko.bindingHandlers = {};\r\n\r\n    // The following element types will not be recursed into during binding. In the future, we\r\n    // may consider adding \u003ctemplate\u003e to this list, because such elements\u0027 contents are always\r\n    // intended to be bound in a different context from where they appear in the document.\r\n    var bindingDoesNotRecurseIntoElementTypes = {\r\n        // Don\u0027t want bindings that operate on text nodes to mutate \u003cscript\u003e contents,\r\n        // because it\u0027s unexpected and a potential XSS issue\r\n        \u0027script\u0027: true\r\n    };\r\n\r\n    // Use an overridable method for retrieving binding handlers so that a plugins may support dynamically created handlers\r\n    ko[\u0027getBindingHandler\u0027] = function(bindingKey) {\r\n        return ko.bindingHandlers[bindingKey];\r\n    };\r\n\r\n    // The ko.bindingContext constructor is only called directly to create the root context. For child\r\n    // contexts, use bindingContext.createChildContext or bindingContext.extend.\r\n    ko.bindingContext = function(dataItemOrAccessor, parentContext, dataItemAlias, extendCallback) {\r\n\r\n        // The binding context object includes static properties for the current, parent, and root view models.\r\n        // If a view model is actually stored in an observable, the corresponding binding context object, and\r\n        // any child contexts, must be updated when the view model is changed.\r\n        function updateContext() {\r\n            // Most of the time, the context will directly get a view model object, but if a function is given,\r\n            // we call the function to retrieve the view model. If the function accesses any obsevables or returns\r\n            // an observable, the dependency is tracked, and those observables can later cause the binding\r\n            // context to be updated.\r\n            var dataItemOrObservable = isFunc ? dataItemOrAccessor() : dataItemOrAccessor,\r\n                dataItem = ko.utils.unwrapObservable(dataItemOrObservable);\r\n\r\n            if (parentContext) {\r\n                // When a \"parent\" context is given, register a dependency on the parent context. Thus whenever the\r\n                // parent context is updated, this context will also be updated.\r\n                if (parentContext._subscribable)\r\n                    parentContext._subscribable();\r\n\r\n                // Copy $root and any custom properties from the parent context\r\n                ko.utils.extend(self, parentContext);\r\n\r\n                // Because the above copy overwrites our own properties, we need to reset them.\r\n                // During the first execution, \"subscribable\" isn\u0027t set, so don\u0027t bother doing the update then.\r\n                if (subscribable) {\r\n                    self._subscribable = subscribable;\r\n                }\r\n            } else {\r\n                self[\u0027$parents\u0027] = [];\r\n                self[\u0027$root\u0027] = dataItem;\r\n\r\n                // Export \u0027ko\u0027 in the binding context so it will be available in bindings and templates\r\n                // even if \u0027ko\u0027 isn\u0027t exported as a global, such as when using an AMD loader.\r\n                // See https://github.com/SteveSanderson/knockout/issues/490\r\n                self[\u0027ko\u0027] = ko;\r\n            }\r\n            self[\u0027$rawData\u0027] = dataItemOrObservable;\r\n            self[\u0027$data\u0027] = dataItem;\r\n            if (dataItemAlias)\r\n                self[dataItemAlias] = dataItem;\r\n\r\n            // The extendCallback function is provided when creating a child context or extending a context.\r\n            // It handles the specific actions needed to finish setting up the binding context. Actions in this\r\n            // function could also add dependencies to this binding context.\r\n            if (extendCallback)\r\n                extendCallback(self, parentContext, dataItem);\r\n\r\n            return self[\u0027$data\u0027];\r\n        }\r\n        function disposeWhen() {\r\n            return nodes \u0026\u0026 !ko.utils.anyDomNodeIsAttachedToDocument(nodes);\r\n        }\r\n\r\n        var self = this,\r\n            isFunc = typeof(dataItemOrAccessor) == \"function\" \u0026\u0026 !ko.isObservable(dataItemOrAccessor),\r\n            nodes,\r\n            subscribable = ko.dependentObservable(updateContext, null, { disposeWhen: disposeWhen, disposeWhenNodeIsRemoved: true });\r\n\r\n        // At this point, the binding context has been initialized, and the \"subscribable\" computed observable is\r\n        // subscribed to any observables that were accessed in the process. If there is nothing to track, the\r\n        // computed will be inactive, and we can safely throw it away. If it\u0027s active, the computed is stored in\r\n        // the context object.\r\n        if (subscribable.isActive()) {\r\n            self._subscribable = subscribable;\r\n\r\n            // Always notify because even if the model ($data) hasn\u0027t changed, other context properties might have changed\r\n            subscribable[\u0027equalityComparer\u0027] = null;\r\n\r\n            // We need to be able to dispose of this computed observable when it\u0027s no longer needed. This would be\r\n            // easy if we had a single node to watch, but binding contexts can be used by many different nodes, and\r\n            // we cannot assume that those nodes have any relation to each other. So instead we track any node that\r\n            // the context is attached to, and dispose the computed when all of those nodes have been cleaned.\r\n\r\n            // Add properties to *subscribable* instead of *self* because any properties added to *self* may be overwritten on updates\r\n            nodes = [];\r\n            subscribable._addNode = function(node) {\r\n                nodes.push(node);\r\n                ko.utils.domNodeDisposal.addDisposeCallback(node, function(node) {\r\n                    ko.utils.arrayRemoveItem(nodes, node);\r\n                    if (!nodes.length) {\r\n                        subscribable.dispose();\r\n                        self._subscribable = subscribable = undefined;\r\n                    }\r\n                });\r\n            };\r\n        }\r\n    }\r\n\r\n    // Extend the binding context hierarchy with a new view model object. If the parent context is watching\r\n    // any obsevables, the new child context will automatically get a dependency on the parent context.\r\n    // But this does not mean that the $data value of the child context will also get updated. If the child\r\n    // view model also depends on the parent view model, you must provide a function that returns the correct\r\n    // view model on each update.\r\n    ko.bindingContext.prototype[\u0027createChildContext\u0027] = function (dataItemOrAccessor, dataItemAlias, extendCallback) {\r\n        return new ko.bindingContext(dataItemOrAccessor, this, dataItemAlias, function(self, parentContext) {\r\n            // Extend the context hierarchy by setting the appropriate pointers\r\n            self[\u0027$parentContext\u0027] = parentContext;\r\n            self[\u0027$parent\u0027] = parentContext[\u0027$data\u0027];\r\n            self[\u0027$parents\u0027] = (parentContext[\u0027$parents\u0027] || []).slice(0);\r\n            self[\u0027$parents\u0027].unshift(self[\u0027$parent\u0027]);\r\n            if (extendCallback)\r\n                extendCallback(self);\r\n        });\r\n    };\r\n\r\n    // Extend the binding context with new custom properties. This doesn\u0027t change the context hierarchy.\r\n    // Similarly to \"child\" contexts, provide a function here to make sure that the correct values are set\r\n    // when an observable view model is updated.\r\n    ko.bindingContext.prototype[\u0027extend\u0027] = function(properties) {\r\n        // If the parent context references an observable view model, \"_subscribable\" will always be the\r\n        // latest view model object. If not, \"_subscribable\" isn\u0027t set, and we can use the static \"$data\" value.\r\n        return new ko.bindingContext(this._subscribable || this[\u0027$data\u0027], this, null, function(self, parentContext) {\r\n            // This \"child\" context doesn\u0027t directly track a parent observable view model,\r\n            // so we need to manually set the $rawData value to match the parent.\r\n            self[\u0027$rawData\u0027] = parentContext[\u0027$rawData\u0027];\r\n            ko.utils.extend(self, typeof(properties) == \"function\" ? properties() : properties);\r\n        });\r\n    };\r\n\r\n    // Returns the valueAccesor function for a binding value\r\n    function makeValueAccessor(value) {\r\n        return function() {\r\n            return value;\r\n        };\r\n    }\r\n\r\n    // Returns the value of a valueAccessor function\r\n    function evaluateValueAccessor(valueAccessor) {\r\n        return valueAccessor();\r\n    }\r\n\r\n    // Given a function that returns bindings, create and return a new object that contains\r\n    // binding value-accessors functions. Each accessor function calls the original function\r\n    // so that it always gets the latest value and all dependencies are captured. This is used\r\n    // by ko.applyBindingsToNode and getBindingsAndMakeAccessors.\r\n    function makeAccessorsFromFunction(callback) {\r\n        return ko.utils.objectMap(ko.dependencyDetection.ignore(callback), function(value, key) {\r\n            return function() {\r\n                return callback()[key];\r\n            };\r\n        });\r\n    }\r\n\r\n    // Given a bindings function or object, create and return a new object that contains\r\n    // binding value-accessors functions. This is used by ko.applyBindingsToNode.\r\n    function makeBindingAccessors(bindings, context, node) {\r\n        if (typeof bindings === \u0027function\u0027) {\r\n            return makeAccessorsFromFunction(bindings.bind(null, context, node));\r\n        } else {\r\n            return ko.utils.objectMap(bindings, makeValueAccessor);\r\n        }\r\n    }\r\n\r\n    // This function is used if the binding provider doesn\u0027t include a getBindingAccessors function.\r\n    // It must be called with \u0027this\u0027 set to the provider instance.\r\n    function getBindingsAndMakeAccessors(node, context) {\r\n        return makeAccessorsFromFunction(this[\u0027getBindings\u0027].bind(this, node, context));\r\n    }\r\n\r\n    function validateThatBindingIsAllowedForVirtualElements(bindingName) {\r\n        var validator = ko.virtualElements.allowedBindings[bindingName];\r\n        if (!validator)\r\n            throw new Error(\"The binding \u0027\" + bindingName + \"\u0027 cannot be used with virtual elements\")\r\n    }\r\n\r\n    function applyBindingsToDescendantsInternal (bindingContext, elementOrVirtualElement, bindingContextsMayDifferFromDomParentElement) {\r\n        var currentChild,\r\n            nextInQueue = ko.virtualElements.firstChild(elementOrVirtualElement),\r\n            provider = ko.bindingProvider[\u0027instance\u0027],\r\n            preprocessNode = provider[\u0027preprocessNode\u0027];\r\n\r\n        // Preprocessing allows a binding provider to mutate a node before bindings are applied to it. For example it\u0027s\r\n        // possible to insert new siblings after it, and/or replace the node with a different one. This can be used to\r\n        // implement custom binding syntaxes, such as {{ value }} for string interpolation, or custom element types that\r\n        // trigger insertion of \u003ctemplate\u003e contents at that point in the document.\r\n        if (preprocessNode) {\r\n            while (currentChild = nextInQueue) {\r\n                nextInQueue = ko.virtualElements.nextSibling(currentChild);\r\n                preprocessNode.call(provider, currentChild);\r\n            }\r\n            // Reset nextInQueue for the next loop\r\n            nextInQueue = ko.virtualElements.firstChild(elementOrVirtualElement);\r\n        }\r\n\r\n        while (currentChild = nextInQueue) {\r\n            // Keep a record of the next child *before* applying bindings, in case the binding removes the current child from its position\r\n            nextInQueue = ko.virtualElements.nextSibling(currentChild);\r\n            applyBindingsToNodeAndDescendantsInternal(bindingContext, currentChild, bindingContextsMayDifferFromDomParentElement);\r\n        }\r\n    }\r\n\r\n    function applyBindingsToNodeAndDescendantsInternal (bindingContext, nodeVerified, bindingContextMayDifferFromDomParentElement) {\r\n        var shouldBindDescendants = true;\r\n\r\n        // Perf optimisation: Apply bindings only if...\r\n        // (1) We need to store the binding context on this node (because it may differ from the DOM parent node\u0027s binding context)\r\n        //     Note that we can\u0027t store binding contexts on non-elements (e.g., text nodes), as IE doesn\u0027t allow expando properties for those\r\n        // (2) It might have bindings (e.g., it has a data-bind attribute, or it\u0027s a marker for a containerless template)\r\n        var isElement = (nodeVerified.nodeType === 1);\r\n        if (isElement) // Workaround IE \u003c= 8 HTML parsing weirdness\r\n            ko.virtualElements.normaliseVirtualElementDomStructure(nodeVerified);\r\n\r\n        var shouldApplyBindings = (isElement \u0026\u0026 bindingContextMayDifferFromDomParentElement)             // Case (1)\r\n                               || ko.bindingProvider[\u0027instance\u0027][\u0027nodeHasBindings\u0027](nodeVerified);       // Case (2)\r\n        if (shouldApplyBindings)\r\n            shouldBindDescendants = applyBindingsToNodeInternal(nodeVerified, null, bindingContext, bindingContextMayDifferFromDomParentElement)[\u0027shouldBindDescendants\u0027];\r\n\r\n        if (shouldBindDescendants \u0026\u0026 !bindingDoesNotRecurseIntoElementTypes[ko.utils.tagNameLower(nodeVerified)]) {\r\n            // We\u0027re recursing automatically into (real or virtual) child nodes without changing binding contexts. So,\r\n            //  * For children of a *real* element, the binding context is certainly the same as on their DOM .parentNode,\r\n            //    hence bindingContextsMayDifferFromDomParentElement is false\r\n            //  * For children of a *virtual* element, we can\u0027t be sure. Evaluating .parentNode on those children may\r\n            //    skip over any number of intermediate virtual elements, any of which might define a custom binding context,\r\n            //    hence bindingContextsMayDifferFromDomParentElement is true\r\n            applyBindingsToDescendantsInternal(bindingContext, nodeVerified, /* bindingContextsMayDifferFromDomParentElement: */ !isElement);\r\n        }\r\n    }\r\n\r\n    var boundElementDomDataKey = ko.utils.domData.nextKey();\r\n\r\n\r\n    function topologicalSortBindings(bindings) {\r\n        // Depth-first sort\r\n        var result = [],                // The list of key/handler pairs that we will return\r\n            bindingsConsidered = {},    // A temporary record of which bindings are already in \u0027result\u0027\r\n            cyclicDependencyStack = []; // Keeps track of a depth-search so that, if there\u0027s a cycle, we know which bindings caused it\r\n        ko.utils.objectForEach(bindings, function pushBinding(bindingKey) {\r\n            if (!bindingsConsidered[bindingKey]) {\r\n                var binding = ko[\u0027getBindingHandler\u0027](bindingKey);\r\n                if (binding) {\r\n                    // First add dependencies (if any) of the current binding\r\n                    if (binding[\u0027after\u0027]) {\r\n                        cyclicDependencyStack.push(bindingKey);\r\n                        ko.utils.arrayForEach(binding[\u0027after\u0027], function(bindingDependencyKey) {\r\n                            if (bindings[bindingDependencyKey]) {\r\n                                if (ko.utils.arrayIndexOf(cyclicDependencyStack, bindingDependencyKey) !== -1) {\r\n                                    throw Error(\"Cannot combine the following bindings, because they have a cyclic dependency: \" + cyclicDependencyStack.join(\", \"));\r\n                                } else {\r\n                                    pushBinding(bindingDependencyKey);\r\n                                }\r\n                            }\r\n                        });\r\n                        cyclicDependencyStack.length--;\r\n                    }\r\n                    // Next add the current binding\r\n                    result.push({ key: bindingKey, handler: binding });\r\n                }\r\n                bindingsConsidered[bindingKey] = true;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    function applyBindingsToNodeInternal(node, sourceBindings, bindingContext, bindingContextMayDifferFromDomParentElement) {\r\n        // Prevent multiple applyBindings calls for the same node, except when a binding value is specified\r\n        var alreadyBound = ko.utils.domData.get(node, boundElementDomDataKey);\r\n        if (!sourceBindings) {\r\n            if (alreadyBound) {\r\n                throw Error(\"You cannot apply bindings multiple times to the same element.\");\r\n            }\r\n            ko.utils.domData.set(node, boundElementDomDataKey, true);\r\n        }\r\n\r\n        // Optimization: Don\u0027t store the binding context on this node if it\u0027s definitely the same as on node.parentNode, because\r\n        // we can easily recover it just by scanning up the node\u0027s ancestors in the DOM\r\n        // (note: here, parent node means \"real DOM parent\" not \"virtual parent\", as there\u0027s no O(1) way to find the virtual parent)\r\n        if (!alreadyBound \u0026\u0026 bindingContextMayDifferFromDomParentElement)\r\n            ko.storedBindingContextForNode(node, bindingContext);\r\n\r\n        // Use bindings if given, otherwise fall back on asking the bindings provider to give us some bindings\r\n        var bindings;\r\n        if (sourceBindings \u0026\u0026 typeof sourceBindings !== \u0027function\u0027) {\r\n            bindings = sourceBindings;\r\n        } else {\r\n            var provider = ko.bindingProvider[\u0027instance\u0027],\r\n                getBindings = provider[\u0027getBindingAccessors\u0027] || getBindingsAndMakeAccessors;\r\n\r\n            // Get the binding from the provider within a computed observable so that we can update the bindings whenever\r\n            // the binding context is updated or if the binding provider accesses observables.\r\n            var bindingsUpdater = ko.dependentObservable(\r\n                function() {\r\n                    bindings = sourceBindings ? sourceBindings(bindingContext, node) : getBindings.call(provider, node, bindingContext);\r\n                    // Register a dependency on the binding context to support obsevable view models.\r\n                    if (bindings \u0026\u0026 bindingContext._subscribable)\r\n                        bindingContext._subscribable();\r\n                    return bindings;\r\n                },\r\n                null, { disposeWhenNodeIsRemoved: node }\r\n            );\r\n\r\n            if (!bindings || !bindingsUpdater.isActive())\r\n                bindingsUpdater = null;\r\n        }\r\n\r\n        var bindingHandlerThatControlsDescendantBindings;\r\n        if (bindings) {\r\n            // Return the value accessor for a given binding. When bindings are static (won\u0027t be updated because of a binding\r\n            // context update), just return the value accessor from the binding. Otherwise, return a function that always gets\r\n            // the latest binding value and registers a dependency on the binding updater.\r\n            var getValueAccessor = bindingsUpdater\r\n                ? function(bindingKey) {\r\n                    return function() {\r\n                        return evaluateValueAccessor(bindingsUpdater()[bindingKey]);\r\n                    };\r\n                } : function(bindingKey) {\r\n                    return bindings[bindingKey];\r\n                };\r\n\r\n            // Use of allBindings as a function is maintained for backwards compatibility, but its use is deprecated\r\n            function allBindings() {\r\n                return ko.utils.objectMap(bindingsUpdater ? bindingsUpdater() : bindings, evaluateValueAccessor);\r\n            }\r\n            // The following is the 3.x allBindings API\r\n            allBindings[\u0027get\u0027] = function(key) {\r\n                return bindings[key] \u0026\u0026 evaluateValueAccessor(getValueAccessor(key));\r\n            };\r\n            allBindings[\u0027has\u0027] = function(key) {\r\n                return key in bindings;\r\n            };\r\n\r\n            // First put the bindings into the right order\r\n            var orderedBindings = topologicalSortBindings(bindings);\r\n\r\n            // Go through the sorted bindings, calling init and update for each\r\n            ko.utils.arrayForEach(orderedBindings, function(bindingKeyAndHandler) {\r\n                // Note that topologicalSortBindings has already filtered out any nonexistent binding handlers,\r\n                // so bindingKeyAndHandler.handler will always be nonnull.\r\n                var handlerInitFn = bindingKeyAndHandler.handler[\"init\"],\r\n                    handlerUpdateFn = bindingKeyAndHandler.handler[\"update\"],\r\n                    bindingKey = bindingKeyAndHandler.key;\r\n\r\n                if (node.nodeType === 8) {\r\n                    validateThatBindingIsAllowedForVirtualElements(bindingKey);\r\n                }\r\n\r\n                try {\r\n                    // Run init, ignoring any dependencies\r\n                    if (typeof handlerInitFn == \"function\") {\r\n                        ko.dependencyDetection.ignore(function() {\r\n                            var initResult = handlerInitFn(node, getValueAccessor(bindingKey), allBindings, bindingContext[\u0027$data\u0027], bindingContext);\r\n\r\n                            // If this binding handler claims to control descendant bindings, make a note of this\r\n                            if (initResult \u0026\u0026 initResult[\u0027controlsDescendantBindings\u0027]) {\r\n                                if (bindingHandlerThatControlsDescendantBindings !== undefined)\r\n                                    throw new Error(\"Multiple bindings (\" + bindingHandlerThatControlsDescendantBindings + \" and \" + bindingKey + \") are trying to control descendant bindings of the same element. You cannot use these bindings together on the same element.\");\r\n                                bindingHandlerThatControlsDescendantBindings = bindingKey;\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    // Run update in its own computed wrapper\r\n                    if (typeof handlerUpdateFn == \"function\") {\r\n                        ko.dependentObservable(\r\n                            function() {\r\n                                handlerUpdateFn(node, getValueAccessor(bindingKey), allBindings, bindingContext[\u0027$data\u0027], bindingContext);\r\n                            },\r\n                            null,\r\n                            { disposeWhenNodeIsRemoved: node }\r\n                        );\r\n                    }\r\n                } catch (ex) {\r\n                    ex.message = \"Unable to process binding \\\"\" + bindingKey + \": \" + bindings[bindingKey] + \"\\\"\\nMessage: \" + ex.message;\r\n                    throw ex;\r\n                }\r\n            });\r\n        }\r\n\r\n        return {\r\n            \u0027shouldBindDescendants\u0027: bindingHandlerThatControlsDescendantBindings === undefined\r\n        };\r\n    };\r\n\r\n    var storedBindingContextDomDataKey = ko.utils.domData.nextKey();\r\n    ko.storedBindingContextForNode = function (node, bindingContext) {\r\n        if (arguments.length == 2) {\r\n            ko.utils.domData.set(node, storedBindingContextDomDataKey, bindingContext);\r\n            if (bindingContext._subscribable)\r\n                bindingContext._subscribable._addNode(node);\r\n        } else {\r\n            return ko.utils.domData.get(node, storedBindingContextDomDataKey);\r\n        }\r\n    }\r\n\r\n    function getBindingContext(viewModelOrBindingContext) {\r\n        return viewModelOrBindingContext \u0026\u0026 (viewModelOrBindingContext instanceof ko.bindingContext)\r\n            ? viewModelOrBindingContext\r\n            : new ko.bindingContext(viewModelOrBindingContext);\r\n    }\r\n\r\n    ko.applyBindingAccessorsToNode = function (node, bindings, viewModelOrBindingContext) {\r\n        if (node.nodeType === 1) // If it\u0027s an element, workaround IE \u003c= 8 HTML parsing weirdness\r\n            ko.virtualElements.normaliseVirtualElementDomStructure(node);\r\n        return applyBindingsToNodeInternal(node, bindings, getBindingContext(viewModelOrBindingContext), true);\r\n    };\r\n\r\n    ko.applyBindingsToNode = function (node, bindings, viewModelOrBindingContext) {\r\n        var context = getBindingContext(viewModelOrBindingContext);\r\n        return ko.applyBindingAccessorsToNode(node, makeBindingAccessors(bindings, context, node), context);\r\n    };\r\n\r\n    ko.applyBindingsToDescendants = function(viewModelOrBindingContext, rootNode) {\r\n        if (rootNode.nodeType === 1 || rootNode.nodeType === 8)\r\n            applyBindingsToDescendantsInternal(getBindingContext(viewModelOrBindingContext), rootNode, true);\r\n    };\r\n\r\n    ko.applyBindings = function (viewModelOrBindingContext, rootNode) {\r\n        // If jQuery is loaded after Knockout, we won\u0027t initially have access to it. So save it here.\r\n        if (!jQueryInstance \u0026\u0026 window[\u0027jQuery\u0027]) {\r\n            jQueryInstance = window[\u0027jQuery\u0027];\r\n        }\r\n\r\n        if (rootNode \u0026\u0026 (rootNode.nodeType !== 1) \u0026\u0026 (rootNode.nodeType !== 8))\r\n            throw new Error(\"ko.applyBindings: first parameter should be your view model; second parameter should be a DOM node\");\r\n        rootNode = rootNode || window.document.body; // Make \"rootNode\" parameter optional\r\n\r\n        applyBindingsToNodeAndDescendantsInternal(getBindingContext(viewModelOrBindingContext), rootNode, true);\r\n    };\r\n\r\n    // Retrieving binding context from arbitrary nodes\r\n    ko.contextFor = function(node) {\r\n        // We can only do something meaningful for elements and comment nodes (in particular, not text nodes, as IE can\u0027t store domdata for them)\r\n        switch (node.nodeType) {\r\n            case 1:\r\n            case 8:\r\n                var context = ko.storedBindingContextForNode(node);\r\n                if (context) return context;\r\n                if (node.parentNode) return ko.contextFor(node.parentNode);\r\n                break;\r\n        }\r\n        return undefined;\r\n    };\r\n    ko.dataFor = function(node) {\r\n        var context = ko.contextFor(node);\r\n        return context ? context[\u0027$data\u0027] : undefined;\r\n    };\r\n\r\n    ko.exportSymbol(\u0027bindingHandlers\u0027, ko.bindingHandlers);\r\n    ko.exportSymbol(\u0027applyBindings\u0027, ko.applyBindings);\r\n    ko.exportSymbol(\u0027applyBindingsToDescendants\u0027, ko.applyBindingsToDescendants);\r\n    ko.exportSymbol(\u0027applyBindingAccessorsToNode\u0027, ko.applyBindingAccessorsToNode);\r\n    ko.exportSymbol(\u0027applyBindingsToNode\u0027, ko.applyBindingsToNode);\r\n    ko.exportSymbol(\u0027contextFor\u0027, ko.contextFor);\r\n    ko.exportSymbol(\u0027dataFor\u0027, ko.dataFor);\r\n})();\r\n(function(undefined) {\r\n    var loadingSubscribablesCache = {}, // Tracks component loads that are currently in flight\r\n        loadedDefinitionsCache = {};    // Tracks component loads that have already completed\r\n\r\n    ko.components = {\r\n        get: function(componentName, callback) {\r\n            var cachedDefinition = getObjectOwnProperty(loadedDefinitionsCache, componentName);\r\n            if (cachedDefinition) {\r\n                // It\u0027s already loaded and cached. Reuse the same definition object.\r\n                // Note that for API consistency, even cache hits complete asynchronously.\r\n                setTimeout(function() { callback(cachedDefinition) }, 0);\r\n            } else {\r\n                // Join the loading process that is already underway, or start a new one.\r\n                loadComponentAndNotify(componentName, callback);\r\n            }\r\n        },\r\n\r\n        clearCachedDefinition: function(componentName) {\r\n            delete loadedDefinitionsCache[componentName];\r\n        },\r\n\r\n        _getFirstResultFromLoaders: getFirstResultFromLoaders\r\n    };\r\n\r\n    function getObjectOwnProperty(obj, propName) {\r\n        return obj.hasOwnProperty(propName) ? obj[propName] : undefined;\r\n    }\r\n\r\n    function loadComponentAndNotify(componentName, callback) {\r\n        var subscribable = getObjectOwnProperty(loadingSubscribablesCache, componentName),\r\n            completedAsync;\r\n        if (!subscribable) {\r\n            // It\u0027s not started loading yet. Start loading, and when it\u0027s done, move it to loadedDefinitionsCache.\r\n            subscribable = loadingSubscribablesCache[componentName] = new ko.subscribable();\r\n            beginLoadingComponent(componentName, function(definition) {\r\n                loadedDefinitionsCache[componentName] = definition;\r\n                delete loadingSubscribablesCache[componentName];\r\n\r\n                // For API consistency, all loads complete asynchronously. However we want to avoid\r\n                // adding an extra setTimeout if it\u0027s unnecessary (i.e., the completion is already\r\n                // async) since setTimeout(..., 0) still takes about 16ms or more on most browsers.\r\n                if (completedAsync) {\r\n                    subscribable[\u0027notifySubscribers\u0027](definition);\r\n                } else {\r\n                    setTimeout(function() {\r\n                        subscribable[\u0027notifySubscribers\u0027](definition);\r\n                    }, 0);\r\n                }\r\n            });\r\n            completedAsync = true;\r\n        }\r\n        subscribable.subscribe(callback);\r\n    }\r\n\r\n    function beginLoadingComponent(componentName, callback) {\r\n        getFirstResultFromLoaders(\u0027getConfig\u0027, [componentName], function(config) {\r\n            if (config) {\r\n                // We have a config, so now load its definition\r\n                getFirstResultFromLoaders(\u0027loadComponent\u0027, [componentName, config], function(definition) {\r\n                    callback(definition);\r\n                });\r\n            } else {\r\n                // The component has no config - it\u0027s unknown to all the loaders.\r\n                // Note that this is not an error (e.g., a module loading error) - that would abort the\r\n                // process and this callback would not run. For this callback to run, all loaders must\r\n                // have confirmed they don\u0027t know about this component.\r\n                callback(null);\r\n            }\r\n        });\r\n    }\r\n\r\n    function getFirstResultFromLoaders(methodName, argsExceptCallback, callback, candidateLoaders) {\r\n        // On the first call in the stack, start with the full set of loaders\r\n        if (!candidateLoaders) {\r\n            candidateLoaders = ko.components[\u0027loaders\u0027].slice(0); // Use a copy, because we\u0027ll be mutating this array\r\n        }\r\n\r\n        // Try the next candidate\r\n        var currentCandidateLoader = candidateLoaders.shift();\r\n        if (currentCandidateLoader) {\r\n            var methodInstance = currentCandidateLoader[methodName];\r\n            if (methodInstance) {\r\n                var wasAborted = false,\r\n                    synchronousReturnValue = methodInstance.apply(currentCandidateLoader, argsExceptCallback.concat(function(result) {\r\n                        if (wasAborted) {\r\n                            callback(null);\r\n                        } else if (result !== null) {\r\n                            // This candidate returned a value. Use it.\r\n                            callback(result);\r\n                        } else {\r\n                            // Try the next candidate\r\n                            getFirstResultFromLoaders(methodName, argsExceptCallback, callback, candidateLoaders);\r\n                        }\r\n                    }));\r\n\r\n                // Currently, loaders may not return anything synchronously. This leaves open the possibility\r\n                // that we\u0027ll extend the API to support synchronous return values in the future. It won\u0027t be\r\n                // a breaking change, because currently no loader is allowed to return anything except undefined.\r\n                if (synchronousReturnValue !== undefined) {\r\n                    wasAborted = true;\r\n\r\n                    // Method to suppress exceptions will remain undocumented. This is only to keep\r\n                    // KO\u0027s specs running tidily, since we can observe the loading got aborted without\r\n                    // having exceptions cluttering up the console too.\r\n                    if (!currentCandidateLoader[\u0027suppressLoaderExceptions\u0027]) {\r\n                        throw new Error(\u0027Component loaders must supply values by invoking the callback, not by returning values synchronously.\u0027);\r\n                    }\r\n                }\r\n            } else {\r\n                // This candidate doesn\u0027t have the relevant handler. Synchronously move on to the next one.\r\n                getFirstResultFromLoaders(methodName, argsExceptCallback, callback, candidateLoaders);\r\n            }\r\n        } else {\r\n            // No candidates returned a value\r\n            callback(null);\r\n        }\r\n    }\r\n\r\n    // Reference the loaders via string name so it\u0027s possible for developers\r\n    // to replace the whole array by assigning to ko.components.loaders\r\n    ko.components[\u0027loaders\u0027] = [];\r\n\r\n    ko.exportSymbol(\u0027components\u0027, ko.components);\r\n    ko.exportSymbol(\u0027components.get\u0027, ko.components.get);\r\n    ko.exportSymbol(\u0027components.clearCachedDefinition\u0027, ko.components.clearCachedDefinition);\r\n})();\r\n(function(undefined) {\r\n\r\n    // The default loader is responsible for two things:\r\n    // 1. Maintaining the default in-memory registry of component configuration objects\r\n    //    (i.e., the thing you\u0027re writing to when you call ko.components.register(someName, ...))\r\n    // 2. Answering requests for components by fetching configuration objects\r\n    //    from that default in-memory registry and resolving them into standard\r\n    //    component definition objects (of the form { createViewModel: ..., template: ... })\r\n    // Custom loaders may override either of these facilities, i.e.,\r\n    // 1. To supply configuration objects from some other source (e.g., conventions)\r\n    // 2. Or, to resolve configuration objects by loading viewmodels/templates via arbitrary logic.\r\n\r\n    var defaultConfigRegistry = {};\r\n\r\n    ko.components.register = function(componentName, config) {\r\n        if (!config) {\r\n            throw new Error(\u0027Invalid configuration for \u0027 + componentName);\r\n        }\r\n\r\n        if (ko.components.isRegistered(componentName)) {\r\n            throw new Error(\u0027Component \u0027 + componentName + \u0027 is already registered\u0027);\r\n        }\r\n\r\n        defaultConfigRegistry[componentName] = config;\r\n    }\r\n\r\n    ko.components.isRegistered = function(componentName) {\r\n        return componentName in defaultConfigRegistry;\r\n    }\r\n\r\n    ko.components.unregister = function(componentName) {\r\n        delete defaultConfigRegistry[componentName];\r\n        ko.components.clearCachedDefinition(componentName);\r\n    }\r\n\r\n    ko.components.defaultLoader = {\r\n        \u0027getConfig\u0027: function(componentName, callback) {\r\n            var result = defaultConfigRegistry.hasOwnProperty(componentName)\r\n                ? defaultConfigRegistry[componentName]\r\n                : null;\r\n            callback(result);\r\n        },\r\n\r\n        \u0027loadComponent\u0027: function(componentName, config, callback) {\r\n            var errorCallback = makeErrorCallback(componentName);\r\n            possiblyGetConfigFromAmd(errorCallback, config, function(loadedConfig) {\r\n                resolveConfig(componentName, errorCallback, loadedConfig, callback);\r\n            });\r\n        },\r\n\r\n        \u0027loadTemplate\u0027: function(componentName, templateConfig, callback) {\r\n            resolveTemplate(makeErrorCallback(componentName), templateConfig, callback);\r\n        },\r\n\r\n        \u0027loadViewModel\u0027: function(componentName, viewModelConfig, callback) {\r\n            resolveViewModel(makeErrorCallback(componentName), viewModelConfig, callback);\r\n        }\r\n    };\r\n\r\n    var createViewModelKey = \u0027createViewModel\u0027;\r\n\r\n    // Takes a config object of the form { template: ..., viewModel: ... }, and asynchronously convert it\r\n    // into the standard component definition format:\r\n    //    { template: \u003cArrayOfDomNodes\u003e, createViewModel: function(params, componentInfo) { ... } }.\r\n    // Since both template and viewModel may need to be resolved asynchronously, both tasks are performed\r\n    // in parallel, and the results joined when both are ready. We don\u0027t depend on any promises infrastructure,\r\n    // so this is implemented manually below.\r\n    function resolveConfig(componentName, errorCallback, config, callback) {\r\n        var result = {},\r\n            makeCallBackWhenZero = 2,\r\n            tryIssueCallback = function() {\r\n                if (--makeCallBackWhenZero === 0) {\r\n                    callback(result);\r\n                }\r\n            },\r\n            templateConfig = config[\u0027template\u0027],\r\n            viewModelConfig = config[\u0027viewModel\u0027];\r\n\r\n        if (templateConfig) {\r\n            possiblyGetConfigFromAmd(errorCallback, templateConfig, function(loadedConfig) {\r\n                ko.components._getFirstResultFromLoaders(\u0027loadTemplate\u0027, [componentName, loadedConfig], function(resolvedTemplate) {\r\n                    result[\u0027template\u0027] = resolvedTemplate;\r\n                    tryIssueCallback();\r\n                });\r\n            });\r\n        } else {\r\n            tryIssueCallback();\r\n        }\r\n\r\n        if (viewModelConfig) {\r\n            possiblyGetConfigFromAmd(errorCallback, viewModelConfig, function(loadedConfig) {\r\n                ko.components._getFirstResultFromLoaders(\u0027loadViewModel\u0027, [componentName, loadedConfig], function(resolvedViewModel) {\r\n                    result[createViewModelKey] = resolvedViewModel;\r\n                    tryIssueCallback();\r\n                });\r\n            });\r\n        } else {\r\n            tryIssueCallback();\r\n        }\r\n    }\r\n\r\n    function resolveTemplate(errorCallback, templateConfig, callback) {\r\n        if (typeof templateConfig === \u0027string\u0027) {\r\n            // Markup - parse it\r\n            callback(ko.utils.parseHtmlFragment(templateConfig));\r\n        } else if (templateConfig instanceof Array) {\r\n            // Assume already an array of DOM nodes - pass through unchanged\r\n            callback(templateConfig);\r\n        } else if (isDocumentFragment(templateConfig)) {\r\n            // Document fragment - use its child nodes\r\n            callback(ko.utils.makeArray(templateConfig.childNodes));\r\n        } else if (templateConfig[\u0027element\u0027]) {\r\n            var element = templateConfig[\u0027element\u0027];\r\n            if (isDomElement(element)) {\r\n                // Element instance - copy its child nodes\r\n                callback(cloneNodesFromTemplateSourceElement(element));\r\n            } else if (typeof element === \u0027string\u0027) {\r\n                // Element ID - find it, then copy its child nodes\r\n                var elemInstance = document.getElementById(element);\r\n                if (elemInstance) {\r\n                    callback(cloneNodesFromTemplateSourceElement(elemInstance));\r\n                } else {\r\n                    errorCallback(\u0027Cannot find element with ID \u0027 + element);\r\n                }\r\n            } else {\r\n                errorCallback(\u0027Unknown element type: \u0027 + element);\r\n            }\r\n        } else {\r\n            errorCallback(\u0027Unknown template value: \u0027 + templateConfig);\r\n        }\r\n    }\r\n\r\n    function resolveViewModel(errorCallback, viewModelConfig, callback) {\r\n        if (typeof viewModelConfig === \u0027function\u0027) {\r\n            // Constructor - convert to standard factory function format\r\n            // By design, this does *not* supply componentInfo to the constructor, as the intent is that\r\n            // componentInfo contains non-viewmodel data (e.g., the component\u0027s element) that should only\r\n            // be used in factory functions, not viewmodel constructors.\r\n            callback(function (params /*, componentInfo */) {\r\n                return new viewModelConfig(params);\r\n            });\r\n        } else if (typeof viewModelConfig[createViewModelKey] === \u0027function\u0027) {\r\n            // Already a factory function - use it as-is\r\n            callback(viewModelConfig[createViewModelKey]);\r\n        } else if (\u0027instance\u0027 in viewModelConfig) {\r\n            // Fixed object instance - promote to createViewModel format for API consistency\r\n            var fixedInstance = viewModelConfig[\u0027instance\u0027];\r\n            callback(function (params, componentInfo) {\r\n                return fixedInstance;\r\n            });\r\n        } else if (\u0027viewModel\u0027 in viewModelConfig) {\r\n            // Resolved AMD module whose value is of the form { viewModel: ... }\r\n            resolveViewModel(errorCallback, viewModelConfig[\u0027viewModel\u0027], callback);\r\n        } else {\r\n            errorCallback(\u0027Unknown viewModel value: \u0027 + viewModelConfig);\r\n        }\r\n    }\r\n\r\n    function cloneNodesFromTemplateSourceElement(elemInstance) {\r\n        switch (ko.utils.tagNameLower(elemInstance)) {\r\n            case \u0027script\u0027:\r\n                return ko.utils.parseHtmlFragment(elemInstance.text);\r\n            case \u0027textarea\u0027:\r\n                return ko.utils.parseHtmlFragment(elemInstance.value);\r\n            case \u0027template\u0027:\r\n                // For browsers with proper \u003ctemplate\u003e element support (i.e., where the .content property\r\n                // gives a document fragment), use that document fragment.\r\n                if (isDocumentFragment(elemInstance.content)) {\r\n                    return ko.utils.cloneNodes(elemInstance.content.childNodes);\r\n                }\r\n        }\r\n\r\n        // Regular elements such as \u003cdiv\u003e, and \u003ctemplate\u003e elements on old browsers that don\u0027t really\r\n        // understand \u003ctemplate\u003e and just treat it as a regular container\r\n        return ko.utils.cloneNodes(elemInstance.childNodes);\r\n    }\r\n\r\n    function isDomElement(obj) {\r\n        if (window[\u0027HTMLElement\u0027]) {\r\n            return obj instanceof HTMLElement;\r\n        } else {\r\n            return obj \u0026\u0026 obj.tagName \u0026\u0026 obj.nodeType === 1;\r\n        }\r\n    }\r\n\r\n    function isDocumentFragment(obj) {\r\n        if (window[\u0027DocumentFragment\u0027]) {\r\n            return obj instanceof DocumentFragment;\r\n        } else {\r\n            return obj \u0026\u0026 obj.nodeType === 11;\r\n        }\r\n    }\r\n\r\n    function possiblyGetConfigFromAmd(errorCallback, config, callback) {\r\n        if (typeof config[\u0027require\u0027] === \u0027string\u0027) {\r\n            // The config is the value of an AMD module\r\n            if (require || window[\u0027require\u0027]) {\r\n                (require || window[\u0027require\u0027])([config[\u0027require\u0027]], callback);\r\n            } else {\r\n                errorCallback(\u0027Uses require, but no AMD loader is present\u0027);\r\n            }\r\n        } else {\r\n            callback(config);\r\n        }\r\n    }\r\n\r\n    function makeErrorCallback(componentName) {\r\n        return function (message) {\r\n            throw new Error(\u0027Component \\\u0027\u0027 + componentName + \u0027\\\u0027: \u0027 + message);\r\n        };\r\n    }\r\n\r\n    ko.exportSymbol(\u0027components.register\u0027, ko.components.register);\r\n    ko.exportSymbol(\u0027components.isRegistered\u0027, ko.components.isRegistered);\r\n    ko.exportSymbol(\u0027components.unregister\u0027, ko.components.unregister);\r\n\r\n    // Expose the default loader so that developers can directly ask it for configuration\r\n    // or to resolve configuration\r\n    ko.exportSymbol(\u0027components.defaultLoader\u0027, ko.components.defaultLoader);\r\n\r\n    // By default, the default loader is the only registered component loader\r\n    ko.components[\u0027loaders\u0027].push(ko.components.defaultLoader);\r\n\r\n    // Privately expose the underlying config registry for use in old-IE shim\r\n    ko.components._allRegisteredComponents = defaultConfigRegistry;\r\n})();\r\n(function (undefined) {\r\n    // Overridable API for determining which component name applies to a given node. By overriding this,\r\n    // you can for example map specific tagNames to components that are not preregistered.\r\n    ko.components[\u0027getComponentNameForNode\u0027] = function(node) {\r\n        var tagNameLower = ko.utils.tagNameLower(node);\r\n        return ko.components.isRegistered(tagNameLower) \u0026\u0026 tagNameLower;\r\n    };\r\n\r\n    ko.components.addBindingsForCustomElement = function(allBindings, node, bindingContext, valueAccessors) {\r\n        // Determine if it\u0027s really a custom element matching a component\r\n        if (node.nodeType === 1) {\r\n            var componentName = ko.components[\u0027getComponentNameForNode\u0027](node);\r\n            if (componentName) {\r\n                // It does represent a component, so add a component binding for it\r\n                allBindings = allBindings || {};\r\n\r\n                if (allBindings[\u0027component\u0027]) {\r\n                    // Avoid silently overwriting some other \u0027component\u0027 binding that may already be on the element\r\n                    throw new Error(\u0027Cannot use the \"component\" binding on a custom element matching a component\u0027);\r\n                }\r\n\r\n                var componentBindingValue = { \u0027name\u0027: componentName, \u0027params\u0027: getComponentParamsFromCustomElement(node, bindingContext) };\r\n\r\n                allBindings[\u0027component\u0027] = valueAccessors\r\n                    ? function() { return componentBindingValue; }\r\n                    : componentBindingValue;\r\n            }\r\n        }\r\n\r\n        return allBindings;\r\n    }\r\n\r\n    var nativeBindingProviderInstance = new ko.bindingProvider();\r\n\r\n    function getComponentParamsFromCustomElement(elem, bindingContext) {\r\n        var paramsAttribute = elem.getAttribute(\u0027params\u0027);\r\n\r\n        if (paramsAttribute) {\r\n            var params = nativeBindingProviderInstance[\u0027parseBindingsString\u0027](paramsAttribute, bindingContext, elem, { \u0027valueAccessors\u0027: true, \u0027bindingParams\u0027: true }),\r\n                rawParamComputedValues = ko.utils.objectMap(params, function(paramValue, paramName) {\r\n                    return ko.computed(paramValue, null, { disposeWhenNodeIsRemoved: elem });\r\n                }),\r\n                result = ko.utils.objectMap(rawParamComputedValues, function(paramValueComputed, paramName) {\r\n                    // Does the evaluation of the parameter value unwrap any observables?\r\n                    if (!paramValueComputed.isActive()) {\r\n                        // No it doesn\u0027t, so there\u0027s no need for any computed wrapper. Just pass through the supplied value directly.\r\n                        // Example: \"someVal: firstName, age: 123\" (whether or not firstName is an observable/computed)\r\n                        return paramValueComputed.peek();\r\n                    } else {\r\n                        // Yes it does. Supply a computed property that unwraps both the outer (binding expression)\r\n                        // level of observability, and any inner (resulting model value) level of observability.\r\n                        // This means the component doesn\u0027t have to worry about multiple unwrapping.\r\n                        return ko.computed(function() {\r\n                            return ko.utils.unwrapObservable(paramValueComputed());\r\n                        }, null, { disposeWhenNodeIsRemoved: elem });\r\n                    }\r\n                });\r\n\r\n            // Give access to the raw computeds, as long as that wouldn\u0027t overwrite any custom param also called \u0027$raw\u0027\r\n            // This is in case the developer wants to react to outer (binding) observability separately from inner\r\n            // (model value) observability, or in case the model value observable has subobservables.\r\n            if (!result.hasOwnProperty(\u0027$raw\u0027)) {\r\n                result[\u0027$raw\u0027] = rawParamComputedValues;\r\n            }\r\n\r\n            return result;\r\n        } else {\r\n            // For consistency, absence of a \"params\" attribute is treated the same as the presence of\r\n            // any empty one. Otherwise component viewmodels need special code to check whether or not\r\n            // \u0027params\u0027 or \u0027params.$raw\u0027 is null/undefined before reading subproperties, which is annoying.\r\n            return { \u0027$raw\u0027: {} };\r\n        }\r\n    }\r\n\r\n    // --------------------------------------------------------------------------------\r\n    // Compatibility code for older (pre-HTML5) IE browsers\r\n\r\n    if (ko.utils.ieVersion \u003c 9) {\r\n        // Whenever you preregister a component, enable it as a custom element in the current document\r\n        ko.components[\u0027register\u0027] = (function(originalFunction) {\r\n            return function(componentName) {\r\n                document.createElement(componentName); // Allows IE\u003c9 to parse markup containing the custom element\r\n                return originalFunction.apply(this, arguments);\r\n            }\r\n        })(ko.components[\u0027register\u0027]);\r\n\r\n        // Whenever you create a document fragment, enable all preregistered component names as custom elements\r\n        // This is needed to make innerShiv/jQuery HTML parsing correctly handle the custom elements\r\n        document.createDocumentFragment = (function(originalFunction) {\r\n            return function() {\r\n                var newDocFrag = originalFunction(),\r\n                    allComponents = ko.components._allRegisteredComponents;\r\n                for (var componentName in allComponents) {\r\n                    if (allComponents.hasOwnProperty(componentName)) {\r\n                        newDocFrag.createElement(componentName);\r\n                    }\r\n                }\r\n                return newDocFrag;\r\n            };\r\n        })(document.createDocumentFragment);\r\n    }\r\n})();(function(undefined) {\r\n\r\n    var componentLoadingOperationUniqueId = 0;\r\n\r\n    ko.bindingHandlers[\u0027component\u0027] = {\r\n        \u0027init\u0027: function(element, valueAccessor, ignored1, ignored2, bindingContext) {\r\n            var currentViewModel,\r\n                currentLoadingOperationId,\r\n                disposeAssociatedComponentViewModel = function () {\r\n                    var currentViewModelDispose = currentViewModel \u0026\u0026 currentViewModel[\u0027dispose\u0027];\r\n                    if (typeof currentViewModelDispose === \u0027function\u0027) {\r\n                        currentViewModelDispose.call(currentViewModel);\r\n                    }\r\n\r\n                    // Any in-flight loading operation is no longer relevant, so make sure we ignore its completion\r\n                    currentLoadingOperationId = null;\r\n                };\r\n\r\n            ko.utils.domNodeDisposal.addDisposeCallback(element, disposeAssociatedComponentViewModel);\r\n\r\n            ko.computed(function () {\r\n                var value = ko.utils.unwrapObservable(valueAccessor()),\r\n                    componentName, componentParams;\r\n\r\n                if (typeof value === \u0027string\u0027) {\r\n                    componentName = value;\r\n                } else {\r\n                    componentName = ko.utils.unwrapObservable(value[\u0027name\u0027]);\r\n                    componentParams = ko.utils.unwrapObservable(value[\u0027params\u0027]);\r\n                }\r\n\r\n                if (!componentName) {\r\n                    throw new Error(\u0027No component name specified\u0027);\r\n                }\r\n\r\n                var loadingOperationId = currentLoadingOperationId = ++componentLoadingOperationUniqueId;\r\n                ko.components.get(componentName, function(componentDefinition) {\r\n                    // If this is not the current load operation for this element, ignore it.\r\n                    if (currentLoadingOperationId !== loadingOperationId) {\r\n                        return;\r\n                    }\r\n\r\n                    // Clean up previous state\r\n                    disposeAssociatedComponentViewModel();\r\n\r\n                    // Instantiate and bind new component. Implicitly this cleans any old DOM nodes.\r\n                    if (!componentDefinition) {\r\n                        throw new Error(\u0027Unknown component \\\u0027\u0027 + componentName + \u0027\\\u0027\u0027);\r\n                    }\r\n                    cloneTemplateIntoElement(componentName, componentDefinition, element);\r\n                    var componentViewModel = createViewModel(componentDefinition, element, componentParams),\r\n                        childBindingContext = bindingContext[\u0027createChildContext\u0027](componentViewModel);\r\n                    currentViewModel = componentViewModel;\r\n                    ko.applyBindingsToDescendants(childBindingContext, element);\r\n                });\r\n            }, null, { disposeWhenNodeIsRemoved: element });\r\n\r\n            return { \u0027controlsDescendantBindings\u0027: true };\r\n        }\r\n    };\r\n\r\n    ko.virtualElements.allowedBindings[\u0027component\u0027] = true;\r\n\r\n    function cloneTemplateIntoElement(componentName, componentDefinition, element) {\r\n        var template = componentDefinition[\u0027template\u0027];\r\n        if (!template) {\r\n            throw new Error(\u0027Component \\\u0027\u0027 + componentName + \u0027\\\u0027 has no template\u0027);\r\n        }\r\n\r\n        var clonedNodesArray = ko.utils.cloneNodes(template);\r\n        ko.virtualElements.setDomNodeChildren(element, clonedNodesArray);\r\n    }\r\n\r\n    function createViewModel(componentDefinition, element, componentParams) {\r\n        var componentViewModelFactory = componentDefinition[\u0027createViewModel\u0027];\r\n        return componentViewModelFactory\r\n            ? componentViewModelFactory.call(componentDefinition, componentParams, { element: element })\r\n            : componentParams; // Template-only component\r\n    }\r\n\r\n})();\r\nvar attrHtmlToJavascriptMap = { \u0027class\u0027: \u0027className\u0027, \u0027for\u0027: \u0027htmlFor\u0027 };\r\nko.bindingHandlers[\u0027attr\u0027] = {\r\n    \u0027update\u0027: function(element, valueAccessor, allBindings) {\r\n        var value = ko.utils.unwrapObservable(valueAccessor()) || {};\r\n        ko.utils.objectForEach(value, function(attrName, attrValue) {\r\n            attrValue = ko.utils.unwrapObservable(attrValue);\r\n\r\n            // To cover cases like \"attr: { checked:someProp }\", we want to remove the attribute entirely\r\n            // when someProp is a \"no value\"-like value (strictly null, false, or undefined)\r\n            // (because the absence of the \"checked\" attr is how to mark an element as not checked, etc.)\r\n            var toRemove = (attrValue === false) || (attrValue === null) || (attrValue === undefined);\r\n            if (toRemove)\r\n                element.removeAttribute(attrName);\r\n\r\n            // In IE \u003c= 7 and IE8 Quirks Mode, you have to use the Javascript property name instead of the\r\n            // HTML attribute name for certain attributes. IE8 Standards Mode supports the correct behavior,\r\n            // but instead of figuring out the mode, we\u0027ll just set the attribute through the Javascript\r\n            // property for IE \u003c= 8.\r\n            if (ko.utils.ieVersion \u003c= 8 \u0026\u0026 attrName in attrHtmlToJavascriptMap) {\r\n                attrName = attrHtmlToJavascriptMap[attrName];\r\n                if (toRemove)\r\n                    element.removeAttribute(attrName);\r\n                else\r\n                    element[attrName] = attrValue;\r\n            } else if (!toRemove) {\r\n                element.setAttribute(attrName, attrValue.toString());\r\n            }\r\n\r\n            // Treat \"name\" specially - although you can think of it as an attribute, it also needs\r\n            // special handling on older versions of IE (https://github.com/SteveSanderson/knockout/pull/333)\r\n            // Deliberately being case-sensitive here because XHTML would regard \"Name\" as a different thing\r\n            // entirely, and there\u0027s no strong reason to allow for such casing in HTML.\r\n            if (attrName === \"name\") {\r\n                ko.utils.setElementName(element, toRemove ? \"\" : attrValue.toString());\r\n            }\r\n        });\r\n    }\r\n};\r\n(function() {\r\n\r\nko.bindingHandlers[\u0027checked\u0027] = {\r\n    \u0027after\u0027: [\u0027value\u0027, \u0027attr\u0027],\r\n    \u0027init\u0027: function (element, valueAccessor, allBindings) {\r\n        var checkedValue = ko.pureComputed(function() {\r\n            // Treat \"value\" like \"checkedValue\" when it is included with \"checked\" binding\r\n            if (allBindings[\u0027has\u0027](\u0027checkedValue\u0027)) {\r\n                return ko.utils.unwrapObservable(allBindings.get(\u0027checkedValue\u0027));\r\n            } else if (allBindings[\u0027has\u0027](\u0027value\u0027)) {\r\n                return ko.utils.unwrapObservable(allBindings.get(\u0027value\u0027));\r\n            }\r\n\r\n            return element.value;\r\n        });\r\n\r\n        function updateModel() {\r\n            // This updates the model value from the view value.\r\n            // It runs in response to DOM events (click) and changes in checkedValue.\r\n            var isChecked = element.checked,\r\n                elemValue = useCheckedValue ? checkedValue() : isChecked;\r\n\r\n            // When we\u0027re first setting up this computed, don\u0027t change any model state.\r\n            if (ko.computedContext.isInitial()) {\r\n                return;\r\n            }\r\n\r\n            // We can ignore unchecked radio buttons, because some other radio\r\n            // button will be getting checked, and that one can take care of updating state.\r\n            if (isRadio \u0026\u0026 !isChecked) {\r\n                return;\r\n            }\r\n\r\n            var modelValue = ko.dependencyDetection.ignore(valueAccessor);\r\n            if (isValueArray) {\r\n                if (oldElemValue !== elemValue) {\r\n                    // When we\u0027re responding to the checkedValue changing, and the element is\r\n                    // currently checked, replace the old elem value with the new elem value\r\n                    // in the model array.\r\n                    if (isChecked) {\r\n                        ko.utils.addOrRemoveItem(modelValue, elemValue, true);\r\n                        ko.utils.addOrRemoveItem(modelValue, oldElemValue, false);\r\n                    }\r\n\r\n                    oldElemValue = elemValue;\r\n                } else {\r\n                    // When we\u0027re responding to the user having checked/unchecked a checkbox,\r\n                    // add/remove the element value to the model array.\r\n                    ko.utils.addOrRemoveItem(modelValue, elemValue, isChecked);\r\n                }\r\n            } else {\r\n                ko.expressionRewriting.writeValueToProperty(modelValue, allBindings, \u0027checked\u0027, elemValue, true);\r\n            }\r\n        };\r\n\r\n        function updateView() {\r\n            // This updates the view value from the model value.\r\n            // It runs in response to changes in the bound (checked) value.\r\n            var modelValue = ko.utils.unwrapObservable(valueAccessor());\r\n\r\n            if (isValueArray) {\r\n                // When a checkbox is bound to an array, being checked represents its value being present in that array\r\n                element.checked = ko.utils.arrayIndexOf(modelValue, checkedValue()) \u003e= 0;\r\n            } else if (isCheckbox) {\r\n                // When a checkbox is bound to any other value (not an array), being checked represents the value being trueish\r\n                element.checked = modelValue;\r\n            } else {\r\n                // For radio buttons, being checked means that the radio button\u0027s value corresponds to the model value\r\n                element.checked = (checkedValue() === modelValue);\r\n            }\r\n        };\r\n\r\n        var isCheckbox = element.type == \"checkbox\",\r\n            isRadio = element.type == \"radio\";\r\n\r\n        // Only bind to check boxes and radio buttons\r\n        if (!isCheckbox \u0026\u0026 !isRadio) {\r\n            return;\r\n        }\r\n\r\n        var isValueArray = isCheckbox \u0026\u0026 (ko.utils.unwrapObservable(valueAccessor()) instanceof Array),\r\n            oldElemValue = isValueArray ? checkedValue() : undefined,\r\n            useCheckedValue = isRadio || isValueArray;\r\n\r\n        // IE 6 won\u0027t allow radio buttons to be selected unless they have a name\r\n        if (isRadio \u0026\u0026 !element.name)\r\n            ko.bindingHandlers[\u0027uniqueName\u0027][\u0027init\u0027](element, function() { return true });\r\n\r\n        // Set up two computeds to update the binding:\r\n\r\n        // The first responds to changes in the checkedValue value and to element clicks\r\n        ko.computed(updateModel, null, { disposeWhenNodeIsRemoved: element });\r\n        ko.utils.registerEventHandler(element, \"click\", updateModel);\r\n\r\n        // The second responds to changes in the model value (the one associated with the checked binding)\r\n        ko.computed(updateView, null, { disposeWhenNodeIsRemoved: element });\r\n    }\r\n};\r\nko.expressionRewriting.twoWayBindings[\u0027checked\u0027] = true;\r\n\r\nko.bindingHandlers[\u0027checkedValue\u0027] = {\r\n    \u0027update\u0027: function (element, valueAccessor) {\r\n        element.value = ko.utils.unwrapObservable(valueAccessor());\r\n    }\r\n};\r\n\r\n})();var classesWrittenByBindingKey = \u0027__ko__cssValue\u0027;\r\nko.bindingHandlers[\u0027css\u0027] = {\r\n    \u0027update\u0027: function (element, valueAccessor) {\r\n        var value = ko.utils.unwrapObservable(valueAccessor());\r\n        if (typeof value == \"object\") {\r\n            ko.utils.objectForEach(value, function(className, shouldHaveClass) {\r\n                shouldHaveClass = ko.utils.unwrapObservable(shouldHaveClass);\r\n                ko.utils.toggleDomNodeCssClass(element, className, shouldHaveClass);\r\n            });\r\n        } else {\r\n            value = String(value || \u0027\u0027); // Make sure we don\u0027t try to store or set a non-string value\r\n            ko.utils.toggleDomNodeCssClass(element, element[classesWrittenByBindingKey], false);\r\n            element[classesWrittenByBindingKey] = value;\r\n            ko.utils.toggleDomNodeCssClass(element, value, true);\r\n        }\r\n    }\r\n};\r\nko.bindingHandlers[\u0027enable\u0027] = {\r\n    \u0027update\u0027: function (element, valueAccessor) {\r\n        var value = ko.utils.unwrapObservable(valueAccessor());\r\n        if (value \u0026\u0026 element.disabled)\r\n            element.removeAttribute(\"disabled\");\r\n        else if ((!value) \u0026\u0026 (!element.disabled))\r\n            element.disabled = true;\r\n    }\r\n};\r\n\r\nko.bindingHandlers[\u0027disable\u0027] = {\r\n    \u0027update\u0027: function (element, valueAccessor) {\r\n        ko.bindingHandlers[\u0027enable\u0027][\u0027update\u0027](element, function() { return !ko.utils.unwrapObservable(valueAccessor()) });\r\n    }\r\n};\r\n// For certain common events (currently just \u0027click\u0027), allow a simplified data-binding syntax\r\n// e.g. click:handler instead of the usual full-length event:{click:handler}\r\nfunction makeEventHandlerShortcut(eventName) {\r\n    ko.bindingHandlers[eventName] = {\r\n        \u0027init\u0027: function(element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n            var newValueAccessor = function () {\r\n                var result = {};\r\n                result[eventName] = valueAccessor();\r\n                return result;\r\n            };\r\n            return ko.bindingHandlers[\u0027event\u0027][\u0027init\u0027].call(this, element, newValueAccessor, allBindings, viewModel, bindingContext);\r\n        }\r\n    }\r\n}\r\n\r\nko.bindingHandlers[\u0027event\u0027] = {\r\n    \u0027init\u0027 : function (element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n        var eventsToHandle = valueAccessor() || {};\r\n        ko.utils.objectForEach(eventsToHandle, function(eventName) {\r\n            if (typeof eventName == \"string\") {\r\n                ko.utils.registerEventHandler(element, eventName, function (event) {\r\n                    var handlerReturnValue;\r\n                    var handlerFunction = valueAccessor()[eventName];\r\n                    if (!handlerFunction)\r\n                        return;\r\n\r\n                    try {\r\n                        // Take all the event args, and prefix with the viewmodel\r\n                        var argsForHandler = ko.utils.makeArray(arguments);\r\n                        viewModel = bindingContext[\u0027$data\u0027];\r\n                        argsForHandler.unshift(viewModel);\r\n                        handlerReturnValue = handlerFunction.apply(viewModel, argsForHandler);\r\n                    } finally {\r\n                        if (handlerReturnValue !== true) { // Normally we want to prevent default action. Developer can override this be explicitly returning true.\r\n                            if (event.preventDefault)\r\n                                event.preventDefault();\r\n                            else\r\n                                event.returnValue = false;\r\n                        }\r\n                    }\r\n\r\n                    var bubble = allBindings.get(eventName + \u0027Bubble\u0027) !== false;\r\n                    if (!bubble) {\r\n                        event.cancelBubble = true;\r\n                        if (event.stopPropagation)\r\n                            event.stopPropagation();\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n};\r\n// \"foreach: someExpression\" is equivalent to \"template: { foreach: someExpression }\"\r\n// \"foreach: { data: someExpression, afterAdd: myfn }\" is equivalent to \"template: { foreach: someExpression, afterAdd: myfn }\"\r\nko.bindingHandlers[\u0027foreach\u0027] = {\r\n    makeTemplateValueAccessor: function(valueAccessor) {\r\n        return function() {\r\n            var modelValue = valueAccessor(),\r\n                unwrappedValue = ko.utils.peekObservable(modelValue);    // Unwrap without setting a dependency here\r\n\r\n            // If unwrappedValue is the array, pass in the wrapped value on its own\r\n            // The value will be unwrapped and tracked within the template binding\r\n            // (See https://github.com/SteveSanderson/knockout/issues/523)\r\n            if ((!unwrappedValue) || typeof unwrappedValue.length == \"number\")\r\n                return { \u0027foreach\u0027: modelValue, \u0027templateEngine\u0027: ko.nativeTemplateEngine.instance };\r\n\r\n            // If unwrappedValue.data is the array, preserve all relevant options and unwrap again value so we get updates\r\n            ko.utils.unwrapObservable(modelValue);\r\n            return {\r\n                \u0027foreach\u0027: unwrappedValue[\u0027data\u0027],\r\n                \u0027as\u0027: unwrappedValue[\u0027as\u0027],\r\n                \u0027includeDestroyed\u0027: unwrappedValue[\u0027includeDestroyed\u0027],\r\n                \u0027afterAdd\u0027: unwrappedValue[\u0027afterAdd\u0027],\r\n                \u0027beforeRemove\u0027: unwrappedValue[\u0027beforeRemove\u0027],\r\n                \u0027afterRender\u0027: unwrappedValue[\u0027afterRender\u0027],\r\n                \u0027beforeMove\u0027: unwrappedValue[\u0027beforeMove\u0027],\r\n                \u0027afterMove\u0027: unwrappedValue[\u0027afterMove\u0027],\r\n                \u0027templateEngine\u0027: ko.nativeTemplateEngine.instance\r\n            };\r\n        };\r\n    },\r\n    \u0027init\u0027: function(element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n        return ko.bindingHandlers[\u0027template\u0027][\u0027init\u0027](element, ko.bindingHandlers[\u0027foreach\u0027].makeTemplateValueAccessor(valueAccessor));\r\n    },\r\n    \u0027update\u0027: function(element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n        return ko.bindingHandlers[\u0027template\u0027][\u0027update\u0027](element, ko.bindingHandlers[\u0027foreach\u0027].makeTemplateValueAccessor(valueAccessor), allBindings, viewModel, bindingContext);\r\n    }\r\n};\r\nko.expressionRewriting.bindingRewriteValidators[\u0027foreach\u0027] = false; // Can\u0027t rewrite control flow bindings\r\nko.virtualElements.allowedBindings[\u0027foreach\u0027] = true;\r\nvar hasfocusUpdatingProperty = \u0027__ko_hasfocusUpdating\u0027;\r\nvar hasfocusLastValue = \u0027__ko_hasfocusLastValue\u0027;\r\nko.bindingHandlers[\u0027hasfocus\u0027] = {\r\n    \u0027init\u0027: function(element, valueAccessor, allBindings) {\r\n        var handleElementFocusChange = function(isFocused) {\r\n            // Where possible, ignore which event was raised and determine focus state using activeElement,\r\n            // as this avoids phantom focus/blur events raised when changing tabs in modern browsers.\r\n            // However, not all KO-targeted browsers (Firefox 2) support activeElement. For those browsers,\r\n            // prevent a loss of focus when changing tabs/windows by setting a flag that prevents hasfocus\r\n            // from calling \u0027blur()\u0027 on the element when it loses focus.\r\n            // Discussion at https://github.com/SteveSanderson/knockout/pull/352\r\n            element[hasfocusUpdatingProperty] = true;\r\n            var ownerDoc = element.ownerDocument;\r\n            if (\"activeElement\" in ownerDoc) {\r\n                var active;\r\n                try {\r\n                    active = ownerDoc.activeElement;\r\n                } catch(e) {\r\n                    // IE9 throws if you access activeElement during page load (see issue #703)\r\n                    active = ownerDoc.body;\r\n                }\r\n                isFocused = (active === element);\r\n            }\r\n            var modelValue = valueAccessor();\r\n            ko.expressionRewriting.writeValueToProperty(modelValue, allBindings, \u0027hasfocus\u0027, isFocused, true);\r\n\r\n            //cache the latest value, so we can avoid unnecessarily calling focus/blur in the update function\r\n            element[hasfocusLastValue] = isFocused;\r\n            element[hasfocusUpdatingProperty] = false;\r\n        };\r\n        var handleElementFocusIn = handleElementFocusChange.bind(null, true);\r\n        var handleElementFocusOut = handleElementFocusChange.bind(null, false);\r\n\r\n        ko.utils.registerEventHandler(element, \"focus\", handleElementFocusIn);\r\n        ko.utils.registerEventHandler(element, \"focusin\", handleElementFocusIn); // For IE\r\n        ko.utils.registerEventHandler(element, \"blur\",  handleElementFocusOut);\r\n        ko.utils.registerEventHandler(element, \"focusout\",  handleElementFocusOut); // For IE\r\n    },\r\n    \u0027update\u0027: function(element, valueAccessor) {\r\n        var value = !!ko.utils.unwrapObservable(valueAccessor()); //force boolean to compare with last value\r\n        if (!element[hasfocusUpdatingProperty] \u0026\u0026 element[hasfocusLastValue] !== value) {\r\n            value ? element.focus() : element.blur();\r\n            ko.dependencyDetection.ignore(ko.utils.triggerEvent, null, [element, value ? \"focusin\" : \"focusout\"]); // For IE, which doesn\u0027t reliably fire \"focus\" or \"blur\" events synchronously\r\n        }\r\n    }\r\n};\r\nko.expressionRewriting.twoWayBindings[\u0027hasfocus\u0027] = true;\r\n\r\nko.bindingHandlers[\u0027hasFocus\u0027] = ko.bindingHandlers[\u0027hasfocus\u0027]; // Make \"hasFocus\" an alias\r\nko.expressionRewriting.twoWayBindings[\u0027hasFocus\u0027] = true;\r\nko.bindingHandlers[\u0027html\u0027] = {\r\n    \u0027init\u0027: function() {\r\n        // Prevent binding on the dynamically-injected HTML (as developers are unlikely to expect that, and it has security implications)\r\n        return { \u0027controlsDescendantBindings\u0027: true };\r\n    },\r\n    \u0027update\u0027: function (element, valueAccessor) {\r\n        // setHtml will unwrap the value if needed\r\n        ko.utils.setHtml(element, valueAccessor());\r\n    }\r\n};\r\n// Makes a binding like with or if\r\nfunction makeWithIfBinding(bindingKey, isWith, isNot, makeContextCallback) {\r\n    ko.bindingHandlers[bindingKey] = {\r\n        \u0027init\u0027: function(element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n            var didDisplayOnLastUpdate,\r\n                savedNodes;\r\n            ko.computed(function() {\r\n                var dataValue = ko.utils.unwrapObservable(valueAccessor()),\r\n                    shouldDisplay = !isNot !== !dataValue, // equivalent to isNot ? !dataValue : !!dataValue\r\n                    isFirstRender = !savedNodes,\r\n                    needsRefresh = isFirstRender || isWith || (shouldDisplay !== didDisplayOnLastUpdate);\r\n\r\n                if (needsRefresh) {\r\n                    // Save a copy of the inner nodes on the initial update, but only if we have dependencies.\r\n                    if (isFirstRender \u0026\u0026 ko.computedContext.getDependenciesCount()) {\r\n                        savedNodes = ko.utils.cloneNodes(ko.virtualElements.childNodes(element), true /* shouldCleanNodes */);\r\n                    }\r\n\r\n                    if (shouldDisplay) {\r\n                        if (!isFirstRender) {\r\n                            ko.virtualElements.setDomNodeChildren(element, ko.utils.cloneNodes(savedNodes));\r\n                        }\r\n                        ko.applyBindingsToDescendants(makeContextCallback ? makeContextCallback(bindingContext, dataValue) : bindingContext, element);\r\n                    } else {\r\n                        ko.virtualElements.emptyNode(element);\r\n                    }\r\n\r\n                    didDisplayOnLastUpdate = shouldDisplay;\r\n                }\r\n            }, null, { disposeWhenNodeIsRemoved: element });\r\n            return { \u0027controlsDescendantBindings\u0027: true };\r\n        }\r\n    };\r\n    ko.expressionRewriting.bindingRewriteValidators[bindingKey] = false; // Can\u0027t rewrite control flow bindings\r\n    ko.virtualElements.allowedBindings[bindingKey] = true;\r\n}\r\n\r\n// Construct the actual binding handlers\r\nmakeWithIfBinding(\u0027if\u0027);\r\nmakeWithIfBinding(\u0027ifnot\u0027, false /* isWith */, true /* isNot */);\r\nmakeWithIfBinding(\u0027with\u0027, true /* isWith */, false /* isNot */,\r\n    function(bindingContext, dataValue) {\r\n        return bindingContext[\u0027createChildContext\u0027](dataValue);\r\n    }\r\n);\r\nvar captionPlaceholder = {};\r\nko.bindingHandlers[\u0027options\u0027] = {\r\n    \u0027init\u0027: function(element) {\r\n        if (ko.utils.tagNameLower(element) !== \"select\")\r\n            throw new Error(\"options binding applies only to SELECT elements\");\r\n\r\n        // Remove all existing \u003coption\u003es.\r\n        while (element.length \u003e 0) {\r\n            element.remove(0);\r\n        }\r\n\r\n        // Ensures that the binding processor doesn\u0027t try to bind the options\r\n        return { \u0027controlsDescendantBindings\u0027: true };\r\n    },\r\n    \u0027update\u0027: function (element, valueAccessor, allBindings) {\r\n        function selectedOptions() {\r\n            return ko.utils.arrayFilter(element.options, function (node) { return node.selected; });\r\n        }\r\n\r\n        var selectWasPreviouslyEmpty = element.length == 0;\r\n        var previousScrollTop = (!selectWasPreviouslyEmpty \u0026\u0026 element.multiple) ? element.scrollTop : null;\r\n        var unwrappedArray = ko.utils.unwrapObservable(valueAccessor());\r\n        var includeDestroyed = allBindings.get(\u0027optionsIncludeDestroyed\u0027);\r\n        var arrayToDomNodeChildrenOptions = {};\r\n        var captionValue;\r\n        var filteredArray;\r\n        var previousSelectedValues;\r\n\r\n        if (element.multiple) {\r\n            previousSelectedValues = ko.utils.arrayMap(selectedOptions(), ko.selectExtensions.readValue);\r\n        } else {\r\n            previousSelectedValues = element.selectedIndex \u003e= 0 ? [ ko.selectExtensions.readValue(element.options[element.selectedIndex]) ] : [];\r\n        }\r\n\r\n        if (unwrappedArray) {\r\n            if (typeof unwrappedArray.length == \"undefined\") // Coerce single value into array\r\n                unwrappedArray = [unwrappedArray];\r\n\r\n            // Filter out any entries marked as destroyed\r\n            filteredArray = ko.utils.arrayFilter(unwrappedArray, function(item) {\r\n                return includeDestroyed || item === undefined || item === null || !ko.utils.unwrapObservable(item[\u0027_destroy\u0027]);\r\n            });\r\n\r\n            // If caption is included, add it to the array\r\n            if (allBindings[\u0027has\u0027](\u0027optionsCaption\u0027)) {\r\n                captionValue = ko.utils.unwrapObservable(allBindings.get(\u0027optionsCaption\u0027));\r\n                // If caption value is null or undefined, don\u0027t show a caption\r\n                if (captionValue !== null \u0026\u0026 captionValue !== undefined) {\r\n                    filteredArray.unshift(captionPlaceholder);\r\n                }\r\n            }\r\n        } else {\r\n            // If a falsy value is provided (e.g. null), we\u0027ll simply empty the select element\r\n        }\r\n\r\n        function applyToObject(object, predicate, defaultValue) {\r\n            var predicateType = typeof predicate;\r\n            if (predicateType == \"function\")    // Given a function; run it against the data value\r\n                return predicate(object);\r\n            else if (predicateType == \"string\") // Given a string; treat it as a property name on the data value\r\n                return object[predicate];\r\n            else                                // Given no optionsText arg; use the data value itself\r\n                return defaultValue;\r\n        }\r\n\r\n        // The following functions can run at two different times:\r\n        // The first is when the whole array is being updated directly from this binding handler.\r\n        // The second is when an observable value for a specific array entry is updated.\r\n        // oldOptions will be empty in the first case, but will be filled with the previously generated option in the second.\r\n        var itemUpdate = false;\r\n        function optionForArrayItem(arrayEntry, index, oldOptions) {\r\n            if (oldOptions.length) {\r\n                previousSelectedValues = oldOptions[0].selected ? [ ko.selectExtensions.readValue(oldOptions[0]) ] : [];\r\n                itemUpdate = true;\r\n            }\r\n            var option = element.ownerDocument.createElement(\"option\");\r\n            if (arrayEntry === captionPlaceholder) {\r\n                ko.utils.setTextContent(option, allBindings.get(\u0027optionsCaption\u0027));\r\n                ko.selectExtensions.writeValue(option, undefined);\r\n            } else {\r\n                // Apply a value to the option element\r\n                var optionValue = applyToObject(arrayEntry, allBindings.get(\u0027optionsValue\u0027), arrayEntry);\r\n                ko.selectExtensions.writeValue(option, ko.utils.unwrapObservable(optionValue));\r\n\r\n                // Apply some text to the option element\r\n                var optionText = applyToObject(arrayEntry, allBindings.get(\u0027optionsText\u0027), optionValue);\r\n                ko.utils.setTextContent(option, optionText);\r\n            }\r\n            return [option];\r\n        }\r\n\r\n        // By using a beforeRemove callback, we delay the removal until after new items are added. This fixes a selection\r\n        // problem in IE\u003c=8 and Firefox. See https://github.com/knockout/knockout/issues/1208\r\n        arrayToDomNodeChildrenOptions[\u0027beforeRemove\u0027] =\r\n            function (option) {\r\n                element.removeChild(option);\r\n            };\r\n\r\n        function setSelectionCallback(arrayEntry, newOptions) {\r\n            // IE6 doesn\u0027t like us to assign selection to OPTION nodes before they\u0027re added to the document.\r\n            // That\u0027s why we first added them without selection. Now it\u0027s time to set the selection.\r\n            if (previousSelectedValues.length) {\r\n                var isSelected = ko.utils.arrayIndexOf(previousSelectedValues, ko.selectExtensions.readValue(newOptions[0])) \u003e= 0;\r\n                ko.utils.setOptionNodeSelectionState(newOptions[0], isSelected);\r\n\r\n                // If this option was changed from being selected during a single-item update, notify the change\r\n                if (itemUpdate \u0026\u0026 !isSelected)\r\n                    ko.dependencyDetection.ignore(ko.utils.triggerEvent, null, [element, \"change\"]);\r\n            }\r\n        }\r\n\r\n        var callback = setSelectionCallback;\r\n        if (allBindings[\u0027has\u0027](\u0027optionsAfterRender\u0027)) {\r\n            callback = function(arrayEntry, newOptions) {\r\n                setSelectionCallback(arrayEntry, newOptions);\r\n                ko.dependencyDetection.ignore(allBindings.get(\u0027optionsAfterRender\u0027), null, [newOptions[0], arrayEntry !== captionPlaceholder ? arrayEntry : undefined]);\r\n            }\r\n        }\r\n\r\n        ko.utils.setDomNodeChildrenFromArrayMapping(element, filteredArray, optionForArrayItem, arrayToDomNodeChildrenOptions, callback);\r\n\r\n        ko.dependencyDetection.ignore(function () {\r\n            if (allBindings.get(\u0027valueAllowUnset\u0027) \u0026\u0026 allBindings[\u0027has\u0027](\u0027value\u0027)) {\r\n                // The model value is authoritative, so make sure its value is the one selected\r\n                ko.selectExtensions.writeValue(element, ko.utils.unwrapObservable(allBindings.get(\u0027value\u0027)), true /* allowUnset */);\r\n            } else {\r\n                // Determine if the selection has changed as a result of updating the options list\r\n                var selectionChanged;\r\n                if (element.multiple) {\r\n                    // For a multiple-select box, compare the new selection count to the previous one\r\n                    // But if nothing was selected before, the selection can\u0027t have changed\r\n                    selectionChanged = previousSelectedValues.length \u0026\u0026 selectedOptions().length \u003c previousSelectedValues.length;\r\n                } else {\r\n                    // For a single-select box, compare the current value to the previous value\r\n                    // But if nothing was selected before or nothing is selected now, just look for a change in selection\r\n                    selectionChanged = (previousSelectedValues.length \u0026\u0026 element.selectedIndex \u003e= 0)\r\n                        ? (ko.selectExtensions.readValue(element.options[element.selectedIndex]) !== previousSelectedValues[0])\r\n                        : (previousSelectedValues.length || element.selectedIndex \u003e= 0);\r\n                }\r\n\r\n                // Ensure consistency between model value and selected option.\r\n                // If the dropdown was changed so that selection is no longer the same,\r\n                // notify the value or selectedOptions binding.\r\n                if (selectionChanged) {\r\n                    ko.utils.triggerEvent(element, \"change\");\r\n                }\r\n            }\r\n        });\r\n\r\n        // Workaround for IE bug\r\n        ko.utils.ensureSelectElementIsRenderedCorrectly(element);\r\n\r\n        if (previousScrollTop \u0026\u0026 Math.abs(previousScrollTop - element.scrollTop) \u003e 20)\r\n            element.scrollTop = previousScrollTop;\r\n    }\r\n};\r\nko.bindingHandlers[\u0027options\u0027].optionValueDomDataKey = ko.utils.domData.nextKey();\r\nko.bindingHandlers[\u0027selectedOptions\u0027] = {\r\n    \u0027after\u0027: [\u0027options\u0027, \u0027foreach\u0027],\r\n    \u0027init\u0027: function (element, valueAccessor, allBindings) {\r\n        ko.utils.registerEventHandler(element, \"change\", function () {\r\n            var value = valueAccessor(), valueToWrite = [];\r\n            ko.utils.arrayForEach(element.getElementsByTagName(\"option\"), function(node) {\r\n                if (node.selected)\r\n                    valueToWrite.push(ko.selectExtensions.readValue(node));\r\n            });\r\n            ko.expressionRewriting.writeValueToProperty(value, allBindings, \u0027selectedOptions\u0027, valueToWrite);\r\n        });\r\n    },\r\n    \u0027update\u0027: function (element, valueAccessor) {\r\n        if (ko.utils.tagNameLower(element) != \"select\")\r\n            throw new Error(\"values binding applies only to SELECT elements\");\r\n\r\n        var newValue = ko.utils.unwrapObservable(valueAccessor());\r\n        if (newValue \u0026\u0026 typeof newValue.length == \"number\") {\r\n            ko.utils.arrayForEach(element.getElementsByTagName(\"option\"), function(node) {\r\n                var isSelected = ko.utils.arrayIndexOf(newValue, ko.selectExtensions.readValue(node)) \u003e= 0;\r\n                ko.utils.setOptionNodeSelectionState(node, isSelected);\r\n            });\r\n        }\r\n    }\r\n};\r\nko.expressionRewriting.twoWayBindings[\u0027selectedOptions\u0027] = true;\r\nko.bindingHandlers[\u0027style\u0027] = {\r\n    \u0027update\u0027: function (element, valueAccessor) {\r\n        var value = ko.utils.unwrapObservable(valueAccessor() || {});\r\n        ko.utils.objectForEach(value, function(styleName, styleValue) {\r\n            styleValue = ko.utils.unwrapObservable(styleValue);\r\n\r\n            if (styleValue === null || styleValue === undefined || styleValue === false) {\r\n                // Empty string removes the value, whereas null/undefined have no effect\r\n                styleValue = \"\";\r\n            }\r\n\r\n            element.style[styleName] = styleValue;\r\n        });\r\n    }\r\n};\r\nko.bindingHandlers[\u0027submit\u0027] = {\r\n    \u0027init\u0027: function (element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n        if (typeof valueAccessor() != \"function\")\r\n            throw new Error(\"The value for a submit binding must be a function\");\r\n        ko.utils.registerEventHandler(element, \"submit\", function (event) {\r\n            var handlerReturnValue;\r\n            var value = valueAccessor();\r\n            try { handlerReturnValue = value.call(bindingContext[\u0027$data\u0027], element); }\r\n            finally {\r\n                if (handlerReturnValue !== true) { // Normally we want to prevent default action. Developer can override this be explicitly returning true.\r\n                    if (event.preventDefault)\r\n                        event.preventDefault();\r\n                    else\r\n                        event.returnValue = false;\r\n                }\r\n            }\r\n        });\r\n    }\r\n};\r\nko.bindingHandlers[\u0027text\u0027] = {\r\n    \u0027init\u0027: function() {\r\n        // Prevent binding on the dynamically-injected text node (as developers are unlikely to expect that, and it has security implications).\r\n        // It should also make things faster, as we no longer have to consider whether the text node might be bindable.\r\n        return { \u0027controlsDescendantBindings\u0027: true };\r\n    },\r\n    \u0027update\u0027: function (element, valueAccessor) {\r\n        ko.utils.setTextContent(element, valueAccessor());\r\n    }\r\n};\r\nko.virtualElements.allowedBindings[\u0027text\u0027] = true;\r\n(function () {\r\n\r\nif (window \u0026\u0026 window.navigator) {\r\n    var parseVersion = function (matches) {\r\n        if (matches) {\r\n            return parseFloat(matches[1]);\r\n        }\r\n    };\r\n\r\n    // Detect various browser versions because some old versions don\u0027t fully support the \u0027input\u0027 event\r\n    var operaVersion = window.opera \u0026\u0026 window.opera.version \u0026\u0026 parseInt(window.opera.version()),\r\n        userAgent = window.navigator.userAgent,\r\n        safariVersion = parseVersion(userAgent.match(/^(?:(?!chrome).)*version\\/([^ ]*) safari/i)),\r\n        firefoxVersion = parseVersion(userAgent.match(/Firefox\\/([^ ]*)/));\r\n}\r\n\r\n// IE 8 and 9 have bugs that prevent the normal events from firing when the value changes.\r\n// But it does fire the \u0027selectionchange\u0027 event on many of those, presumably because the\r\n// cursor is moving and that counts as the selection changing. The \u0027selectionchange\u0027 event is\r\n// fired at the document level only and doesn\u0027t directly indicate which element changed. We\r\n// set up just one event handler for the document and use \u0027activeElement\u0027 to determine which\r\n// element was changed.\r\nif (ko.utils.ieVersion \u003c 10) {\r\n    var selectionChangeRegisteredName = ko.utils.domData.nextKey(),\r\n        selectionChangeHandlerName = ko.utils.domData.nextKey();\r\n    var selectionChangeHandler = function(event) {\r\n        var target = this.activeElement,\r\n            handler = target \u0026\u0026 ko.utils.domData.get(target, selectionChangeHandlerName);\r\n        if (handler) {\r\n            handler(event);\r\n        }\r\n    };\r\n    var registerForSelectionChangeEvent = function (element, handler) {\r\n        var ownerDoc = element.ownerDocument;\r\n        if (!ko.utils.domData.get(ownerDoc, selectionChangeRegisteredName)) {\r\n            ko.utils.domData.set(ownerDoc, selectionChangeRegisteredName, true);\r\n            ko.utils.registerEventHandler(ownerDoc, \u0027selectionchange\u0027, selectionChangeHandler);\r\n        }\r\n        ko.utils.domData.set(element, selectionChangeHandlerName, handler);\r\n    };\r\n}\r\n\r\nko.bindingHandlers[\u0027textInput\u0027] = {\r\n    \u0027init\u0027: function (element, valueAccessor, allBindings) {\r\n\r\n        var previousElementValue = element.value,\r\n            timeoutHandle,\r\n            elementValueBeforeEvent;\r\n\r\n        var updateModel = function (event) {\r\n            clearTimeout(timeoutHandle);\r\n            elementValueBeforeEvent = timeoutHandle = undefined;\r\n\r\n            var elementValue = element.value;\r\n            if (previousElementValue !== elementValue) {\r\n                // Provide a way for tests to know exactly which event was processed\r\n                if (DEBUG \u0026\u0026 event) element[\u0027_ko_textInputProcessedEvent\u0027] = event.type;\r\n                previousElementValue = elementValue;\r\n                ko.expressionRewriting.writeValueToProperty(valueAccessor(), allBindings, \u0027textInput\u0027, elementValue);\r\n            }\r\n        };\r\n\r\n        var deferUpdateModel = function (event) {\r\n            if (!timeoutHandle) {\r\n                // The elementValueBeforeEvent variable is set *only* during the brief gap between an\r\n                // event firing and the updateModel function running. This allows us to ignore model\r\n                // updates that are from the previous state of the element, usually due to techniques\r\n                // such as rateLimit. Such updates, if not ignored, can cause keystrokes to be lost.\r\n                elementValueBeforeEvent = element.value;\r\n                var handler = DEBUG ? updateModel.bind(element, {type: event.type}) : updateModel;\r\n                timeoutHandle = setTimeout(handler, 4);\r\n            }\r\n        };\r\n\r\n        var updateView = function () {\r\n            var modelValue = ko.utils.unwrapObservable(valueAccessor());\r\n\r\n            if (modelValue === null || modelValue === undefined) {\r\n                modelValue = \u0027\u0027;\r\n            }\r\n\r\n            if (elementValueBeforeEvent !== undefined \u0026\u0026 modelValue === elementValueBeforeEvent) {\r\n                setTimeout(updateView, 4);\r\n                return;\r\n            }\r\n\r\n            // Update the element only if the element and model are different. On some browsers, updating the value\r\n            // will move the cursor to the end of the input, which would be bad while the user is typing.\r\n            if (element.value !== modelValue) {\r\n                previousElementValue = modelValue;  // Make sure we ignore events (propertychange) that result from updating the value\r\n                element.value = modelValue;\r\n            }\r\n        };\r\n\r\n        var onEvent = function (event, handler) {\r\n            ko.utils.registerEventHandler(element, event, handler);\r\n        };\r\n\r\n        if (DEBUG \u0026\u0026 ko.bindingHandlers[\u0027textInput\u0027][\u0027_forceUpdateOn\u0027]) {\r\n            // Provide a way for tests to specify exactly which events are bound\r\n            ko.utils.arrayForEach(ko.bindingHandlers[\u0027textInput\u0027][\u0027_forceUpdateOn\u0027], function(eventName) {\r\n                if (eventName.slice(0,5) == \u0027after\u0027) {\r\n                    onEvent(eventName.slice(5), deferUpdateModel);\r\n                } else {\r\n                    onEvent(eventName, updateModel);\r\n                }\r\n            });\r\n        } else {\r\n            if (ko.utils.ieVersion \u003c 10) {\r\n                // Internet Explorer \u003c= 8 doesn\u0027t support the \u0027input\u0027 event, but does include \u0027propertychange\u0027 that fires whenever\r\n                // any property of an element changes. Unlike \u0027input\u0027, it also fires if a property is changed from JavaScript code,\r\n                // but that\u0027s an acceptable compromise for this binding. IE 9 does support \u0027input\u0027, but since it doesn\u0027t fire it\r\n                // when using autocomplete, we\u0027ll use \u0027propertychange\u0027 for it also.\r\n                onEvent(\u0027propertychange\u0027, function(event) {\r\n                    if (event.propertyName === \u0027value\u0027) {\r\n                        updateModel(event);\r\n                    }\r\n                });\r\n\r\n                if (ko.utils.ieVersion == 8) {\r\n                    // IE 8 has a bug where it fails to fire \u0027propertychange\u0027 on the first update following a value change from\r\n                    // JavaScript code. It also doesn\u0027t fire if you clear the entire value. To fix this, we bind to the following\r\n                    // events too.\r\n                    onEvent(\u0027keyup\u0027, updateModel);      // A single keystoke\r\n                    onEvent(\u0027keydown\u0027, updateModel);    // The first character when a key is held down\r\n                }\r\n                if (ko.utils.ieVersion \u003e= 8) {\r\n                    // Internet Explorer 9 doesn\u0027t fire the \u0027input\u0027 event when deleting text, including using\r\n                    // the backspace, delete, or ctrl-x keys, clicking the \u0027x\u0027 to clear the input, dragging text\r\n                    // out of the field, and cutting or deleting text using the context menu. \u0027selectionchange\u0027\r\n                    // can detect all of those except dragging text out of the field, for which we use \u0027dragend\u0027.\r\n                    // These are also needed in IE8 because of the bug described above.\r\n                    registerForSelectionChangeEvent(element, updateModel);  // \u0027selectionchange\u0027 covers cut, paste, drop, delete, etc.\r\n                    onEvent(\u0027dragend\u0027, deferUpdateModel);\r\n                }\r\n            } else {\r\n                // All other supported browsers support the \u0027input\u0027 event, which fires whenever the content of the element is changed\r\n                // through the user interface.\r\n                onEvent(\u0027input\u0027, updateModel);\r\n\r\n                if (safariVersion \u003c 5 \u0026\u0026 ko.utils.tagNameLower(element) === \"textarea\") {\r\n                    // Safari \u003c5 doesn\u0027t fire the \u0027input\u0027 event for \u003ctextarea\u003e elements (it does fire \u0027textInput\u0027\r\n                    // but only when typing). So we\u0027ll just catch as much as we can with keydown, cut, and paste.\r\n                    onEvent(\u0027keydown\u0027, deferUpdateModel);\r\n                    onEvent(\u0027paste\u0027, deferUpdateModel);\r\n                    onEvent(\u0027cut\u0027, deferUpdateModel);\r\n                } else if (operaVersion \u003c 11) {\r\n                    // Opera 10 doesn\u0027t always fire the \u0027input\u0027 event for cut, paste, undo \u0026 drop operations.\r\n                    // We can try to catch some of those using \u0027keydown\u0027.\r\n                    onEvent(\u0027keydown\u0027, deferUpdateModel);\r\n                } else if (firefoxVersion \u003c 4.0) {\r\n                    // Firefox \u003c= 3.6 doesn\u0027t fire the \u0027input\u0027 event when text is filled in through autocomplete\r\n                    onEvent(\u0027DOMAutoComplete\u0027, updateModel);\r\n\r\n                    // Firefox \u003c=3.5 doesn\u0027t fire the \u0027input\u0027 event when text is dropped into the input.\r\n                    onEvent(\u0027dragdrop\u0027, updateModel);       // \u003c3.5\r\n                    onEvent(\u0027drop\u0027, updateModel);           // 3.5\r\n                }\r\n            }\r\n        }\r\n\r\n        // Bind to the change event so that we can catch programmatic updates of the value that fire this event.\r\n        onEvent(\u0027change\u0027, updateModel);\r\n\r\n        ko.computed(updateView, null, { disposeWhenNodeIsRemoved: element });\r\n    }\r\n};\r\nko.expressionRewriting.twoWayBindings[\u0027textInput\u0027] = true;\r\n\r\n// textinput is an alias for textInput\r\nko.bindingHandlers[\u0027textinput\u0027] = {\r\n    // preprocess is the only way to set up a full alias\r\n    \u0027preprocess\u0027: function (value, name, addBinding) {\r\n        addBinding(\u0027textInput\u0027, value);\r\n    }\r\n};\r\n\r\n})();ko.bindingHandlers[\u0027uniqueName\u0027] = {\r\n    \u0027init\u0027: function (element, valueAccessor) {\r\n        if (valueAccessor()) {\r\n            var name = \"ko_unique_\" + (++ko.bindingHandlers[\u0027uniqueName\u0027].currentIndex);\r\n            ko.utils.setElementName(element, name);\r\n        }\r\n    }\r\n};\r\nko.bindingHandlers[\u0027uniqueName\u0027].currentIndex = 0;\r\nko.bindingHandlers[\u0027value\u0027] = {\r\n    \u0027after\u0027: [\u0027options\u0027, \u0027foreach\u0027],\r\n    \u0027init\u0027: function (element, valueAccessor, allBindings) {\r\n        // If the value binding is placed on a radio/checkbox, then just pass through to checkedValue and quit\r\n        if (element.tagName.toLowerCase() == \"input\" \u0026\u0026 (element.type == \"checkbox\" || element.type == \"radio\")) {\r\n            ko.applyBindingAccessorsToNode(element, { \u0027checkedValue\u0027: valueAccessor });\r\n            return;\r\n        }\r\n\r\n        // Always catch \"change\" event; possibly other events too if asked\r\n        var eventsToCatch = [\"change\"];\r\n        var requestedEventsToCatch = allBindings.get(\"valueUpdate\");\r\n        var propertyChangedFired = false;\r\n        var elementValueBeforeEvent = null;\r\n\r\n        if (requestedEventsToCatch) {\r\n            if (typeof requestedEventsToCatch == \"string\") // Allow both individual event names, and arrays of event names\r\n                requestedEventsToCatch = [requestedEventsToCatch];\r\n            ko.utils.arrayPushAll(eventsToCatch, requestedEventsToCatch);\r\n            eventsToCatch = ko.utils.arrayGetDistinctValues(eventsToCatch);\r\n        }\r\n\r\n        var valueUpdateHandler = function() {\r\n            elementValueBeforeEvent = null;\r\n            propertyChangedFired = false;\r\n            var modelValue = valueAccessor();\r\n            var elementValue = ko.selectExtensions.readValue(element);\r\n            ko.expressionRewriting.writeValueToProperty(modelValue, allBindings, \u0027value\u0027, elementValue);\r\n        }\r\n\r\n        // Workaround for https://github.com/SteveSanderson/knockout/issues/122\r\n        // IE doesn\u0027t fire \"change\" events on textboxes if the user selects a value from its autocomplete list\r\n        var ieAutoCompleteHackNeeded = ko.utils.ieVersion \u0026\u0026 element.tagName.toLowerCase() == \"input\" \u0026\u0026 element.type == \"text\"\r\n                                       \u0026\u0026 element.autocomplete != \"off\" \u0026\u0026 (!element.form || element.form.autocomplete != \"off\");\r\n        if (ieAutoCompleteHackNeeded \u0026\u0026 ko.utils.arrayIndexOf(eventsToCatch, \"propertychange\") == -1) {\r\n            ko.utils.registerEventHandler(element, \"propertychange\", function () { propertyChangedFired = true });\r\n            ko.utils.registerEventHandler(element, \"focus\", function () { propertyChangedFired = false });\r\n            ko.utils.registerEventHandler(element, \"blur\", function() {\r\n                if (propertyChangedFired) {\r\n                    valueUpdateHandler();\r\n                }\r\n            });\r\n        }\r\n\r\n        ko.utils.arrayForEach(eventsToCatch, function(eventName) {\r\n            // The syntax \"after\u003ceventname\u003e\" means \"run the handler asynchronously after the event\"\r\n            // This is useful, for example, to catch \"keydown\" events after the browser has updated the control\r\n            // (otherwise, ko.selectExtensions.readValue(this) will receive the control\u0027s value *before* the key event)\r\n            var handler = valueUpdateHandler;\r\n            if (ko.utils.stringStartsWith(eventName, \"after\")) {\r\n                handler = function() {\r\n                    // The elementValueBeforeEvent variable is non-null *only* during the brief gap between\r\n                    // a keyX event firing and the valueUpdateHandler running, which is scheduled to happen\r\n                    // at the earliest asynchronous opportunity. We store this temporary information so that\r\n                    // if, between keyX and valueUpdateHandler, the underlying model value changes separately,\r\n                    // we can overwrite that model value change with the value the user just typed. Otherwise,\r\n                    // techniques like rateLimit can trigger model changes at critical moments that will\r\n                    // override the user\u0027s inputs, causing keystrokes to be lost.\r\n                    elementValueBeforeEvent = ko.selectExtensions.readValue(element);\r\n                    setTimeout(valueUpdateHandler, 0);\r\n                };\r\n                eventName = eventName.substring(\"after\".length);\r\n            }\r\n            ko.utils.registerEventHandler(element, eventName, handler);\r\n        });\r\n\r\n        var updateFromModel = function () {\r\n            var newValue = ko.utils.unwrapObservable(valueAccessor());\r\n            var elementValue = ko.selectExtensions.readValue(element);\r\n\r\n            if (elementValueBeforeEvent !== null \u0026\u0026 newValue === elementValueBeforeEvent) {\r\n                setTimeout(updateFromModel, 0);\r\n                return;\r\n            }\r\n\r\n            var valueHasChanged = (newValue !== elementValue);\r\n\r\n            if (valueHasChanged) {\r\n                if (ko.utils.tagNameLower(element) === \"select\") {\r\n                    var allowUnset = allBindings.get(\u0027valueAllowUnset\u0027);\r\n                    var applyValueAction = function () {\r\n                        ko.selectExtensions.writeValue(element, newValue, allowUnset);\r\n                    };\r\n                    applyValueAction();\r\n\r\n                    if (!allowUnset \u0026\u0026 newValue !== ko.selectExtensions.readValue(element)) {\r\n                        // If you try to set a model value that can\u0027t be represented in an already-populated dropdown, reject that change,\r\n                        // because you\u0027re not allowed to have a model value that disagrees with a visible UI selection.\r\n                        ko.dependencyDetection.ignore(ko.utils.triggerEvent, null, [element, \"change\"]);\r\n                    } else {\r\n                        // Workaround for IE6 bug: It won\u0027t reliably apply values to SELECT nodes during the same execution thread\r\n                        // right after you\u0027ve changed the set of OPTION nodes on it. So for that node type, we\u0027ll schedule a second thread\r\n                        // to apply the value as well.\r\n                        setTimeout(applyValueAction, 0);\r\n                    }\r\n                } else {\r\n                    ko.selectExtensions.writeValue(element, newValue);\r\n                }\r\n            }\r\n        };\r\n\r\n        ko.computed(updateFromModel, null, { disposeWhenNodeIsRemoved: element });\r\n    },\r\n    \u0027update\u0027: function() {} // Keep for backwards compatibility with code that may have wrapped value binding\r\n};\r\nko.expressionRewriting.twoWayBindings[\u0027value\u0027] = true;\r\nko.bindingHandlers[\u0027visible\u0027] = {\r\n    \u0027update\u0027: function (element, valueAccessor) {\r\n        var value = ko.utils.unwrapObservable(valueAccessor());\r\n        var isCurrentlyVisible = !(element.style.display == \"none\");\r\n        if (value \u0026\u0026 !isCurrentlyVisible)\r\n            element.style.display = \"\";\r\n        else if ((!value) \u0026\u0026 isCurrentlyVisible)\r\n            element.style.display = \"none\";\r\n    }\r\n};\r\n// \u0027click\u0027 is just a shorthand for the usual full-length event:{click:handler}\r\nmakeEventHandlerShortcut(\u0027click\u0027);\r\n// If you want to make a custom template engine,\r\n//\r\n// [1] Inherit from this class (like ko.nativeTemplateEngine does)\r\n// [2] Override \u0027renderTemplateSource\u0027, supplying a function with this signature:\r\n//\r\n//        function (templateSource, bindingContext, options) {\r\n//            // - templateSource.text() is the text of the template you should render\r\n//            // - bindingContext.$data is the data you should pass into the template\r\n//            //   - you might also want to make bindingContext.$parent, bindingContext.$parents,\r\n//            //     and bindingContext.$root available in the template too\r\n//            // - options gives you access to any other properties set on \"data-bind: { template: options }\"\r\n//            //\r\n//            // Return value: an array of DOM nodes\r\n//        }\r\n//\r\n// [3] Override \u0027createJavaScriptEvaluatorBlock\u0027, supplying a function with this signature:\r\n//\r\n//        function (script) {\r\n//            // Return value: Whatever syntax means \"Evaluate the JavaScript statement \u0027script\u0027 and output the result\"\r\n//            //               For example, the jquery.tmpl template engine converts \u0027someScript\u0027 to \u0027${ someScript }\u0027\r\n//        }\r\n//\r\n//     This is only necessary if you want to allow data-bind attributes to reference arbitrary template variables.\r\n//     If you don\u0027t want to allow that, you can set the property \u0027allowTemplateRewriting\u0027 to false (like ko.nativeTemplateEngine does)\r\n//     and then you don\u0027t need to override \u0027createJavaScriptEvaluatorBlock\u0027.\r\n\r\nko.templateEngine = function () { };\r\n\r\nko.templateEngine.prototype[\u0027renderTemplateSource\u0027] = function (templateSource, bindingContext, options) {\r\n    throw new Error(\"Override renderTemplateSource\");\r\n};\r\n\r\nko.templateEngine.prototype[\u0027createJavaScriptEvaluatorBlock\u0027] = function (script) {\r\n    throw new Error(\"Override createJavaScriptEvaluatorBlock\");\r\n};\r\n\r\nko.templateEngine.prototype[\u0027makeTemplateSource\u0027] = function(template, templateDocument) {\r\n    // Named template\r\n    if (typeof template == \"string\") {\r\n        templateDocument = templateDocument || document;\r\n        var elem = templateDocument.getElementById(template);\r\n        if (!elem)\r\n            throw new Error(\"Cannot find template with ID \" + template);\r\n        return new ko.templateSources.domElement(elem);\r\n    } else if ((template.nodeType == 1) || (template.nodeType == 8)) {\r\n        // Anonymous template\r\n        return new ko.templateSources.anonymousTemplate(template);\r\n    } else\r\n        throw new Error(\"Unknown template type: \" + template);\r\n};\r\n\r\nko.templateEngine.prototype[\u0027renderTemplate\u0027] = function (template, bindingContext, options, templateDocument) {\r\n    var templateSource = this[\u0027makeTemplateSource\u0027](template, templateDocument);\r\n    return this[\u0027renderTemplateSource\u0027](templateSource, bindingContext, options);\r\n};\r\n\r\nko.templateEngine.prototype[\u0027isTemplateRewritten\u0027] = function (template, templateDocument) {\r\n    // Skip rewriting if requested\r\n    if (this[\u0027allowTemplateRewriting\u0027] === false)\r\n        return true;\r\n    return this[\u0027makeTemplateSource\u0027](template, templateDocument)[\u0027data\u0027](\"isRewritten\");\r\n};\r\n\r\nko.templateEngine.prototype[\u0027rewriteTemplate\u0027] = function (template, rewriterCallback, templateDocument) {\r\n    var templateSource = this[\u0027makeTemplateSource\u0027](template, templateDocument);\r\n    var rewritten = rewriterCallback(templateSource[\u0027text\u0027]());\r\n    templateSource[\u0027text\u0027](rewritten);\r\n    templateSource[\u0027data\u0027](\"isRewritten\", true);\r\n};\r\n\r\nko.exportSymbol(\u0027templateEngine\u0027, ko.templateEngine);\r\n\r\nko.templateRewriting = (function () {\r\n    var memoizeDataBindingAttributeSyntaxRegex = /(\u003c([a-z]+\\d*)(?:\\s+(?!data-bind\\s*=\\s*)[a-z0-9\\-]+(?:=(?:\\\"[^\\\"]*\\\"|\\\u0027[^\\\u0027]*\\\u0027))?)*\\s+)data-bind\\s*=\\s*([\"\u0027])([\\s\\S]*?)\\3/gi;\r\n    var memoizeVirtualContainerBindingSyntaxRegex = /\u003c!--\\s*ko\\b\\s*([\\s\\S]*?)\\s*--\u003e/g;\r\n\r\n    function validateDataBindValuesForRewriting(keyValueArray) {\r\n        var allValidators = ko.expressionRewriting.bindingRewriteValidators;\r\n        for (var i = 0; i \u003c keyValueArray.length; i++) {\r\n            var key = keyValueArray[i][\u0027key\u0027];\r\n            if (allValidators.hasOwnProperty(key)) {\r\n                var validator = allValidators[key];\r\n\r\n                if (typeof validator === \"function\") {\r\n                    var possibleErrorMessage = validator(keyValueArray[i][\u0027value\u0027]);\r\n                    if (possibleErrorMessage)\r\n                        throw new Error(possibleErrorMessage);\r\n                } else if (!validator) {\r\n                    throw new Error(\"This template engine does not support the \u0027\" + key + \"\u0027 binding within its templates\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function constructMemoizedTagReplacement(dataBindAttributeValue, tagToRetain, nodeName, templateEngine) {\r\n        var dataBindKeyValueArray = ko.expressionRewriting.parseObjectLiteral(dataBindAttributeValue);\r\n        validateDataBindValuesForRewriting(dataBindKeyValueArray);\r\n        var rewrittenDataBindAttributeValue = ko.expressionRewriting.preProcessBindings(dataBindKeyValueArray, {\u0027valueAccessors\u0027:true});\r\n\r\n        // For no obvious reason, Opera fails to evaluate rewrittenDataBindAttributeValue unless it\u0027s wrapped in an additional\r\n        // anonymous function, even though Opera\u0027s built-in debugger can evaluate it anyway. No other browser requires this\r\n        // extra indirection.\r\n        var applyBindingsToNextSiblingScript =\r\n            \"ko.__tr_ambtns(function($context,$element){return(function(){return{ \" + rewrittenDataBindAttributeValue + \" } })()},\u0027\" + nodeName.toLowerCase() + \"\u0027)\";\r\n        return templateEngine[\u0027createJavaScriptEvaluatorBlock\u0027](applyBindingsToNextSiblingScript) + tagToRetain;\r\n    }\r\n\r\n    return {\r\n        ensureTemplateIsRewritten: function (template, templateEngine, templateDocument) {\r\n            if (!templateEngine[\u0027isTemplateRewritten\u0027](template, templateDocument))\r\n                templateEngine[\u0027rewriteTemplate\u0027](template, function (htmlString) {\r\n                    return ko.templateRewriting.memoizeBindingAttributeSyntax(htmlString, templateEngine);\r\n                }, templateDocument);\r\n        },\r\n\r\n        memoizeBindingAttributeSyntax: function (htmlString, templateEngine) {\r\n            return htmlString.replace(memoizeDataBindingAttributeSyntaxRegex, function () {\r\n                return constructMemoizedTagReplacement(/* dataBindAttributeValue: */ arguments[4], /* tagToRetain: */ arguments[1], /* nodeName: */ arguments[2], templateEngine);\r\n            }).replace(memoizeVirtualContainerBindingSyntaxRegex, function() {\r\n                return constructMemoizedTagReplacement(/* dataBindAttributeValue: */ arguments[1], /* tagToRetain: */ \"\u003c!-- ko --\u003e\", /* nodeName: */ \"#comment\", templateEngine);\r\n            });\r\n        },\r\n\r\n        applyMemoizedBindingsToNextSibling: function (bindings, nodeName) {\r\n            return ko.memoization.memoize(function (domNode, bindingContext) {\r\n                var nodeToBind = domNode.nextSibling;\r\n                if (nodeToBind \u0026\u0026 nodeToBind.nodeName.toLowerCase() === nodeName) {\r\n                    ko.applyBindingAccessorsToNode(nodeToBind, bindings, bindingContext);\r\n                }\r\n            });\r\n        }\r\n    }\r\n})();\r\n\r\n\r\n// Exported only because it has to be referenced by string lookup from within rewritten template\r\nko.exportSymbol(\u0027__tr_ambtns\u0027, ko.templateRewriting.applyMemoizedBindingsToNextSibling);\r\n(function() {\r\n    // A template source represents a read/write way of accessing a template. This is to eliminate the need for template loading/saving\r\n    // logic to be duplicated in every template engine (and means they can all work with anonymous templates, etc.)\r\n    //\r\n    // Two are provided by default:\r\n    //  1. ko.templateSources.domElement       - reads/writes the text content of an arbitrary DOM element\r\n    //  2. ko.templateSources.anonymousElement - uses ko.utils.domData to read/write text *associated* with the DOM element, but\r\n    //                                           without reading/writing the actual element text content, since it will be overwritten\r\n    //                                           with the rendered template output.\r\n    // You can implement your own template source if you want to fetch/store templates somewhere other than in DOM elements.\r\n    // Template sources need to have the following functions:\r\n    //   text() \t\t\t- returns the template text from your storage location\r\n    //   text(value)\t\t- writes the supplied template text to your storage location\r\n    //   data(key)\t\t\t- reads values stored using data(key, value) - see below\r\n    //   data(key, value)\t- associates \"value\" with this template and the key \"key\". Is used to store information like \"isRewritten\".\r\n    //\r\n    // Optionally, template sources can also have the following functions:\r\n    //   nodes()            - returns a DOM element containing the nodes of this template, where available\r\n    //   nodes(value)       - writes the given DOM element to your storage location\r\n    // If a DOM element is available for a given template source, template engines are encouraged to use it in preference over text()\r\n    // for improved speed. However, all templateSources must supply text() even if they don\u0027t supply nodes().\r\n    //\r\n    // Once you\u0027ve implemented a templateSource, make your template engine use it by subclassing whatever template engine you were\r\n    // using and overriding \"makeTemplateSource\" to return an instance of your custom template source.\r\n\r\n    ko.templateSources = {};\r\n\r\n    // ---- ko.templateSources.domElement -----\r\n\r\n    ko.templateSources.domElement = function(element) {\r\n        this.domElement = element;\r\n    }\r\n\r\n    ko.templateSources.domElement.prototype[\u0027text\u0027] = function(/* valueToWrite */) {\r\n        var tagNameLower = ko.utils.tagNameLower(this.domElement),\r\n            elemContentsProperty = tagNameLower === \"script\" ? \"text\"\r\n                                 : tagNameLower === \"textarea\" ? \"value\"\r\n                                 : \"innerHTML\";\r\n\r\n        if (arguments.length == 0) {\r\n            return this.domElement[elemContentsProperty];\r\n        } else {\r\n            var valueToWrite = arguments[0];\r\n            if (elemContentsProperty === \"innerHTML\")\r\n                ko.utils.setHtml(this.domElement, valueToWrite);\r\n            else\r\n                this.domElement[elemContentsProperty] = valueToWrite;\r\n        }\r\n    };\r\n\r\n    var dataDomDataPrefix = ko.utils.domData.nextKey() + \"_\";\r\n    ko.templateSources.domElement.prototype[\u0027data\u0027] = function(key /*, valueToWrite */) {\r\n        if (arguments.length === 1) {\r\n            return ko.utils.domData.get(this.domElement, dataDomDataPrefix + key);\r\n        } else {\r\n            ko.utils.domData.set(this.domElement, dataDomDataPrefix + key, arguments[1]);\r\n        }\r\n    };\r\n\r\n    // ---- ko.templateSources.anonymousTemplate -----\r\n    // Anonymous templates are normally saved/retrieved as DOM nodes through \"nodes\".\r\n    // For compatibility, you can also read \"text\"; it will be serialized from the nodes on demand.\r\n    // Writing to \"text\" is still supported, but then the template data will not be available as DOM nodes.\r\n\r\n    var anonymousTemplatesDomDataKey = ko.utils.domData.nextKey();\r\n    ko.templateSources.anonymousTemplate = function(element) {\r\n        this.domElement = element;\r\n    }\r\n    ko.templateSources.anonymousTemplate.prototype = new ko.templateSources.domElement();\r\n    ko.templateSources.anonymousTemplate.prototype.constructor = ko.templateSources.anonymousTemplate;\r\n    ko.templateSources.anonymousTemplate.prototype[\u0027text\u0027] = function(/* valueToWrite */) {\r\n        if (arguments.length == 0) {\r\n            var templateData = ko.utils.domData.get(this.domElement, anonymousTemplatesDomDataKey) || {};\r\n            if (templateData.textData === undefined \u0026\u0026 templateData.containerData)\r\n                templateData.textData = templateData.containerData.innerHTML;\r\n            return templateData.textData;\r\n        } else {\r\n            var valueToWrite = arguments[0];\r\n            ko.utils.domData.set(this.domElement, anonymousTemplatesDomDataKey, {textData: valueToWrite});\r\n        }\r\n    };\r\n    ko.templateSources.domElement.prototype[\u0027nodes\u0027] = function(/* valueToWrite */) {\r\n        if (arguments.length == 0) {\r\n            var templateData = ko.utils.domData.get(this.domElement, anonymousTemplatesDomDataKey) || {};\r\n            return templateData.containerData;\r\n        } else {\r\n            var valueToWrite = arguments[0];\r\n            ko.utils.domData.set(this.domElement, anonymousTemplatesDomDataKey, {containerData: valueToWrite});\r\n        }\r\n    };\r\n\r\n    ko.exportSymbol(\u0027templateSources\u0027, ko.templateSources);\r\n    ko.exportSymbol(\u0027templateSources.domElement\u0027, ko.templateSources.domElement);\r\n    ko.exportSymbol(\u0027templateSources.anonymousTemplate\u0027, ko.templateSources.anonymousTemplate);\r\n})();\r\n(function () {\r\n    var _templateEngine;\r\n    ko.setTemplateEngine = function (templateEngine) {\r\n        if ((templateEngine != undefined) \u0026\u0026 !(templateEngine instanceof ko.templateEngine))\r\n            throw new Error(\"templateEngine must inherit from ko.templateEngine\");\r\n        _templateEngine = templateEngine;\r\n    }\r\n\r\n    function invokeForEachNodeInContinuousRange(firstNode, lastNode, action) {\r\n        var node, nextInQueue = firstNode, firstOutOfRangeNode = ko.virtualElements.nextSibling(lastNode);\r\n        while (nextInQueue \u0026\u0026 ((node = nextInQueue) !== firstOutOfRangeNode)) {\r\n            nextInQueue = ko.virtualElements.nextSibling(node);\r\n            action(node, nextInQueue);\r\n        }\r\n    }\r\n\r\n    function activateBindingsOnContinuousNodeArray(continuousNodeArray, bindingContext) {\r\n        // To be used on any nodes that have been rendered by a template and have been inserted into some parent element\r\n        // Walks through continuousNodeArray (which *must* be continuous, i.e., an uninterrupted sequence of sibling nodes, because\r\n        // the algorithm for walking them relies on this), and for each top-level item in the virtual-element sense,\r\n        // (1) Does a regular \"applyBindings\" to associate bindingContext with this node and to activate any non-memoized bindings\r\n        // (2) Unmemoizes any memos in the DOM subtree (e.g., to activate bindings that had been memoized during template rewriting)\r\n\r\n        if (continuousNodeArray.length) {\r\n            var firstNode = continuousNodeArray[0],\r\n                lastNode = continuousNodeArray[continuousNodeArray.length - 1],\r\n                parentNode = firstNode.parentNode,\r\n                provider = ko.bindingProvider[\u0027instance\u0027],\r\n                preprocessNode = provider[\u0027preprocessNode\u0027];\r\n\r\n            if (preprocessNode) {\r\n                invokeForEachNodeInContinuousRange(firstNode, lastNode, function(node, nextNodeInRange) {\r\n                    var nodePreviousSibling = node.previousSibling;\r\n                    var newNodes = preprocessNode.call(provider, node);\r\n                    if (newNodes) {\r\n                        if (node === firstNode)\r\n                            firstNode = newNodes[0] || nextNodeInRange;\r\n                        if (node === lastNode)\r\n                            lastNode = newNodes[newNodes.length - 1] || nodePreviousSibling;\r\n                    }\r\n                });\r\n\r\n                // Because preprocessNode can change the nodes, including the first and last nodes, update continuousNodeArray to match.\r\n                // We need the full set, including inner nodes, because the unmemoize step might remove the first node (and so the real\r\n                // first node needs to be in the array).\r\n                continuousNodeArray.length = 0;\r\n                if (!firstNode) { // preprocessNode might have removed all the nodes, in which case there\u0027s nothing left to do\r\n                    return;\r\n                }\r\n                if (firstNode === lastNode) {\r\n                    continuousNodeArray.push(firstNode);\r\n                } else {\r\n                    continuousNodeArray.push(firstNode, lastNode);\r\n                    ko.utils.fixUpContinuousNodeArray(continuousNodeArray, parentNode);\r\n                }\r\n            }\r\n\r\n            // Need to applyBindings *before* unmemoziation, because unmemoization might introduce extra nodes (that we don\u0027t want to re-bind)\r\n            // whereas a regular applyBindings won\u0027t introduce new memoized nodes\r\n            invokeForEachNodeInContinuousRange(firstNode, lastNode, function(node) {\r\n                if (node.nodeType === 1 || node.nodeType === 8)\r\n                    ko.applyBindings(bindingContext, node);\r\n            });\r\n            invokeForEachNodeInContinuousRange(firstNode, lastNode, function(node) {\r\n                if (node.nodeType === 1 || node.nodeType === 8)\r\n                    ko.memoization.unmemoizeDomNodeAndDescendants(node, [bindingContext]);\r\n            });\r\n\r\n            // Make sure any changes done by applyBindings or unmemoize are reflected in the array\r\n            ko.utils.fixUpContinuousNodeArray(continuousNodeArray, parentNode);\r\n        }\r\n    }\r\n\r\n    function getFirstNodeFromPossibleArray(nodeOrNodeArray) {\r\n        return nodeOrNodeArray.nodeType ? nodeOrNodeArray\r\n                                        : nodeOrNodeArray.length \u003e 0 ? nodeOrNodeArray[0]\r\n                                        : null;\r\n    }\r\n\r\n    function executeTemplate(targetNodeOrNodeArray, renderMode, template, bindingContext, options) {\r\n        options = options || {};\r\n        var firstTargetNode = targetNodeOrNodeArray \u0026\u0026 getFirstNodeFromPossibleArray(targetNodeOrNodeArray);\r\n        var templateDocument = firstTargetNode \u0026\u0026 firstTargetNode.ownerDocument;\r\n        var templateEngineToUse = (options[\u0027templateEngine\u0027] || _templateEngine);\r\n        ko.templateRewriting.ensureTemplateIsRewritten(template, templateEngineToUse, templateDocument);\r\n        var renderedNodesArray = templateEngineToUse[\u0027renderTemplate\u0027](template, bindingContext, options, templateDocument);\r\n\r\n        // Loosely check result is an array of DOM nodes\r\n        if ((typeof renderedNodesArray.length != \"number\") || (renderedNodesArray.length \u003e 0 \u0026\u0026 typeof renderedNodesArray[0].nodeType != \"number\"))\r\n            throw new Error(\"Template engine must return an array of DOM nodes\");\r\n\r\n        var haveAddedNodesToParent = false;\r\n        switch (renderMode) {\r\n            case \"replaceChildren\":\r\n                ko.virtualElements.setDomNodeChildren(targetNodeOrNodeArray, renderedNodesArray);\r\n                haveAddedNodesToParent = true;\r\n                break;\r\n            case \"replaceNode\":\r\n                ko.utils.replaceDomNodes(targetNodeOrNodeArray, renderedNodesArray);\r\n                haveAddedNodesToParent = true;\r\n                break;\r\n            case \"ignoreTargetNode\": break;\r\n            default:\r\n                throw new Error(\"Unknown renderMode: \" + renderMode);\r\n        }\r\n\r\n        if (haveAddedNodesToParent) {\r\n            activateBindingsOnContinuousNodeArray(renderedNodesArray, bindingContext);\r\n            if (options[\u0027afterRender\u0027])\r\n                ko.dependencyDetection.ignore(options[\u0027afterRender\u0027], null, [renderedNodesArray, bindingContext[\u0027$data\u0027]]);\r\n        }\r\n\r\n        return renderedNodesArray;\r\n    }\r\n\r\n    function resolveTemplateName(template, data, context) {\r\n        // The template can be specified as:\r\n        if (ko.isObservable(template)) {\r\n            // 1. An observable, with string value\r\n            return template();\r\n        } else if (typeof template === \u0027function\u0027) {\r\n            // 2. A function of (data, context) returning a string\r\n            return template(data, context);\r\n        } else {\r\n            // 3. A string\r\n            return template;\r\n        }\r\n    }\r\n\r\n    ko.renderTemplate = function (template, dataOrBindingContext, options, targetNodeOrNodeArray, renderMode) {\r\n        options = options || {};\r\n        if ((options[\u0027templateEngine\u0027] || _templateEngine) == undefined)\r\n            throw new Error(\"Set a template engine before calling renderTemplate\");\r\n        renderMode = renderMode || \"replaceChildren\";\r\n\r\n        if (targetNodeOrNodeArray) {\r\n            var firstTargetNode = getFirstNodeFromPossibleArray(targetNodeOrNodeArray);\r\n\r\n            var whenToDispose = function () { return (!firstTargetNode) || !ko.utils.domNodeIsAttachedToDocument(firstTargetNode); }; // Passive disposal (on next evaluation)\r\n            var activelyDisposeWhenNodeIsRemoved = (firstTargetNode \u0026\u0026 renderMode == \"replaceNode\") ? firstTargetNode.parentNode : firstTargetNode;\r\n\r\n            return ko.dependentObservable( // So the DOM is automatically updated when any dependency changes\r\n                function () {\r\n                    // Ensure we\u0027ve got a proper binding context to work with\r\n                    var bindingContext = (dataOrBindingContext \u0026\u0026 (dataOrBindingContext instanceof ko.bindingContext))\r\n                        ? dataOrBindingContext\r\n                        : new ko.bindingContext(ko.utils.unwrapObservable(dataOrBindingContext));\r\n\r\n                    var templateName = resolveTemplateName(template, bindingContext[\u0027$data\u0027], bindingContext),\r\n                        renderedNodesArray = executeTemplate(targetNodeOrNodeArray, renderMode, templateName, bindingContext, options);\r\n\r\n                    if (renderMode == \"replaceNode\") {\r\n                        targetNodeOrNodeArray = renderedNodesArray;\r\n                        firstTargetNode = getFirstNodeFromPossibleArray(targetNodeOrNodeArray);\r\n                    }\r\n                },\r\n                null,\r\n                { disposeWhen: whenToDispose, disposeWhenNodeIsRemoved: activelyDisposeWhenNodeIsRemoved }\r\n            );\r\n        } else {\r\n            // We don\u0027t yet have a DOM node to evaluate, so use a memo and render the template later when there is a DOM node\r\n            return ko.memoization.memoize(function (domNode) {\r\n                ko.renderTemplate(template, dataOrBindingContext, options, domNode, \"replaceNode\");\r\n            });\r\n        }\r\n    };\r\n\r\n    ko.renderTemplateForEach = function (template, arrayOrObservableArray, options, targetNode, parentBindingContext) {\r\n        // Since setDomNodeChildrenFromArrayMapping always calls executeTemplateForArrayItem and then\r\n        // activateBindingsCallback for added items, we can store the binding context in the former to use in the latter.\r\n        var arrayItemContext;\r\n\r\n        // This will be called by setDomNodeChildrenFromArrayMapping to get the nodes to add to targetNode\r\n        var executeTemplateForArrayItem = function (arrayValue, index) {\r\n            // Support selecting template as a function of the data being rendered\r\n            arrayItemContext = parentBindingContext[\u0027createChildContext\u0027](arrayValue, options[\u0027as\u0027], function(context) {\r\n                context[\u0027$index\u0027] = index;\r\n            });\r\n\r\n            var templateName = resolveTemplateName(template, arrayValue, arrayItemContext);\r\n            return executeTemplate(null, \"ignoreTargetNode\", templateName, arrayItemContext, options);\r\n        }\r\n\r\n        // This will be called whenever setDomNodeChildrenFromArrayMapping has added nodes to targetNode\r\n        var activateBindingsCallback = function(arrayValue, addedNodesArray, index) {\r\n            activateBindingsOnContinuousNodeArray(addedNodesArray, arrayItemContext);\r\n            if (options[\u0027afterRender\u0027])\r\n                options[\u0027afterRender\u0027](addedNodesArray, arrayValue);\r\n        };\r\n\r\n        return ko.dependentObservable(function () {\r\n            var unwrappedArray = ko.utils.unwrapObservable(arrayOrObservableArray) || [];\r\n            if (typeof unwrappedArray.length == \"undefined\") // Coerce single value into array\r\n                unwrappedArray = [unwrappedArray];\r\n\r\n            // Filter out any entries marked as destroyed\r\n            var filteredArray = ko.utils.arrayFilter(unwrappedArray, function(item) {\r\n                return options[\u0027includeDestroyed\u0027] || item === undefined || item === null || !ko.utils.unwrapObservable(item[\u0027_destroy\u0027]);\r\n            });\r\n\r\n            // Call setDomNodeChildrenFromArrayMapping, ignoring any observables unwrapped within (most likely from a callback function).\r\n            // If the array items are observables, though, they will be unwrapped in executeTemplateForArrayItem and managed within setDomNodeChildrenFromArrayMapping.\r\n            ko.dependencyDetection.ignore(ko.utils.setDomNodeChildrenFromArrayMapping, null, [targetNode, filteredArray, executeTemplateForArrayItem, options, activateBindingsCallback]);\r\n\r\n        }, null, { disposeWhenNodeIsRemoved: targetNode });\r\n    };\r\n\r\n    var templateComputedDomDataKey = ko.utils.domData.nextKey();\r\n    function disposeOldComputedAndStoreNewOne(element, newComputed) {\r\n        var oldComputed = ko.utils.domData.get(element, templateComputedDomDataKey);\r\n        if (oldComputed \u0026\u0026 (typeof(oldComputed.dispose) == \u0027function\u0027))\r\n            oldComputed.dispose();\r\n        ko.utils.domData.set(element, templateComputedDomDataKey, (newComputed \u0026\u0026 newComputed.isActive()) ? newComputed : undefined);\r\n    }\r\n\r\n    ko.bindingHandlers[\u0027template\u0027] = {\r\n        \u0027init\u0027: function(element, valueAccessor) {\r\n            // Support anonymous templates\r\n            var bindingValue = ko.utils.unwrapObservable(valueAccessor());\r\n            if (typeof bindingValue == \"string\" || bindingValue[\u0027name\u0027]) {\r\n                // It\u0027s a named template - clear the element\r\n                ko.virtualElements.emptyNode(element);\r\n            } else {\r\n                // It\u0027s an anonymous template - store the element contents, then clear the element\r\n                var templateNodes = ko.virtualElements.childNodes(element),\r\n                    container = ko.utils.moveCleanedNodesToContainerElement(templateNodes); // This also removes the nodes from their current parent\r\n                new ko.templateSources.anonymousTemplate(element)[\u0027nodes\u0027](container);\r\n            }\r\n            return { \u0027controlsDescendantBindings\u0027: true };\r\n        },\r\n        \u0027update\u0027: function (element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n            var value = valueAccessor(),\r\n                dataValue,\r\n                options = ko.utils.unwrapObservable(value),\r\n                shouldDisplay = true,\r\n                templateComputed = null,\r\n                templateName;\r\n\r\n            if (typeof options == \"string\") {\r\n                templateName = value;\r\n                options = {};\r\n            } else {\r\n                templateName = options[\u0027name\u0027];\r\n\r\n                // Support \"if\"/\"ifnot\" conditions\r\n                if (\u0027if\u0027 in options)\r\n                    shouldDisplay = ko.utils.unwrapObservable(options[\u0027if\u0027]);\r\n                if (shouldDisplay \u0026\u0026 \u0027ifnot\u0027 in options)\r\n                    shouldDisplay = !ko.utils.unwrapObservable(options[\u0027ifnot\u0027]);\r\n\r\n                dataValue = ko.utils.unwrapObservable(options[\u0027data\u0027]);\r\n            }\r\n\r\n            if (\u0027foreach\u0027 in options) {\r\n                // Render once for each data point (treating data set as empty if shouldDisplay==false)\r\n                var dataArray = (shouldDisplay \u0026\u0026 options[\u0027foreach\u0027]) || [];\r\n                templateComputed = ko.renderTemplateForEach(templateName || element, dataArray, options, element, bindingContext);\r\n            } else if (!shouldDisplay) {\r\n                ko.virtualElements.emptyNode(element);\r\n            } else {\r\n                // Render once for this single data point (or use the viewModel if no data was provided)\r\n                var innerBindingContext = (\u0027data\u0027 in options) ?\r\n                    bindingContext[\u0027createChildContext\u0027](dataValue, options[\u0027as\u0027]) :  // Given an explitit \u0027data\u0027 value, we create a child binding context for it\r\n                    bindingContext;                                                        // Given no explicit \u0027data\u0027 value, we retain the same binding context\r\n                templateComputed = ko.renderTemplate(templateName || element, innerBindingContext, options, element);\r\n            }\r\n\r\n            // It only makes sense to have a single template computed per element (otherwise which one should have its output displayed?)\r\n            disposeOldComputedAndStoreNewOne(element, templateComputed);\r\n        }\r\n    };\r\n\r\n    // Anonymous templates can\u0027t be rewritten. Give a nice error message if you try to do it.\r\n    ko.expressionRewriting.bindingRewriteValidators[\u0027template\u0027] = function(bindingValue) {\r\n        var parsedBindingValue = ko.expressionRewriting.parseObjectLiteral(bindingValue);\r\n\r\n        if ((parsedBindingValue.length == 1) \u0026\u0026 parsedBindingValue[0][\u0027unknown\u0027])\r\n            return null; // It looks like a string literal, not an object literal, so treat it as a named template (which is allowed for rewriting)\r\n\r\n        if (ko.expressionRewriting.keyValueArrayContainsKey(parsedBindingValue, \"name\"))\r\n            return null; // Named templates can be rewritten, so return \"no error\"\r\n        return \"This template engine does not support anonymous templates nested within its templates\";\r\n    };\r\n\r\n    ko.virtualElements.allowedBindings[\u0027template\u0027] = true;\r\n})();\r\n\r\nko.exportSymbol(\u0027setTemplateEngine\u0027, ko.setTemplateEngine);\r\nko.exportSymbol(\u0027renderTemplate\u0027, ko.renderTemplate);\r\n// Go through the items that have been added and deleted and try to find matches between them.\r\nko.utils.findMovesInArrayComparison = function (left, right, limitFailedCompares) {\r\n    if (left.length \u0026\u0026 right.length) {\r\n        var failedCompares, l, r, leftItem, rightItem;\r\n        for (failedCompares = l = 0; (!limitFailedCompares || failedCompares \u003c limitFailedCompares) \u0026\u0026 (leftItem = left[l]); ++l) {\r\n            for (r = 0; rightItem = right[r]; ++r) {\r\n                if (leftItem[\u0027value\u0027] === rightItem[\u0027value\u0027]) {\r\n                    leftItem[\u0027moved\u0027] = rightItem[\u0027index\u0027];\r\n                    rightItem[\u0027moved\u0027] = leftItem[\u0027index\u0027];\r\n                    right.splice(r, 1);         // This item is marked as moved; so remove it from right list\r\n                    failedCompares = r = 0;     // Reset failed compares count because we\u0027re checking for consecutive failures\r\n                    break;\r\n                }\r\n            }\r\n            failedCompares += r;\r\n        }\r\n    }\r\n};\r\n\r\nko.utils.compareArrays = (function () {\r\n    var statusNotInOld = \u0027added\u0027, statusNotInNew = \u0027deleted\u0027;\r\n\r\n    // Simple calculation based on Levenshtein distance.\r\n    function compareArrays(oldArray, newArray, options) {\r\n        // For backward compatibility, if the third arg is actually a bool, interpret\r\n        // it as the old parameter \u0027dontLimitMoves\u0027. Newer code should use { dontLimitMoves: true }.\r\n        options = (typeof options === \u0027boolean\u0027) ? { \u0027dontLimitMoves\u0027: options } : (options || {});\r\n        oldArray = oldArray || [];\r\n        newArray = newArray || [];\r\n\r\n        if (oldArray.length \u003c= newArray.length)\r\n            return compareSmallArrayToBigArray(oldArray, newArray, statusNotInOld, statusNotInNew, options);\r\n        else\r\n            return compareSmallArrayToBigArray(newArray, oldArray, statusNotInNew, statusNotInOld, options);\r\n    }\r\n\r\n    function compareSmallArrayToBigArray(smlArray, bigArray, statusNotInSml, statusNotInBig, options) {\r\n        var myMin = Math.min,\r\n            myMax = Math.max,\r\n            editDistanceMatrix = [],\r\n            smlIndex, smlIndexMax = smlArray.length,\r\n            bigIndex, bigIndexMax = bigArray.length,\r\n            compareRange = (bigIndexMax - smlIndexMax) || 1,\r\n            maxDistance = smlIndexMax + bigIndexMax + 1,\r\n            thisRow, lastRow,\r\n            bigIndexMaxForRow, bigIndexMinForRow;\r\n\r\n        for (smlIndex = 0; smlIndex \u003c= smlIndexMax; smlIndex++) {\r\n            lastRow = thisRow;\r\n            editDistanceMatrix.push(thisRow = []);\r\n            bigIndexMaxForRow = myMin(bigIndexMax, smlIndex + compareRange);\r\n            bigIndexMinForRow = myMax(0, smlIndex - 1);\r\n            for (bigIndex = bigIndexMinForRow; bigIndex \u003c= bigIndexMaxForRow; bigIndex++) {\r\n                if (!bigIndex)\r\n                    thisRow[bigIndex] = smlIndex + 1;\r\n                else if (!smlIndex)  // Top row - transform empty array into new array via additions\r\n                    thisRow[bigIndex] = bigIndex + 1;\r\n                else if (smlArray[smlIndex - 1] === bigArray[bigIndex - 1])\r\n                    thisRow[bigIndex] = lastRow[bigIndex - 1];                  // copy value (no edit)\r\n                else {\r\n                    var northDistance = lastRow[bigIndex] || maxDistance;       // not in big (deletion)\r\n                    var westDistance = thisRow[bigIndex - 1] || maxDistance;    // not in small (addition)\r\n                    thisRow[bigIndex] = myMin(northDistance, westDistance) + 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        var editScript = [], meMinusOne, notInSml = [], notInBig = [];\r\n        for (smlIndex = smlIndexMax, bigIndex = bigIndexMax; smlIndex || bigIndex;) {\r\n            meMinusOne = editDistanceMatrix[smlIndex][bigIndex] - 1;\r\n            if (bigIndex \u0026\u0026 meMinusOne === editDistanceMatrix[smlIndex][bigIndex-1]) {\r\n                notInSml.push(editScript[editScript.length] = {     // added\r\n                    \u0027status\u0027: statusNotInSml,\r\n                    \u0027value\u0027: bigArray[--bigIndex],\r\n                    \u0027index\u0027: bigIndex });\r\n            } else if (smlIndex \u0026\u0026 meMinusOne === editDistanceMatrix[smlIndex - 1][bigIndex]) {\r\n                notInBig.push(editScript[editScript.length] = {     // deleted\r\n                    \u0027status\u0027: statusNotInBig,\r\n                    \u0027value\u0027: smlArray[--smlIndex],\r\n                    \u0027index\u0027: smlIndex });\r\n            } else {\r\n                --bigIndex;\r\n                --smlIndex;\r\n                if (!options[\u0027sparse\u0027]) {\r\n                    editScript.push({\r\n                        \u0027status\u0027: \"retained\",\r\n                        \u0027value\u0027: bigArray[bigIndex] });\r\n                }\r\n            }\r\n        }\r\n\r\n        // Set a limit on the number of consecutive non-matching comparisons; having it a multiple of\r\n        // smlIndexMax keeps the time complexity of this algorithm linear.\r\n        ko.utils.findMovesInArrayComparison(notInSml, notInBig, smlIndexMax * 10);\r\n\r\n        return editScript.reverse();\r\n    }\r\n\r\n    return compareArrays;\r\n})();\r\n\r\nko.exportSymbol(\u0027utils.compareArrays\u0027, ko.utils.compareArrays);\r\n(function () {\r\n    // Objective:\r\n    // * Given an input array, a container DOM node, and a function from array elements to arrays of DOM nodes,\r\n    //   map the array elements to arrays of DOM nodes, concatenate together all these arrays, and use them to populate the container DOM node\r\n    // * Next time we\u0027re given the same combination of things (with the array possibly having mutated), update the container DOM node\r\n    //   so that its children is again the concatenation of the mappings of the array elements, but don\u0027t re-map any array elements that we\r\n    //   previously mapped - retain those nodes, and just insert/delete other ones\r\n\r\n    // \"callbackAfterAddingNodes\" will be invoked after any \"mapping\"-generated nodes are inserted into the container node\r\n    // You can use this, for example, to activate bindings on those nodes.\r\n\r\n    function mapNodeAndRefreshWhenChanged(containerNode, mapping, valueToMap, callbackAfterAddingNodes, index) {\r\n        // Map this array value inside a dependentObservable so we re-map when any dependency changes\r\n        var mappedNodes = [];\r\n        var dependentObservable = ko.dependentObservable(function() {\r\n            var newMappedNodes = mapping(valueToMap, index, ko.utils.fixUpContinuousNodeArray(mappedNodes, containerNode)) || [];\r\n\r\n            // On subsequent evaluations, just replace the previously-inserted DOM nodes\r\n            if (mappedNodes.length \u003e 0) {\r\n                ko.utils.replaceDomNodes(mappedNodes, newMappedNodes);\r\n                if (callbackAfterAddingNodes)\r\n                    ko.dependencyDetection.ignore(callbackAfterAddingNodes, null, [valueToMap, newMappedNodes, index]);\r\n            }\r\n\r\n            // Replace the contents of the mappedNodes array, thereby updating the record\r\n            // of which nodes would be deleted if valueToMap was itself later removed\r\n            mappedNodes.length = 0;\r\n            ko.utils.arrayPushAll(mappedNodes, newMappedNodes);\r\n        }, null, { disposeWhenNodeIsRemoved: containerNode, disposeWhen: function() { return !ko.utils.anyDomNodeIsAttachedToDocument(mappedNodes); } });\r\n        return { mappedNodes : mappedNodes, dependentObservable : (dependentObservable.isActive() ? dependentObservable : undefined) };\r\n    }\r\n\r\n    var lastMappingResultDomDataKey = ko.utils.domData.nextKey();\r\n\r\n    ko.utils.setDomNodeChildrenFromArrayMapping = function (domNode, array, mapping, options, callbackAfterAddingNodes) {\r\n        // Compare the provided array against the previous one\r\n        array = array || [];\r\n        options = options || {};\r\n        var isFirstExecution = ko.utils.domData.get(domNode, lastMappingResultDomDataKey) === undefined;\r\n        var lastMappingResult = ko.utils.domData.get(domNode, lastMappingResultDomDataKey) || [];\r\n        var lastArray = ko.utils.arrayMap(lastMappingResult, function (x) { return x.arrayEntry; });\r\n        var editScript = ko.utils.compareArrays(lastArray, array, options[\u0027dontLimitMoves\u0027]);\r\n\r\n        // Build the new mapping result\r\n        var newMappingResult = [];\r\n        var lastMappingResultIndex = 0;\r\n        var newMappingResultIndex = 0;\r\n\r\n        var nodesToDelete = [];\r\n        var itemsToProcess = [];\r\n        var itemsForBeforeRemoveCallbacks = [];\r\n        var itemsForMoveCallbacks = [];\r\n        var itemsForAfterAddCallbacks = [];\r\n        var mapData;\r\n\r\n        function itemMovedOrRetained(editScriptIndex, oldPosition) {\r\n            mapData = lastMappingResult[oldPosition];\r\n            if (newMappingResultIndex !== oldPosition)\r\n                itemsForMoveCallbacks[editScriptIndex] = mapData;\r\n            // Since updating the index might change the nodes, do so before calling fixUpContinuousNodeArray\r\n            mapData.indexObservable(newMappingResultIndex++);\r\n            ko.utils.fixUpContinuousNodeArray(mapData.mappedNodes, domNode);\r\n            newMappingResult.push(mapData);\r\n            itemsToProcess.push(mapData);\r\n        }\r\n\r\n        function callCallback(callback, items) {\r\n            if (callback) {\r\n                for (var i = 0, n = items.length; i \u003c n; i++) {\r\n                    if (items[i]) {\r\n                        ko.utils.arrayForEach(items[i].mappedNodes, function(node) {\r\n                            callback(node, i, items[i].arrayEntry);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (var i = 0, editScriptItem, movedIndex; editScriptItem = editScript[i]; i++) {\r\n            movedIndex = editScriptItem[\u0027moved\u0027];\r\n            switch (editScriptItem[\u0027status\u0027]) {\r\n                case \"deleted\":\r\n                    if (movedIndex === undefined) {\r\n                        mapData = lastMappingResult[lastMappingResultIndex];\r\n\r\n                        // Stop tracking changes to the mapping for these nodes\r\n                        if (mapData.dependentObservable)\r\n                            mapData.dependentObservable.dispose();\r\n\r\n                        // Queue these nodes for later removal\r\n                        nodesToDelete.push.apply(nodesToDelete, ko.utils.fixUpContinuousNodeArray(mapData.mappedNodes, domNode));\r\n                        if (options[\u0027beforeRemove\u0027]) {\r\n                            itemsForBeforeRemoveCallbacks[i] = mapData;\r\n                            itemsToProcess.push(mapData);\r\n                        }\r\n                    }\r\n                    lastMappingResultIndex++;\r\n                    break;\r\n\r\n                case \"retained\":\r\n                    itemMovedOrRetained(i, lastMappingResultIndex++);\r\n                    break;\r\n\r\n                case \"added\":\r\n                    if (movedIndex !== undefined) {\r\n                        itemMovedOrRetained(i, movedIndex);\r\n                    } else {\r\n                        mapData = { arrayEntry: editScriptItem[\u0027value\u0027], indexObservable: ko.observable(newMappingResultIndex++) };\r\n                        newMappingResult.push(mapData);\r\n                        itemsToProcess.push(mapData);\r\n                        if (!isFirstExecution)\r\n                            itemsForAfterAddCallbacks[i] = mapData;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // Call beforeMove first before any changes have been made to the DOM\r\n        callCallback(options[\u0027beforeMove\u0027], itemsForMoveCallbacks);\r\n\r\n        // Next remove nodes for deleted items (or just clean if there\u0027s a beforeRemove callback)\r\n        ko.utils.arrayForEach(nodesToDelete, options[\u0027beforeRemove\u0027] ? ko.cleanNode : ko.removeNode);\r\n\r\n        // Next add/reorder the remaining items (will include deleted items if there\u0027s a beforeRemove callback)\r\n        for (var i = 0, nextNode = ko.virtualElements.firstChild(domNode), lastNode, node; mapData = itemsToProcess[i]; i++) {\r\n            // Get nodes for newly added items\r\n            if (!mapData.mappedNodes)\r\n                ko.utils.extend(mapData, mapNodeAndRefreshWhenChanged(domNode, mapping, mapData.arrayEntry, callbackAfterAddingNodes, mapData.indexObservable));\r\n\r\n            // Put nodes in the right place if they aren\u0027t there already\r\n            for (var j = 0; node = mapData.mappedNodes[j]; nextNode = node.nextSibling, lastNode = node, j++) {\r\n                if (node !== nextNode)\r\n                    ko.virtualElements.insertAfter(domNode, node, lastNode);\r\n            }\r\n\r\n            // Run the callbacks for newly added nodes (for example, to apply bindings, etc.)\r\n            if (!mapData.initialized \u0026\u0026 callbackAfterAddingNodes) {\r\n                callbackAfterAddingNodes(mapData.arrayEntry, mapData.mappedNodes, mapData.indexObservable);\r\n                mapData.initialized = true;\r\n            }\r\n        }\r\n\r\n        // If there\u0027s a beforeRemove callback, call it after reordering.\r\n        // Note that we assume that the beforeRemove callback will usually be used to remove the nodes using\r\n        // some sort of animation, which is why we first reorder the nodes that will be removed. If the\r\n        // callback instead removes the nodes right away, it would be more efficient to skip reordering them.\r\n        // Perhaps we\u0027ll make that change in the future if this scenario becomes more common.\r\n        callCallback(options[\u0027beforeRemove\u0027], itemsForBeforeRemoveCallbacks);\r\n\r\n        // Finally call afterMove and afterAdd callbacks\r\n        callCallback(options[\u0027afterMove\u0027], itemsForMoveCallbacks);\r\n        callCallback(options[\u0027afterAdd\u0027], itemsForAfterAddCallbacks);\r\n\r\n        // Store a copy of the array items we just considered so we can difference it next time\r\n        ko.utils.domData.set(domNode, lastMappingResultDomDataKey, newMappingResult);\r\n    }\r\n})();\r\n\r\nko.exportSymbol(\u0027utils.setDomNodeChildrenFromArrayMapping\u0027, ko.utils.setDomNodeChildrenFromArrayMapping);\r\nko.nativeTemplateEngine = function () {\r\n    this[\u0027allowTemplateRewriting\u0027] = false;\r\n}\r\n\r\nko.nativeTemplateEngine.prototype = new ko.templateEngine();\r\nko.nativeTemplateEngine.prototype.constructor = ko.nativeTemplateEngine;\r\nko.nativeTemplateEngine.prototype[\u0027renderTemplateSource\u0027] = function (templateSource, bindingContext, options) {\r\n    var useNodesIfAvailable = !(ko.utils.ieVersion \u003c 9), // IE\u003c9 cloneNode doesn\u0027t work properly\r\n        templateNodesFunc = useNodesIfAvailable ? templateSource[\u0027nodes\u0027] : null,\r\n        templateNodes = templateNodesFunc ? templateSource[\u0027nodes\u0027]() : null;\r\n\r\n    if (templateNodes) {\r\n        return ko.utils.makeArray(templateNodes.cloneNode(true).childNodes);\r\n    } else {\r\n        var templateText = templateSource[\u0027text\u0027]();\r\n        return ko.utils.parseHtmlFragment(templateText);\r\n    }\r\n};\r\n\r\nko.nativeTemplateEngine.instance = new ko.nativeTemplateEngine();\r\nko.setTemplateEngine(ko.nativeTemplateEngine.instance);\r\n\r\nko.exportSymbol(\u0027nativeTemplateEngine\u0027, ko.nativeTemplateEngine);\r\n(function() {\r\n    ko.jqueryTmplTemplateEngine = function () {\r\n        // Detect which version of jquery-tmpl you\u0027re using. Unfortunately jquery-tmpl\r\n        // doesn\u0027t expose a version number, so we have to infer it.\r\n        // Note that as of Knockout 1.3, we only support jQuery.tmpl 1.0.0pre and later,\r\n        // which KO internally refers to as version \"2\", so older versions are no longer detected.\r\n        var jQueryTmplVersion = this.jQueryTmplVersion = (function() {\r\n            if (!jQueryInstance || !(jQueryInstance[\u0027tmpl\u0027]))\r\n                return 0;\r\n            // Since it exposes no official version number, we use our own numbering system. To be updated as jquery-tmpl evolves.\r\n            try {\r\n                if (jQueryInstance[\u0027tmpl\u0027][\u0027tag\u0027][\u0027tmpl\u0027][\u0027open\u0027].toString().indexOf(\u0027__\u0027) \u003e= 0) {\r\n                    // Since 1.0.0pre, custom tags should append markup to an array called \"__\"\r\n                    return 2; // Final version of jquery.tmpl\r\n                }\r\n            } catch(ex) { /* Apparently not the version we were looking for */ }\r\n\r\n            return 1; // Any older version that we don\u0027t support\r\n        })();\r\n\r\n        function ensureHasReferencedJQueryTemplates() {\r\n            if (jQueryTmplVersion \u003c 2)\r\n                throw new Error(\"Your version of jQuery.tmpl is too old. Please upgrade to jQuery.tmpl 1.0.0pre or later.\");\r\n        }\r\n\r\n        function executeTemplate(compiledTemplate, data, jQueryTemplateOptions) {\r\n            return jQueryInstance[\u0027tmpl\u0027](compiledTemplate, data, jQueryTemplateOptions);\r\n        }\r\n\r\n        this[\u0027renderTemplateSource\u0027] = function(templateSource, bindingContext, options) {\r\n            options = options || {};\r\n            ensureHasReferencedJQueryTemplates();\r\n\r\n            // Ensure we have stored a precompiled version of this template (don\u0027t want to reparse on every render)\r\n            var precompiled = templateSource[\u0027data\u0027](\u0027precompiled\u0027);\r\n            if (!precompiled) {\r\n                var templateText = templateSource[\u0027text\u0027]() || \"\";\r\n                // Wrap in \"with($whatever.koBindingContext) { ... }\"\r\n                templateText = \"{{ko_with $item.koBindingContext}}\" + templateText + \"{{/ko_with}}\";\r\n\r\n                precompiled = jQueryInstance[\u0027template\u0027](null, templateText);\r\n                templateSource[\u0027data\u0027](\u0027precompiled\u0027, precompiled);\r\n            }\r\n\r\n            var data = [bindingContext[\u0027$data\u0027]]; // Prewrap the data in an array to stop jquery.tmpl from trying to unwrap any arrays\r\n            var jQueryTemplateOptions = jQueryInstance[\u0027extend\u0027]({ \u0027koBindingContext\u0027: bindingContext }, options[\u0027templateOptions\u0027]);\r\n\r\n            var resultNodes = executeTemplate(precompiled, data, jQueryTemplateOptions);\r\n            resultNodes[\u0027appendTo\u0027](document.createElement(\"div\")); // Using \"appendTo\" forces jQuery/jQuery.tmpl to perform necessary cleanup work\r\n\r\n            jQueryInstance[\u0027fragments\u0027] = {}; // Clear jQuery\u0027s fragment cache to avoid a memory leak after a large number of template renders\r\n            return resultNodes;\r\n        };\r\n\r\n        this[\u0027createJavaScriptEvaluatorBlock\u0027] = function(script) {\r\n            return \"{{ko_code ((function() { return \" + script + \" })()) }}\";\r\n        };\r\n\r\n        this[\u0027addTemplate\u0027] = function(templateName, templateMarkup) {\r\n            document.write(\"\u003cscript type=\u0027text/html\u0027 id=\u0027\" + templateName + \"\u0027\u003e\" + templateMarkup + \"\u003c\" + \"/script\u003e\");\r\n        };\r\n\r\n        if (jQueryTmplVersion \u003e 0) {\r\n            jQueryInstance[\u0027tmpl\u0027][\u0027tag\u0027][\u0027ko_code\u0027] = {\r\n                open: \"__.push($1 || \u0027\u0027);\"\r\n            };\r\n            jQueryInstance[\u0027tmpl\u0027][\u0027tag\u0027][\u0027ko_with\u0027] = {\r\n                open: \"with($1) {\",\r\n                close: \"} \"\r\n            };\r\n        }\r\n    };\r\n\r\n    ko.jqueryTmplTemplateEngine.prototype = new ko.templateEngine();\r\n    ko.jqueryTmplTemplateEngine.prototype.constructor = ko.jqueryTmplTemplateEngine;\r\n\r\n    // Use this one by default *only if jquery.tmpl is referenced*\r\n    var jqueryTmplTemplateEngineInstance = new ko.jqueryTmplTemplateEngine();\r\n    if (jqueryTmplTemplateEngineInstance.jQueryTmplVersion \u003e 0)\r\n        ko.setTemplateEngine(jqueryTmplTemplateEngineInstance);\r\n\r\n    ko.exportSymbol(\u0027jqueryTmplTemplateEngine\u0027, ko.jqueryTmplTemplateEngine);\r\n})();\r\n}));\r\n}());\r\n})();"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Libraries/knockout/knockout.debug.js");
	globalEval(/*FILE-BEGIN*/"// empty for easier debugging"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Libraries/knockout/knockout-deferred-updates.min.debug.js");
	globalEval(/*FILE-BEGIN*/"/// Knockout Mapping plugin v2.4.1\r\n/// (c) 2013 Steven Sanderson, Roy Jacobs - http://knockoutjs.com/\r\n/// License: MIT (http://www.opensource.org/licenses/mit-license.php)\r\n(function (factory) {\r\n\t// Module systems magic dance.\r\n\r\n\tif (typeof require === \"function\" \u0026\u0026 typeof exports === \"object\" \u0026\u0026 typeof module === \"object\") {\r\n\t\t// CommonJS or Node: hard-coded dependency on \"knockout\"\r\n\t\tfactory(require(\"knockout\"), exports);\r\n\t} else if (typeof define === \"function\" \u0026\u0026 define[\"amd\"]) {\r\n\t\t// AMD anonymous module with hard-coded dependency on \"knockout\"\r\n\t\tdefine([\"knockout\", \"exports\"], factory);\r\n\t} else {\r\n\t\t// \u003cscript\u003e tag: use the global `ko` object, attaching a `mapping` property\r\n\t\tfactory(ko, ko.mapping = {});\r\n\t}\r\n}(function (ko, exports) {\r\n\tvar DEBUG=true;\r\n\tvar mappingProperty = \"__ko_mapping__\";\r\n\tvar realKoDependentObservable = ko.dependentObservable;\r\n\tvar mappingNesting = 0;\r\n\tvar dependentObservables;\r\n\tvar visitedObjects;\r\n\tvar recognizedRootProperties = [\"create\", \"update\", \"key\", \"arrayChanged\"];\r\n\tvar emptyReturn = {};\r\n\r\n\tvar _defaultOptions = {\r\n\t\tinclude: [\"_destroy\"],\r\n\t\tignore: [],\r\n\t\tcopy: [],\r\n\t\tobserve: []\r\n\t};\r\n\tvar defaultOptions = _defaultOptions;\r\n\r\n\t// Author: KennyTM @ StackOverflow\r\n\tfunction unionArrays (x, y) {\r\n\t\tvar obj = {};\r\n\t\tfor (var i = x.length - 1; i \u003e= 0; -- i) obj[x[i]] = x[i];\r\n\t\tfor (var i = y.length - 1; i \u003e= 0; -- i) obj[y[i]] = y[i];\r\n\t\tvar res = [];\r\n\r\n\t\tfor (var k in obj) {\r\n\t\t\tres.push(obj[k]);\r\n\t\t};\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\tfunction extendObject(destination, source) {\r\n\t\tvar destType;\r\n\r\n\t\tfor (var key in source) {\r\n\t\t\tif (source.hasOwnProperty(key) \u0026\u0026 source[key]) {\r\n\t\t\t\tdestType = exports.getType(destination[key]);\r\n\t\t\t\tif (key \u0026\u0026 destination[key] \u0026\u0026 destType !== \"array\" \u0026\u0026 destType !== \"string\") {\r\n\t\t\t\t\textendObject(destination[key], source[key]);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar bothArrays = exports.getType(destination[key]) === \"array\" \u0026\u0026 exports.getType(source[key]) === \"array\";\r\n\t\t\t\t\tif (bothArrays) {\r\n\t\t\t\t\t\tdestination[key] = unionArrays(destination[key], source[key]);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tdestination[key] = source[key];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction merge(obj1, obj2) {\r\n\t\tvar merged = {};\r\n\t\textendObject(merged, obj1);\r\n\t\textendObject(merged, obj2);\r\n\r\n\t\treturn merged;\r\n\t}\r\n\r\n\texports.isMapped = function (viewModel) {\r\n\t\tvar unwrapped = ko.utils.unwrapObservable(viewModel);\r\n\t\treturn unwrapped \u0026\u0026 unwrapped[mappingProperty];\r\n\t}\r\n\r\n\texports.fromJS = function (jsObject /*, inputOptions, target*/ ) {\r\n\t\tif (arguments.length == 0) throw new Error(\"When calling ko.fromJS, pass the object you want to convert.\");\r\n\r\n\t\ttry {\r\n\t\t\tif (!mappingNesting++) {\r\n\t\t\t\tdependentObservables = [];\r\n\t\t\t\tvisitedObjects = new objectLookup();\r\n\t\t\t}\r\n\r\n\t\t\tvar options;\r\n\t\t\tvar target;\r\n\r\n\t\t\tif (arguments.length == 2) {\r\n\t\t\t\tif (arguments[1][mappingProperty]) {\r\n\t\t\t\t\ttarget = arguments[1];\r\n\t\t\t\t} else {\r\n\t\t\t\t\toptions = arguments[1];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (arguments.length == 3) {\r\n\t\t\t\toptions = arguments[1];\r\n\t\t\t\ttarget = arguments[2];\r\n\t\t\t}\r\n\r\n\t\t\tif (target) {\r\n\t\t\t\toptions = merge(options, target[mappingProperty]);\r\n\t\t\t}\r\n\t\t\toptions = fillOptions(options);\r\n\r\n\t\t\tvar result = updateViewModel(target, jsObject, options);\r\n\t\t\tif (target) {\r\n\t\t\t\tresult = target;\r\n\t\t\t}\r\n\r\n\t\t\t// Evaluate any dependent observables that were proxied.\r\n\t\t\t// Do this after the model\u0027s observables have been created\r\n\t\t\tif (!--mappingNesting) {\r\n\t\t\t\twhile (dependentObservables.length) {\r\n\t\t\t\t\tvar DO = dependentObservables.pop();\r\n\t\t\t\t\tif (DO) {\r\n\t\t\t\t\t\tDO();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// Move this magic property to the underlying dependent observable\r\n\t\t\t\t\t\tDO.__DO[\"throttleEvaluation\"] = DO[\"throttleEvaluation\"];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Save any new mapping options in the view model, so that updateFromJS can use them later.\r\n\t\t\tresult[mappingProperty] = merge(result[mappingProperty], options);\r\n\r\n\t\t\treturn result;\r\n\t\t} catch(e) {\r\n\t\t\tmappingNesting = 0;\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t};\r\n\r\n\texports.fromJSON = function (jsonString /*, options, target*/ ) {\r\n\t\tvar parsed = ko.utils.parseJson(jsonString);\r\n\t\targuments[0] = parsed;\r\n\t\treturn exports.fromJS.apply(this, arguments);\r\n\t};\r\n\r\n\texports.updateFromJS = function (viewModel) {\r\n\t\tthrow new Error(\"ko.mapping.updateFromJS, use ko.mapping.fromJS instead. Please note that the order of parameters is different!\");\r\n\t};\r\n\r\n\texports.updateFromJSON = function (viewModel) {\r\n\t\tthrow new Error(\"ko.mapping.updateFromJSON, use ko.mapping.fromJSON instead. Please note that the order of parameters is different!\");\r\n\t};\r\n\r\n\texports.toJS = function (rootObject, options) {\r\n\t\tif (!defaultOptions) exports.resetDefaultOptions();\r\n\r\n\t\tif (arguments.length == 0) throw new Error(\"When calling ko.mapping.toJS, pass the object you want to convert.\");\r\n\t\tif (exports.getType(defaultOptions.ignore) !== \"array\") throw new Error(\"ko.mapping.defaultOptions().ignore should be an array.\");\r\n\t\tif (exports.getType(defaultOptions.include) !== \"array\") throw new Error(\"ko.mapping.defaultOptions().include should be an array.\");\r\n\t\tif (exports.getType(defaultOptions.copy) !== \"array\") throw new Error(\"ko.mapping.defaultOptions().copy should be an array.\");\r\n\r\n\t\t// Merge in the options used in fromJS\r\n\t\toptions = fillOptions(options, rootObject[mappingProperty]);\r\n\r\n\t\t// We just unwrap everything at every level in the object graph\r\n\t\treturn exports.visitModel(rootObject, function (x) {\r\n\t\t\treturn ko.utils.unwrapObservable(x)\r\n\t\t}, options);\r\n\t};\r\n\r\n\texports.toJSON = function (rootObject, options) {\r\n\t\tvar plainJavaScriptObject = exports.toJS(rootObject, options);\r\n\t\treturn ko.utils.stringifyJson(plainJavaScriptObject);\r\n\t};\r\n\r\n\texports.defaultOptions = function () {\r\n\t\tif (arguments.length \u003e 0) {\r\n\t\t\tdefaultOptions = arguments[0];\r\n\t\t} else {\r\n\t\t\treturn defaultOptions;\r\n\t\t}\r\n\t};\r\n\r\n\texports.resetDefaultOptions = function () {\r\n\t\tdefaultOptions = {\r\n\t\t\tinclude: _defaultOptions.include.slice(0),\r\n\t\t\tignore: _defaultOptions.ignore.slice(0),\r\n\t\t\tcopy: _defaultOptions.copy.slice(0)\r\n\t\t};\r\n\t};\r\n\r\n\texports.getType = function(x) {\r\n\t\tif ((x) \u0026\u0026 (typeof (x) === \"object\")) {\r\n\t\t\tif (x.constructor === Date) return \"date\";\r\n\t\t\tif (x.constructor === Array) return \"array\";\r\n\t\t}\r\n\t\treturn typeof x;\r\n\t}\r\n\r\n\tfunction fillOptions(rawOptions, otherOptions) {\r\n\t\tvar options = merge({}, rawOptions);\r\n\r\n\t\t// Move recognized root-level properties into a root namespace\r\n\t\tfor (var i = recognizedRootProperties.length - 1; i \u003e= 0; i--) {\r\n\t\t\tvar property = recognizedRootProperties[i];\r\n\t\t\t\r\n\t\t\t// Carry on, unless this property is present\r\n\t\t\tif (!options[property]) continue;\r\n\t\t\t\r\n\t\t\t// Move the property into the root namespace\r\n\t\t\tif (!(options[\"\"] instanceof Object)) options[\"\"] = {};\r\n\t\t\toptions[\"\"][property] = options[property];\r\n\t\t\tdelete options[property];\r\n\t\t}\r\n\r\n\t\tif (otherOptions) {\r\n\t\t\toptions.ignore = mergeArrays(otherOptions.ignore, options.ignore);\r\n\t\t\toptions.include = mergeArrays(otherOptions.include, options.include);\r\n\t\t\toptions.copy = mergeArrays(otherOptions.copy, options.copy);\r\n\t\t\toptions.observe = mergeArrays(otherOptions.observe, options.observe);\r\n\t\t}\r\n\t\toptions.ignore = mergeArrays(options.ignore, defaultOptions.ignore);\r\n\t\toptions.include = mergeArrays(options.include, defaultOptions.include);\r\n\t\toptions.copy = mergeArrays(options.copy, defaultOptions.copy);\r\n\t\toptions.observe = mergeArrays(options.observe, defaultOptions.observe);\r\n\r\n\t\toptions.mappedProperties = options.mappedProperties || {};\r\n\t\toptions.copiedProperties = options.copiedProperties || {};\r\n\t\treturn options;\r\n\t}\r\n\r\n\tfunction mergeArrays(a, b) {\r\n\t\tif (exports.getType(a) !== \"array\") {\r\n\t\t\tif (exports.getType(a) === \"undefined\") a = [];\r\n\t\t\telse a = [a];\r\n\t\t}\r\n\t\tif (exports.getType(b) !== \"array\") {\r\n\t\t\tif (exports.getType(b) === \"undefined\") b = [];\r\n\t\t\telse b = [b];\r\n\t\t}\r\n\r\n\t\treturn ko.utils.arrayGetDistinctValues(a.concat(b));\r\n\t}\r\n\r\n\t// When using a \u0027create\u0027 callback, we proxy the dependent observable so that it doesn\u0027t immediately evaluate on creation.\r\n\t// The reason is that the dependent observables in the user-specified callback may contain references to properties that have not been mapped yet.\r\n\tfunction withProxyDependentObservable(dependentObservables, callback) {\r\n\t\tvar localDO = ko.dependentObservable;\r\n\t\tko.dependentObservable = function (read, owner, options) {\r\n\t\t\toptions = options || {};\r\n\r\n\t\t\tif (read \u0026\u0026 typeof read == \"object\") { // mirrors condition in knockout implementation of DO\u0027s\r\n\t\t\t\toptions = read;\r\n\t\t\t}\r\n\r\n\t\t\tvar realDeferEvaluation = options.deferEvaluation;\r\n\r\n\t\t\tvar isRemoved = false;\r\n\r\n\t\t\t// We wrap the original dependent observable so that we can remove it from the \u0027dependentObservables\u0027 list we need to evaluate after mapping has\r\n\t\t\t// completed if the user already evaluated the DO themselves in the meantime.\r\n\t\t\tvar wrap = function (DO) {\r\n\t\t\t\t// Temporarily revert ko.dependentObservable, since it is used in ko.isWriteableObservable\r\n\t\t\t\tvar tmp = ko.dependentObservable;\r\n\t\t\t\tko.dependentObservable = realKoDependentObservable;\r\n\t\t\t\tvar isWriteable = ko.isWriteableObservable(DO);\r\n\t\t\t\tko.dependentObservable = tmp;\r\n\r\n\t\t\t\tvar wrapped = realKoDependentObservable({\r\n\t\t\t\t\tread: function () {\r\n\t\t\t\t\t\tif (!isRemoved) {\r\n\t\t\t\t\t\t\tko.utils.arrayRemoveItem(dependentObservables, DO);\r\n\t\t\t\t\t\t\tisRemoved = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn DO.apply(DO, arguments);\r\n\t\t\t\t\t},\r\n\t\t\t\t\twrite: isWriteable \u0026\u0026 function (val) {\r\n\t\t\t\t\t\treturn DO(val);\r\n\t\t\t\t\t},\r\n\t\t\t\t\tdeferEvaluation: true\r\n\t\t\t\t});\r\n\t\t\t\tif (DEBUG) wrapped._wrapper = true;\r\n\t\t\t\twrapped.__DO = DO;\r\n\t\t\t\treturn wrapped;\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\toptions.deferEvaluation = true; // will either set for just options, or both read/options.\r\n\t\t\tvar realDependentObservable = new realKoDependentObservable(read, owner, options);\r\n\r\n\t\t\tif (!realDeferEvaluation) {\r\n\t\t\t\trealDependentObservable = wrap(realDependentObservable);\r\n\t\t\t\tdependentObservables.push(realDependentObservable);\r\n\t\t\t}\r\n\r\n\t\t\treturn realDependentObservable;\r\n\t\t}\r\n\t\tko.dependentObservable.fn = realKoDependentObservable.fn;\r\n\t\tko.computed = ko.dependentObservable;\r\n\t\tvar result = callback();\r\n\t\tko.dependentObservable = localDO;\r\n\t\tko.computed = ko.dependentObservable;\r\n\t\treturn result;\r\n\t}\r\n\r\n\tfunction updateViewModel(mappedRootObject, rootObject, options, parentName, parent, parentPropertyName, mappedParent) {\r\n\t\tvar isArray = exports.getType(ko.utils.unwrapObservable(rootObject)) === \"array\";\r\n\r\n\t\tparentPropertyName = parentPropertyName || \"\";\r\n\r\n\t\t// If this object was already mapped previously, take the options from there and merge them with our existing ones.\r\n\t\tif (exports.isMapped(mappedRootObject)) {\r\n\t\t\tvar previousMapping = ko.utils.unwrapObservable(mappedRootObject)[mappingProperty];\r\n\t\t\toptions = merge(previousMapping, options);\r\n\t\t}\r\n\r\n\t\tvar callbackParams = {\r\n\t\t\tdata: rootObject,\r\n\t\t\tparent: mappedParent || parent\r\n\t\t};\r\n\r\n\t\tvar hasCreateCallback = function () {\r\n\t\t\treturn options[parentName] \u0026\u0026 options[parentName].create instanceof Function;\r\n\t\t};\r\n\r\n\t\tvar createCallback = function (data) {\r\n\t\t\treturn withProxyDependentObservable(dependentObservables, function () {\r\n\t\t\t\t\r\n\t\t\t\tif (ko.utils.unwrapObservable(parent) instanceof Array) {\r\n\t\t\t\t\treturn options[parentName].create({\r\n\t\t\t\t\t\tdata: data || callbackParams.data,\r\n\t\t\t\t\t\tparent: callbackParams.parent,\r\n\t\t\t\t\t\tskip: emptyReturn\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn options[parentName].create({\r\n\t\t\t\t\t\tdata: data || callbackParams.data,\r\n\t\t\t\t\t\tparent: callbackParams.parent\r\n\t\t\t\t\t});\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\tvar hasUpdateCallback = function () {\r\n\t\t\treturn options[parentName] \u0026\u0026 options[parentName].update instanceof Function;\r\n\t\t};\r\n\r\n\t\tvar updateCallback = function (obj, data) {\r\n\t\t\tvar params = {\r\n\t\t\t\tdata: data || callbackParams.data,\r\n\t\t\t\tparent: callbackParams.parent,\r\n\t\t\t\ttarget: ko.utils.unwrapObservable(obj)\r\n\t\t\t};\r\n\r\n\t\t\tif (ko.isWriteableObservable(obj)) {\r\n\t\t\t\tparams.observable = obj;\r\n\t\t\t}\r\n\r\n\t\t\treturn options[parentName].update(params);\r\n\t\t}\r\n\r\n\t\tvar alreadyMapped = visitedObjects.get(rootObject);\r\n\t\tif (alreadyMapped) {\r\n\t\t\treturn alreadyMapped;\r\n\t\t}\r\n\r\n\t\tparentName = parentName || \"\";\r\n\r\n\t\tif (!isArray) {\r\n\t\t\t// For atomic types, do a direct update on the observable\r\n\t\t\tif (!canHaveProperties(rootObject)) {\r\n\t\t\t\tswitch (exports.getType(rootObject)) {\r\n\t\t\t\tcase \"function\":\r\n\t\t\t\t\tif (hasUpdateCallback()) {\r\n\t\t\t\t\t\tif (ko.isWriteableObservable(rootObject)) {\r\n\t\t\t\t\t\t\trootObject(updateCallback(rootObject));\r\n\t\t\t\t\t\t\tmappedRootObject = rootObject;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tmappedRootObject = updateCallback(rootObject);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tmappedRootObject = rootObject;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tif (ko.isWriteableObservable(mappedRootObject)) {\r\n\t\t\t\t\t\tif (hasUpdateCallback()) {\r\n\t\t\t\t\t\t\tvar valueToWrite = updateCallback(mappedRootObject);\r\n\t\t\t\t\t\t\tmappedRootObject(valueToWrite);\r\n\t\t\t\t\t\t\treturn valueToWrite;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tvar valueToWrite = ko.utils.unwrapObservable(rootObject);\r\n\t\t\t\t\t\t\tmappedRootObject(valueToWrite);\r\n\t\t\t\t\t\t\treturn valueToWrite;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar hasCreateOrUpdateCallback = hasCreateCallback() || hasUpdateCallback();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (hasCreateCallback()) {\r\n\t\t\t\t\t\t\tmappedRootObject = createCallback();\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tmappedRootObject = ko.observable(ko.utils.unwrapObservable(rootObject));\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (hasUpdateCallback()) {\r\n\t\t\t\t\t\t\tmappedRootObject(updateCallback(mappedRootObject));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (hasCreateOrUpdateCallback) return mappedRootObject;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\t\t\t\tmappedRootObject = ko.utils.unwrapObservable(mappedRootObject);\r\n\t\t\t\tif (!mappedRootObject) {\r\n\t\t\t\t\tif (hasCreateCallback()) {\r\n\t\t\t\t\t\tvar result = createCallback();\r\n\r\n\t\t\t\t\t\tif (hasUpdateCallback()) {\r\n\t\t\t\t\t\t\tresult = updateCallback(result);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (hasUpdateCallback()) {\r\n\t\t\t\t\t\t\treturn updateCallback(result);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tmappedRootObject = {};\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (hasUpdateCallback()) {\r\n\t\t\t\t\tmappedRootObject = updateCallback(mappedRootObject);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvisitedObjects.save(rootObject, mappedRootObject);\r\n\t\t\t\tif (hasUpdateCallback()) return mappedRootObject;\r\n\r\n\t\t\t\t// For non-atomic types, visit all properties and update recursively\r\n\t\t\t\tvisitPropertiesOrArrayEntries(rootObject, function (indexer) {\r\n\t\t\t\t\tvar fullPropertyName = parentPropertyName.length ? parentPropertyName + \".\" + indexer : indexer;\r\n\r\n\t\t\t\t\tif (ko.utils.arrayIndexOf(options.ignore, fullPropertyName) != -1) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (ko.utils.arrayIndexOf(options.copy, fullPropertyName) != -1) {\r\n\t\t\t\t\t\tmappedRootObject[indexer] = rootObject[indexer];\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif(typeof rootObject[indexer] != \"object\" \u0026\u0026 typeof rootObject[indexer] != \"array\" \u0026\u0026 options.observe.length \u003e 0 \u0026\u0026 ko.utils.arrayIndexOf(options.observe, fullPropertyName) == -1)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tmappedRootObject[indexer] = rootObject[indexer];\r\n\t\t\t\t\t\toptions.copiedProperties[fullPropertyName] = true;\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t// In case we are adding an already mapped property, fill it with the previously mapped property value to prevent recursion.\r\n\t\t\t\t\t// If this is a property that was generated by fromJS, we should use the options specified there\r\n\t\t\t\t\tvar prevMappedProperty = visitedObjects.get(rootObject[indexer]);\r\n\t\t\t\t\tvar retval = updateViewModel(mappedRootObject[indexer], rootObject[indexer], options, indexer, mappedRootObject, fullPropertyName, mappedRootObject);\r\n\t\t\t\t\tvar value = prevMappedProperty || retval;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(options.observe.length \u003e 0 \u0026\u0026 ko.utils.arrayIndexOf(options.observe, fullPropertyName) == -1)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tmappedRootObject[indexer] = value();\r\n\t\t\t\t\t\toptions.copiedProperties[fullPropertyName] = true;\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (ko.isWriteableObservable(mappedRootObject[indexer])) {\r\n\t\t\t\t\t\tvalue = ko.utils.unwrapObservable(value);\r\n\t\t\t\t\t\tif (mappedRootObject[indexer]() !== value) {\r\n\t\t\t\t\t\t\tmappedRootObject[indexer](value);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvalue = mappedRootObject[indexer] === undefined ? value : ko.utils.unwrapObservable(value);\r\n\t\t\t\t\t\tmappedRootObject[indexer] = value;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\toptions.mappedProperties[fullPropertyName] = true;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t} else { //mappedRootObject is an array\r\n\t\t\tvar changes = [];\r\n\r\n\t\t\tvar hasKeyCallback = false;\r\n\t\t\tvar keyCallback = function (x) {\r\n\t\t\t\treturn x;\r\n\t\t\t}\r\n\t\t\tif (options[parentName] \u0026\u0026 options[parentName].key) {\r\n\t\t\t\tkeyCallback = options[parentName].key;\r\n\t\t\t\thasKeyCallback = true;\r\n\t\t\t}\r\n\r\n\t\t\tif (!ko.isObservable(mappedRootObject)) {\r\n\t\t\t\t// When creating the new observable array, also add a bunch of utility functions that take the \u0027key\u0027 of the array items into account.\r\n\t\t\t\tmappedRootObject = ko.observableArray([]);\r\n\r\n\t\t\t\tmappedRootObject.mappedRemove = function (valueOrPredicate) {\r\n\t\t\t\t\tvar predicate = typeof valueOrPredicate == \"function\" ? valueOrPredicate : function (value) {\r\n\t\t\t\t\t\t\treturn value === keyCallback(valueOrPredicate);\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\treturn mappedRootObject.remove(function (item) {\r\n\t\t\t\t\t\treturn predicate(keyCallback(item));\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmappedRootObject.mappedRemoveAll = function (arrayOfValues) {\r\n\t\t\t\t\tvar arrayOfKeys = filterArrayByKey(arrayOfValues, keyCallback);\r\n\t\t\t\t\treturn mappedRootObject.remove(function (item) {\r\n\t\t\t\t\t\treturn ko.utils.arrayIndexOf(arrayOfKeys, keyCallback(item)) != -1;\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmappedRootObject.mappedDestroy = function (valueOrPredicate) {\r\n\t\t\t\t\tvar predicate = typeof valueOrPredicate == \"function\" ? valueOrPredicate : function (value) {\r\n\t\t\t\t\t\t\treturn value === keyCallback(valueOrPredicate);\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\treturn mappedRootObject.destroy(function (item) {\r\n\t\t\t\t\t\treturn predicate(keyCallback(item));\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmappedRootObject.mappedDestroyAll = function (arrayOfValues) {\r\n\t\t\t\t\tvar arrayOfKeys = filterArrayByKey(arrayOfValues, keyCallback);\r\n\t\t\t\t\treturn mappedRootObject.destroy(function (item) {\r\n\t\t\t\t\t\treturn ko.utils.arrayIndexOf(arrayOfKeys, keyCallback(item)) != -1;\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmappedRootObject.mappedIndexOf = function (item) {\r\n\t\t\t\t\tvar keys = filterArrayByKey(mappedRootObject(), keyCallback);\r\n\t\t\t\t\tvar key = keyCallback(item);\r\n\t\t\t\t\treturn ko.utils.arrayIndexOf(keys, key);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmappedRootObject.mappedGet = function (item) {\r\n\t\t\t\t\treturn mappedRootObject()[mappedRootObject.mappedIndexOf(item)];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmappedRootObject.mappedCreate = function (value) {\r\n\t\t\t\t\tif (mappedRootObject.mappedIndexOf(value) !== -1) {\r\n\t\t\t\t\t\tthrow new Error(\"There already is an object with the key that you specified.\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar item = hasCreateCallback() ? createCallback(value) : value;\r\n\t\t\t\t\tif (hasUpdateCallback()) {\r\n\t\t\t\t\t\tvar newValue = updateCallback(item, value);\r\n\t\t\t\t\t\tif (ko.isWriteableObservable(item)) {\r\n\t\t\t\t\t\t\titem(newValue);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\titem = newValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmappedRootObject.push(item);\r\n\t\t\t\t\treturn item;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar currentArrayKeys = filterArrayByKey(ko.utils.unwrapObservable(mappedRootObject), keyCallback).sort();\r\n\t\t\tvar newArrayKeys = filterArrayByKey(rootObject, keyCallback);\r\n\t\t\tif (hasKeyCallback) newArrayKeys.sort();\r\n\t\t\tvar editScript = ko.utils.compareArrays(currentArrayKeys, newArrayKeys);\r\n\r\n\t\t\tvar ignoreIndexOf = {};\r\n\t\t\t\r\n\t\t\tvar i, j;\r\n\r\n\t\t\tvar unwrappedRootObject = ko.utils.unwrapObservable(rootObject);\r\n\t\t\tvar itemsByKey = {};\r\n\t\t\tvar optimizedKeys = true;\r\n\t\t\tfor (i = 0, j = unwrappedRootObject.length; i \u003c j; i++) {\r\n\t\t\t\tvar key = keyCallback(unwrappedRootObject[i]);\r\n\t\t\t\tif (key === undefined || key instanceof Object) {\r\n\t\t\t\t\toptimizedKeys = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\titemsByKey[key] = unwrappedRootObject[i];\r\n\t\t\t}\r\n\r\n\t\t\tvar newContents = [];\r\n\t\t\tvar passedOver = 0;\r\n\t\t\tfor (i = 0, j = editScript.length; i \u003c j; i++) {\r\n\t\t\t\tvar key = editScript[i];\r\n\t\t\t\tvar mappedItem;\r\n\t\t\t\tvar fullPropertyName = parentPropertyName + \"[\" + i + \"]\";\r\n\t\t\t\tswitch (key.status) {\r\n\t\t\t\tcase \"added\":\r\n\t\t\t\t\tvar item = optimizedKeys ? itemsByKey[key.value] : getItemByKey(ko.utils.unwrapObservable(rootObject), key.value, keyCallback);\r\n\t\t\t\t\tmappedItem = updateViewModel(undefined, item, options, parentName, mappedRootObject, fullPropertyName, parent);\r\n\t\t\t\t\tif(!hasCreateCallback()) {\r\n\t\t\t\t\t\tmappedItem = ko.utils.unwrapObservable(mappedItem);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar index = ignorableIndexOf(ko.utils.unwrapObservable(rootObject), item, ignoreIndexOf);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (mappedItem === emptyReturn) {\r\n\t\t\t\t\t\tpassedOver++;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tnewContents[index - passedOver] = mappedItem;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tignoreIndexOf[index] = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"retained\":\r\n\t\t\t\t\tvar item = optimizedKeys ? itemsByKey[key.value] : getItemByKey(ko.utils.unwrapObservable(rootObject), key.value, keyCallback);\r\n\t\t\t\t\tmappedItem = getItemByKey(mappedRootObject, key.value, keyCallback);\r\n\t\t\t\t\tupdateViewModel(mappedItem, item, options, parentName, mappedRootObject, fullPropertyName, parent);\r\n\r\n\t\t\t\t\tvar index = ignorableIndexOf(ko.utils.unwrapObservable(rootObject), item, ignoreIndexOf);\r\n\t\t\t\t\tnewContents[index] = mappedItem;\r\n\t\t\t\t\tignoreIndexOf[index] = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"deleted\":\r\n\t\t\t\t\tmappedItem = getItemByKey(mappedRootObject, key.value, keyCallback);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tchanges.push({\r\n\t\t\t\t\tevent: key.status,\r\n\t\t\t\t\titem: mappedItem\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tmappedRootObject(newContents);\r\n\r\n\t\t\tif (options[parentName] \u0026\u0026 options[parentName].arrayChanged) {\r\n\t\t\t\tko.utils.arrayForEach(changes, function (change) {\r\n\t\t\t\t\toptions[parentName].arrayChanged(change.event, change.item);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn mappedRootObject;\r\n\t}\r\n\r\n\tfunction ignorableIndexOf(array, item, ignoreIndices) {\r\n\t\tfor (var i = 0, j = array.length; i \u003c j; i++) {\r\n\t\t\tif (ignoreIndices[i] === true) continue;\r\n\t\t\tif (array[i] === item) return i;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tfunction mapKey(item, callback) {\r\n\t\tvar mappedItem;\r\n\t\tif (callback) mappedItem = callback(item);\r\n\t\tif (exports.getType(mappedItem) === \"undefined\") mappedItem = item;\r\n\r\n\t\treturn ko.utils.unwrapObservable(mappedItem);\r\n\t}\r\n\r\n\tfunction getItemByKey(array, key, callback) {\r\n\t\tarray = ko.utils.unwrapObservable(array);\r\n\t\tfor (var i = 0, j = array.length; i \u003c j; i++) {\r\n\t\t\tvar item = array[i];\r\n\t\t\tif (mapKey(item, callback) === key) return item;\r\n\t\t}\r\n\r\n\t\tthrow new Error(\"When calling ko.update*, the key \u0027\" + key + \"\u0027 was not found!\");\r\n\t}\r\n\r\n\tfunction filterArrayByKey(array, callback) {\r\n\t\treturn ko.utils.arrayMap(ko.utils.unwrapObservable(array), function (item) {\r\n\t\t\tif (callback) {\r\n\t\t\t\treturn mapKey(item, callback);\r\n\t\t\t} else {\r\n\t\t\t\treturn item;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tfunction visitPropertiesOrArrayEntries(rootObject, visitorCallback) {\r\n\t\tif (exports.getType(rootObject) === \"array\") {\r\n\t\t\tfor (var i = 0; i \u003c rootObject.length; i++)\r\n\t\t\tvisitorCallback(i);\r\n\t\t} else {\r\n\t\t\tfor (var propertyName in rootObject)\r\n\t\t\tvisitorCallback(propertyName);\r\n\t\t}\r\n\t};\r\n\r\n\tfunction canHaveProperties(object) {\r\n\t\tvar type = exports.getType(object);\r\n\t\treturn ((type === \"object\") || (type === \"array\")) \u0026\u0026 (object !== null);\r\n\t}\r\n\r\n\t// Based on the parentName, this creates a fully classified name of a property\r\n\r\n\tfunction getPropertyName(parentName, parent, indexer) {\r\n\t\tvar propertyName = parentName || \"\";\r\n\t\tif (exports.getType(parent) === \"array\") {\r\n\t\t\tif (parentName) {\r\n\t\t\t\tpropertyName += \"[\" + indexer + \"]\";\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (parentName) {\r\n\t\t\t\tpropertyName += \".\";\r\n\t\t\t}\r\n\t\t\tpropertyName += indexer;\r\n\t\t}\r\n\t\treturn propertyName;\r\n\t}\r\n\r\n\texports.visitModel = function (rootObject, callback, options) {\r\n\t\toptions = options || {};\r\n\t\toptions.visitedObjects = options.visitedObjects || new objectLookup();\r\n\r\n\t\tvar mappedRootObject;\r\n\t\tvar unwrappedRootObject = ko.utils.unwrapObservable(rootObject);\r\n\r\n\t\tif (!canHaveProperties(unwrappedRootObject)) {\r\n\t\t\treturn callback(rootObject, options.parentName);\r\n\t\t} else {\r\n\t\t\toptions = fillOptions(options, unwrappedRootObject[mappingProperty]);\r\n\r\n\t\t\t// Only do a callback, but ignore the results\r\n\t\t\tcallback(rootObject, options.parentName);\r\n\t\t\tmappedRootObject = exports.getType(unwrappedRootObject) === \"array\" ? [] : {};\r\n\t\t}\r\n\r\n\t\toptions.visitedObjects.save(rootObject, mappedRootObject);\r\n\r\n\t\tvar parentName = options.parentName;\r\n\t\tvisitPropertiesOrArrayEntries(unwrappedRootObject, function (indexer) {\r\n\t\t\tif (options.ignore \u0026\u0026 ko.utils.arrayIndexOf(options.ignore, indexer) != -1) return;\r\n\r\n\t\t\tvar propertyValue = unwrappedRootObject[indexer];\r\n\t\t\toptions.parentName = getPropertyName(parentName, unwrappedRootObject, indexer);\r\n\r\n\t\t\t// If we don\u0027t want to explicitly copy the unmapped property...\r\n\t\t\tif (ko.utils.arrayIndexOf(options.copy, indexer) === -1) {\r\n\t\t\t\t// ...find out if it\u0027s a property we want to explicitly include\r\n\t\t\t\tif (ko.utils.arrayIndexOf(options.include, indexer) === -1) {\r\n\t\t\t\t\t// The mapped properties object contains all the properties that were part of the original object.\r\n\t\t\t\t\t// If a property does not exist, and it is not because it is part of an array (e.g. \"myProp[3]\"), then it should not be unmapped.\r\n\t\t\t\t    if (unwrappedRootObject[mappingProperty]\r\n\t\t\t\t        \u0026\u0026 unwrappedRootObject[mappingProperty].mappedProperties \u0026\u0026 !unwrappedRootObject[mappingProperty].mappedProperties[indexer]\r\n\t\t\t\t        \u0026\u0026 unwrappedRootObject[mappingProperty].copiedProperties \u0026\u0026 !unwrappedRootObject[mappingProperty].copiedProperties[indexer]\r\n\t\t\t\t        \u0026\u0026 !(exports.getType(unwrappedRootObject) === \"array\")) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar outputProperty;\r\n\t\t\tswitch (exports.getType(ko.utils.unwrapObservable(propertyValue))) {\r\n\t\t\tcase \"object\":\r\n\t\t\tcase \"array\":\r\n\t\t\tcase \"undefined\":\r\n\t\t\t\tvar previouslyMappedValue = options.visitedObjects.get(propertyValue);\r\n\t\t\t\tmappedRootObject[indexer] = (exports.getType(previouslyMappedValue) !== \"undefined\") ? previouslyMappedValue : exports.visitModel(propertyValue, callback, options);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tmappedRootObject[indexer] = callback(propertyValue, options.parentName);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn mappedRootObject;\r\n\t}\r\n\r\n\tfunction simpleObjectLookup() {\r\n\t\tvar keys = [];\r\n\t\tvar values = [];\r\n\t\tthis.save = function (key, value) {\r\n\t\t\tvar existingIndex = ko.utils.arrayIndexOf(keys, key);\r\n\t\t\tif (existingIndex \u003e= 0) values[existingIndex] = value;\r\n\t\t\telse {\r\n\t\t\t\tkeys.push(key);\r\n\t\t\t\tvalues.push(value);\r\n\t\t\t}\r\n\t\t};\r\n\t\tthis.get = function (key) {\r\n\t\t\tvar existingIndex = ko.utils.arrayIndexOf(keys, key);\r\n\t\t\tvar value = (existingIndex \u003e= 0) ? values[existingIndex] : undefined;\r\n\t\t\treturn value;\r\n\t\t};\r\n\t};\r\n\t\r\n\tfunction objectLookup() {\r\n\t\tvar buckets = {};\r\n\t\t\r\n\t\tvar findBucket = function(key) {\r\n\t\t\tvar bucketKey;\r\n\t\t\ttry {\r\n\t\t\t\tbucketKey = key;//JSON.stringify(key);\r\n\t\t\t}\r\n\t\t\tcatch (e) {\r\n\t\t\t\tbucketKey = \"$$$\";\r\n\t\t\t}\r\n\r\n\t\t\tvar bucket = buckets[bucketKey];\r\n\t\t\tif (bucket === undefined) {\r\n\t\t\t\tbucket = new simpleObjectLookup();\r\n\t\t\t\tbuckets[bucketKey] = bucket;\r\n\t\t\t}\r\n\t\t\treturn bucket;\r\n\t\t};\r\n\t\t\r\n\t\tthis.save = function (key, value) {\r\n\t\t\tfindBucket(key).save(key, value);\r\n\t\t};\r\n\t\tthis.get = function (key) {\r\n\t\t\treturn findBucket(key).get(key);\r\n\t\t};\r\n\t};\r\n}));"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Libraries/knockout/knockout.mapping.debug.js");
	globalEval(/*FILE-BEGIN*/"/// \u003creference path=\"../../SDL.Client.Core/Types/Object.d.ts\" /\u003e\r\n/// \u003creference path=\"../../SDL.Client.UI.Core/Controls/Base.d.ts\" /\u003e\r\n/// \u003creference path=\"../../SDL.Client.UI.Core/Renderers/ControlRenderer.d.ts\" /\u003e\r\n/// \u003creference path=\"../Libraries/knockout/knockout.d.ts\" /\u003e\r\n/// \u003creference path=\"../Utils/knockout.ts\" /\u003e\r\nvar SDL;\r\n(function (SDL) {\r\n    (function (UI) {\r\n        (function (Core) {\r\n            (function (Knockout) {\r\n                (function (Controls) {\r\n                    function createKnockoutBinding(control, name) {\r\n                        ko.bindingHandlers[name] = new KnockoutBindingHandler(control, name);\r\n                    }\r\n                    Controls.createKnockoutBinding = createKnockoutBinding;\r\n\r\n                    var KnockoutBindingHandler = (function () {\r\n                        function KnockoutBindingHandler(control, name) {\r\n                            this.control = control;\r\n                            this.name = name;\r\n\r\n                            // knockout calls init and update without KnockoutBindingHandler\u0027s context\r\n                            this.init = this.init.bind(this);\r\n                            this.update = this.update.bind(this);\r\n                        }\r\n                        KnockoutBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {\r\n                            // everything is done in update\r\n                        };\r\n\r\n                        KnockoutBindingHandler.prototype.update = function (element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n                            var _this = this;\r\n                            var values = valueAccessor();\r\n                            var attrName = Core.Controls.getInstanceAttributeName(this.control);\r\n                            var instance = element[attrName];\r\n\r\n                            var controlEvents;\r\n                            var events = ko.unwrap(allBindings.get(\"controlEvents\"));\r\n                            if (events) {\r\n                                controlEvents = events[this.name];\r\n                            }\r\n\r\n                            if (!instance || (instance.getDisposed \u0026\u0026 instance.getDisposed())) {\r\n                                if (instance) {\r\n                                    // instance is there -\u003e it\u0027s disposed -\u003e release references to event handlers\r\n                                    instance[KnockoutBindingHandler.eventHandlersAttributeName] = null;\r\n                                }\r\n\r\n                                // create a control instance\r\n                                element[attrName] = instance = new this.control(element, Knockout.Utils.unwrapRecursive(values));\r\n                                instance.render();\r\n                                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {\r\n                                    if (instance.getDisposed \u0026\u0026 !instance.getDisposed()) {\r\n                                        // not disposed yet -\u003e remove handlers and dispose\r\n                                        _this.removeEventHandlers(instance);\r\n                                        Core.Renderers.ControlRenderer.disposeControl(instance);\r\n                                    } else {\r\n                                        // already disposed -\u003e release references to event handlers\r\n                                        instance[KnockoutBindingHandler.eventHandlersAttributeName] = null;\r\n                                    }\r\n                                });\r\n\r\n                                this.addEventHandlers(instance, controlEvents, values, bindingContext[\u0027$data\u0027]);\r\n                            } else {\r\n                                this.removeEventHandlers(instance);\r\n                                this.addEventHandlers(instance, controlEvents, values, bindingContext[\u0027$data\u0027]);\r\n\r\n                                if (instance.update) {\r\n                                    // Call update on the existing instance\r\n                                    instance.update(Knockout.Utils.unwrapRecursive(values));\r\n                                }\r\n                            }\r\n                        };\r\n\r\n                        KnockoutBindingHandler.prototype.addEventHandlers = function (instance, controlEvents, values, viewModel) {\r\n                            if (instance.addEventListener) {\r\n                                var events = instance[KnockoutBindingHandler.eventHandlersAttributeName] = {};\r\n                                var propertyChangeHandler = (values ? function (e) {\r\n                                    var propertyChain = (e.data.property + \"\").split(\".\");\r\n                                    var setting = values;\r\n\r\n                                    for (var i = 0; setting \u0026\u0026 i \u003c propertyChain.length; i++) {\r\n                                        setting = ko.unwrap(setting);\r\n                                        if (setting) {\r\n                                            setting = setting[propertyChain[i]];\r\n                                        }\r\n                                    }\r\n\r\n                                    if (ko.isWriteableObservable(setting)) {\r\n                                        setting(e.data.value);\r\n                                    } else if (propertyChain.length \u003e 1 \u0026\u0026 ko.isWriteableObservable(values[e.data.property])) {\r\n                                        values[e.data.property](e.data.value);\r\n                                    }\r\n                                } : null);\r\n\r\n                                if (controlEvents) {\r\n                                    SDL.jQuery.each(controlEvents, function (eventName, eventHandler) {\r\n                                        if (SDL.Client.Type.isFunction(eventHandler)) {\r\n                                            if (eventName == \"propertychange\" \u0026\u0026 propertyChangeHandler) {\r\n                                                instance.addEventListener(eventName, events[eventName] = function (e) {\r\n                                                    propertyChangeHandler(e);\r\n                                                    eventHandler.apply(viewModel, [viewModel, e, instance]);\r\n                                                });\r\n                                            } else {\r\n                                                instance.addEventListener(eventName, events[eventName] = function (e) {\r\n                                                    eventHandler.apply(viewModel, [viewModel, e, instance]);\r\n                                                });\r\n                                            }\r\n                                        }\r\n                                    });\r\n                                }\r\n\r\n                                if (propertyChangeHandler \u0026\u0026 !events[\"propertychange\"]) {\r\n                                    instance.addEventListener(\"propertychange\", events[\"propertychange\"] = propertyChangeHandler);\r\n                                }\r\n                            }\r\n                        };\r\n\r\n                        KnockoutBindingHandler.prototype.removeEventHandlers = function (instance) {\r\n                            if (instance[KnockoutBindingHandler.eventHandlersAttributeName]) {\r\n                                SDL.jQuery.each(instance[KnockoutBindingHandler.eventHandlersAttributeName], function (event, handler) {\r\n                                    instance.removeEventListener(event, handler);\r\n                                });\r\n                                instance[KnockoutBindingHandler.eventHandlersAttributeName] = null;\r\n                            }\r\n                        };\r\n                        KnockoutBindingHandler.eventHandlersAttributeName = \"data-__knockout_binding_events__\";\r\n                        return KnockoutBindingHandler;\r\n                    })();\r\n                })(Knockout.Controls || (Knockout.Controls = {}));\r\n                var Controls = Knockout.Controls;\r\n            })(Core.Knockout || (Core.Knockout = {}));\r\n            var Knockout = Core.Knockout;\r\n        })(UI.Core || (UI.Core = {}));\r\n        var Core = UI.Core;\r\n    })(SDL.UI || (SDL.UI = {}));\r\n    var UI = SDL.UI;\r\n})(SDL || (SDL = {}));\r\n//# sourceMappingURL=Base.js.map\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Controls/Base.js");
	globalEval(/*FILE-BEGIN*/"(function($)\r\n{\r\n\tvar orig_remove = $.fn.remove;\r\n\t$.fn.remove = function(selector)\r\n\t{\r\n\t\t(selector ? this.filter(selector) : this)\r\n\t\t.each(function()\r\n\t\t{\r\n\t\t\tko.cleanNode(this);\r\n\t\t});\r\n\r\n\t\tif (orig_remove)\r\n\t\t{\r\n\t\t\treturn orig_remove.apply(this, arguments);\r\n\t\t}\r\n\t};\r\n})(SDL.jQuery);"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Utils/Dom.js");
	globalEval(/*FILE-BEGIN*/"/// \u003creference path=\"../../SDL.Client.Core/Libraries/jQuery/SDL.jQuery.d.ts\" /\u003e\r\n/// \u003creference path=\"../../SDL.Client.Core/Types/Types.d.ts\" /\u003e\r\n/// \u003creference path=\"../Libraries/knockout/knockout.d.ts\" /\u003e\r\nvar SDL;\r\n(function (SDL) {\r\n    (function (UI) {\r\n        (function (Core) {\r\n            (function (Knockout) {\r\n                (function (Utils) {\r\n                    function unwrapRecursive(value, maxDepth) {\r\n                        if (typeof maxDepth === \"undefined\") { maxDepth = 5; }\r\n                        return _unwrapRecursive(value, maxDepth = 5, []);\r\n                    }\r\n                    Utils.unwrapRecursive = unwrapRecursive;\r\n\r\n                    function _unwrapRecursive(value, maxDepth, mappedValues) {\r\n                        var result;\r\n                        value = ko.unwrap(value);\r\n\r\n                        if (maxDepth \u003c= 0 || !value || SDL.jQuery.isWindow(value) || SDL.Client.Type.isDate(value) || SDL.Client.Type.isNode(value) || SDL.Client.Type.isFunction(value)) {\r\n                            result = value;\r\n                        } else {\r\n                            for (var i = 0; i \u003c mappedValues.length; i++) {\r\n                                if (mappedValues[i].value == value) {\r\n                                    result = mappedValues[i].value;\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                            if (!result) {\r\n                                if (SDL.Client.Type.isArray(value)) {\r\n                                    result = [];\r\n                                } else if (typeof value == \u0027object\u0027) {\r\n                                    if ((value instanceof Boolean) || (value instanceof Number) || (value instanceof String)) {\r\n                                        result = new value.constructor(value); // recreate if instance of Boolean, String or Number\r\n                                    } else {\r\n                                        result = {};\r\n                                    }\r\n                                }\r\n\r\n                                if (result) {\r\n                                    mappedValues.push({ value: value, result: result });\r\n\r\n                                    var changed = false;\r\n                                    for (var p in value) {\r\n                                        var k = (p == null ? \"\" : p);\r\n                                        var unwrapped = result[k] = _unwrapRecursive(value[k], maxDepth - 1, mappedValues);\r\n                                        changed = changed || (unwrapped != value[k]);\r\n                                    }\r\n\r\n                                    if (!changed) {\r\n                                        result = value;\r\n                                    }\r\n                                } else if (SDL.Client.Type.isFunction(value.valueOf)) {\r\n                                    result = value.valueOf();\r\n                                } else {\r\n                                    result = value;\r\n                                }\r\n                            }\r\n                        }\r\n                        return result;\r\n                    }\r\n                })(Knockout.Utils || (Knockout.Utils = {}));\r\n                var Utils = Knockout.Utils;\r\n            })(Core.Knockout || (Core.Knockout = {}));\r\n            var Knockout = Core.Knockout;\r\n        })(UI.Core || (UI.Core = {}));\r\n        var Core = UI.Core;\r\n    })(SDL.UI || (SDL.UI = {}));\r\n    var UI = SDL.UI;\r\n})(SDL || (SDL = {}));\r\n//# sourceMappingURL=knockout.js.map\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Utils/knockout.js");
	globalEval(/*FILE-BEGIN*/"/// \u003creference path=\"../../SDL.Client.UI.Core/Renderers/ViewRenderer.d.ts\" /\u003e\r\n/// \u003creference path=\"../Libraries/knockout/knockout.d.ts\" /\u003e\r\n/// \u003creference path=\"../../SDL.Client.Core/Event/EventRegister.d.ts\" /\u003e\r\nvar SDL;\r\n(function (SDL) {\r\n    (function (UI) {\r\n        (function (Core) {\r\n            (function (Knockout) {\r\n                (function (Renderers) {\r\n                    var KnockoutRenderer = (function () {\r\n                        function KnockoutRenderer() {\r\n                        }\r\n                        KnockoutRenderer.prototype.render = function (templateContent, target, options, callback) {\r\n                            if (templateContent \u0026\u0026 target) {\r\n                                var $target = SDL.jQuery(target);\r\n                                $target.html(templateContent);\r\n                                ko.applyBindingsToDescendants(options, target);\r\n                            }\r\n\r\n                            if (callback) {\r\n                                callback();\r\n                            }\r\n                        };\r\n                        return KnockoutRenderer;\r\n                    })();\r\n                    ;\r\n\r\n                    SDL.Client.Event.EventRegister.addEventHandler(SDL.Client.Event.EventRegister, \"beforedispose\", function () {\r\n                        ko.cleanNode(document.body);\r\n                    });\r\n\r\n                    SDL.UI.Core.Renderers.ViewRenderer.registerTemplateRenderer(\"text/html+knockout\", new KnockoutRenderer());\r\n                })(Knockout.Renderers || (Knockout.Renderers = {}));\r\n                var Renderers = Knockout.Renderers;\r\n            })(Core.Knockout || (Core.Knockout = {}));\r\n            var Knockout = Core.Knockout;\r\n        })(UI.Core || (UI.Core = {}));\r\n        var Core = UI.Core;\r\n    })(SDL.UI || (SDL.UI = {}));\r\n    var UI = SDL.UI;\r\n})(SDL || (SDL = {}));\r\n//# sourceMappingURL=KnockoutRenderer.js.map\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Renderers/KnockoutRenderer.js");
	globalEval(/*FILE-BEGIN*/"/// \u003creference path=\"../../SDL.Client.Core/Types/Types.d.ts\" /\u003e\r\n/// \u003creference path=\"../../SDL.Client.Core/Types/DisposableObject.d.ts\" /\u003e\r\n/// \u003creference path=\"../../SDL.Client.Core/Libraries/Globalize/SDL.Globalize.d.ts\" /\u003e\r\n/// \u003creference path=\"../../SDL.Client.Core/Event/EventRegister.d.ts\" /\u003e\r\n/// \u003creference path=\"../Libraries/knockout/knockout.d.ts\" /\u003e\r\nvar __extends = this.__extends || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    __.prototype = b.prototype;\r\n    d.prototype = new __();\r\n};\r\nvar SDL;\r\n(function (SDL) {\r\n    (function (UI) {\r\n        (function (Core) {\r\n            (function (Knockout) {\r\n                (function (ViewModels) {\r\n                    eval(SDL.Client.Types.OO.enableCustomInheritance);\r\n\r\n                    var culture = ko.observable(SDL.Globalize.culture().name);\r\n                    SDL.Client.Event.EventRegister.addEventHandler(SDL.Globalize, \"culturechange\", function (e) {\r\n                        culture(e.data.culture);\r\n                    });\r\n\r\n                    var ViewModelBase = (function (_super) {\r\n                        __extends(ViewModelBase, _super);\r\n                        function ViewModelBase() {\r\n                            _super.apply(this, arguments);\r\n                            this.culture = culture;\r\n                        }\r\n                        ViewModelBase.prototype.localize = function (resource, parameters) {\r\n                            culture(); // this adds a dependency on the culture\r\n                            return SDL.Globalize.localize(resource, parameters);\r\n                        };\r\n\r\n                        ViewModelBase.prototype.format = function (value, format) {\r\n                            culture(); // this adds a dependency on the culture\r\n                            return SDL.Globalize.format(value, format);\r\n                        };\r\n                        return ViewModelBase;\r\n                    })(SDL.Client.Types.DisposableObject);\r\n                    ViewModels.ViewModelBase = ViewModelBase;\r\n                    SDL.Client.Types.OO.createInterface(\"SDL.UI.Core.Knockout.ViewModels.ViewModelBase\", ViewModelBase);\r\n                })(Knockout.ViewModels || (Knockout.ViewModels = {}));\r\n                var ViewModels = Knockout.ViewModels;\r\n            })(Core.Knockout || (Core.Knockout = {}));\r\n            var Knockout = Core.Knockout;\r\n        })(UI.Core || (UI.Core = {}));\r\n        var Core = UI.Core;\r\n    })(SDL.UI || (SDL.UI = {}));\r\n    var UI = SDL.UI;\r\n})(SDL || (SDL = {}));\r\n//# sourceMappingURL=ViewModelBase.js.map\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "ViewModels/ViewModelBase.js");
	globalEval(/*FILE-BEGIN*/"/// \u003creference path=\"../../SDL.Client.Core/Types/Types.d.ts\" /\u003e\r\n/// \u003creference path=\"../../SDL.Client.Core/Models/Models.d.ts\" /\u003e\r\n/// \u003creference path=\"../../SDL.Client.Core/Types/DisposableObject.d.ts\" /\u003e\r\n/// \u003creference path=\"../../SDL.Client.Core/Event/EventRegister.d.ts\" /\u003e\r\n/// \u003creference path=\"../Libraries/knockout/knockout.d.ts\" /\u003e\r\nvar __extends = this.__extends || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    __.prototype = b.prototype;\r\n    d.prototype = new __();\r\n};\r\nvar SDL;\r\n(function (SDL) {\r\n    (function (UI) {\r\n        (function (Core) {\r\n            (function (Knockout) {\r\n                (function (ViewModels) {\r\n                    \r\n                    ;\r\n\r\n                    ;\r\n\r\n                    eval(SDL.Client.Types.OO.enableCustomInheritance);\r\n                    var ViewModelItem = (function (_super) {\r\n                        __extends(ViewModelItem, _super);\r\n                        function ViewModelItem(item, properties, methods) {\r\n                            _super.call(this);\r\n\r\n                            var p = this.properties;\r\n\r\n                            p.item = SDL.Client.Type.isString(item) ? SDL.Client.Models.getItem(item) : item;\r\n                            p.properties = properties || {}; // i.e. {title: {getter: \"getTitle\", setter: \"setTitle\", events: [\"load\", \"change\"]}, content: {events: [\"load\", \"change\"]}}\r\n                            p.methods = methods || {}; // i.e. {load: {method: \"load\"}, reload: {method: \"load\", args: [true]}}\r\n                            p.observables = {};\r\n                        }\r\n                        ViewModelItem.prototype.$initialize = function () {\r\n                            var p = this.properties;\r\n\r\n                            this._createProperties();\r\n                            this._createMethods();\r\n                            SDL.Client.Event.EventRegister.addEventHandler(p.item, \"*\", this.getDelegate(this._onEvent));\r\n                        };\r\n\r\n                        ViewModelItem.prototype._createProperties = function () {\r\n                            var p = this.properties;\r\n                            if (p.properties) {\r\n                                for (var property in p.properties) {\r\n                                    var propOptions = (p.properties[property] || {});\r\n\r\n                                    var getter = propOptions.getter;\r\n                                    if (getter) {\r\n                                        this._checkMethod(getter);\r\n                                    }\r\n\r\n                                    var setter = propOptions.setter;\r\n                                    if (setter) {\r\n                                        this._checkMethod(setter);\r\n                                    }\r\n\r\n                                    if (!setter || !getter) {\r\n                                        var upProperty = property.charAt(0).toUpperCase() + property.slice(1);\r\n                                        if (!getter) {\r\n                                            getter = \"get\" + upProperty;\r\n                                            if (!p.item[getter]) {\r\n                                                getter = \"is\" + upProperty;\r\n                                            }\r\n\r\n                                            if (!p.item[getter]) {\r\n                                                SDL.Client.Diagnostics.Assert.raiseError(\"Unable to determine a getter for property \u0027\" + property + \"\u0027 of item \" + ((p.item).getId ? (\"\u0027\" + (p.item).getId() + \"\u0027\") : ((p.item).getTypeName ? (p.item).getTypeName() : \"\")) + \".\");\r\n                                            }\r\n                                        }\r\n\r\n                                        if (!setter) {\r\n                                            var s = \"set\" + upProperty;\r\n                                            if (p.item[s]) {\r\n                                                setter = s;\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                    this._createEventObservables(propOptions.events);\r\n\r\n                                    var options = { read: this._createPropertyReader(propOptions.events, getter) };\r\n                                    if (setter) {\r\n                                        options.write = this._createPropertyWriter(setter);\r\n                                    }\r\n\r\n                                    this[property] = ko.computed(options);\r\n                                }\r\n                            }\r\n                        };\r\n\r\n                        ViewModelItem.prototype._createPropertyReader = function (events, getter) {\r\n                            var p = this.properties;\r\n                            return function () {\r\n                                if (events) {\r\n                                    for (var i = 0, len = events.length; i \u003c len; i++) {\r\n                                        p.observables[events[i]](); // access an observable, to get this reader triggered when that observable changes\r\n                                    }\r\n                                }\r\n                                return p.item[getter]();\r\n                            };\r\n                        };\r\n\r\n                        ViewModelItem.prototype._createPropertyWriter = function (setter) {\r\n                            var p = this.properties;\r\n                            return function (value) {\r\n                                p.item[setter](value);\r\n                            };\r\n                        };\r\n\r\n                        ViewModelItem.prototype._createEventObservables = function (events) {\r\n                            if (events) {\r\n                                var observables = this.properties.observables;\r\n                                for (var i = 0, len = events.length; i \u003c len; i++) {\r\n                                    var event = events[i];\r\n                                    if (!observables[event]) {\r\n                                        observables[event] = ko.observable(0);\r\n                                    }\r\n                                }\r\n                            }\r\n                        };\r\n\r\n                        ViewModelItem.prototype._createMethods = function () {\r\n                            var methods = this.properties.methods;\r\n                            if (methods) {\r\n                                for (var method in methods) {\r\n                                    this[method] = this._createMethod(method, methods[method]);\r\n                                }\r\n                            }\r\n                        };\r\n\r\n                        ViewModelItem.prototype._createMethod = function (methodName, methodEntry) {\r\n                            var p = this.properties;\r\n                            var method = methodEntry.method || methodName;\r\n                            if (SDL.Client.Type.isFunction(method)) {\r\n                                if (methodEntry.args) {\r\n                                    return function () {\r\n                                        method.apply(this, methodEntry.args);\r\n                                    };\r\n                                } else {\r\n                                    return method;\r\n                                }\r\n                            } else {\r\n                                this._checkMethod(method);\r\n\r\n                                return function () {\r\n                                    return p.item[method].apply(p.item, methodEntry.args || arguments);\r\n                                };\r\n                            }\r\n                        };\r\n\r\n                        ViewModelItem.prototype._checkMethod = function (methodName) {\r\n                            var item = this.properties.item;\r\n                            if (!item[methodName]) {\r\n                                SDL.Client.Diagnostics.Assert.raiseError(\"Method \u0027\" + methodName + \"\u0027 is not defined on item \" + (item.getId ? (\"\u0027\" + item.getId() + \"\u0027\") : (item.getTypeName ? item.getTypeName() : \"\")) + \".\");\r\n                            }\r\n                        };\r\n\r\n                        ViewModelItem.prototype._onEvent = function (evt) {\r\n                            var p = this.properties;\r\n\r\n                            var event = evt.type;\r\n\r\n                            if (event == \"marshal\") {\r\n                                p.item = evt.target.getMarshalObject();\r\n                            }\r\n\r\n                            if (event in p.observables) {\r\n                                p.observables[event](p.observables[event]() + 1); // trigger a change in ko.observable, for dependent properties to get an update\r\n                            }\r\n                        };\r\n                        return ViewModelItem;\r\n                    })(SDL.Client.Types.DisposableObject);\r\n                    ViewModels.ViewModelItem = ViewModelItem;\r\n\r\n                    ViewModelItem.prototype.disposeInterface = SDL.Client.Types.OO.nonInheritable(function SDL$UI$Core$ViewModels$Knockout$ViewModelItem$disposeInterface() {\r\n                        var p = this.properties;\r\n                        SDL.Client.Event.EventRegister.removeEventHandler(p.item, \"*\", this.getDelegate(this._onEvent));\r\n                        p.item = null;\r\n\r\n                        for (var property in p.properties) {\r\n                            this[property].dispose();\r\n                            this[property] = null;\r\n                        }\r\n\r\n                        for (var event in p.observables) {\r\n                            p.observables[event] = null;\r\n                        }\r\n                    });\r\n\r\n                    SDL.Client.Types.OO.createInterface(\"SDL.UI.Core.Knockout.ViewModels.ViewModelItem\", ViewModelItem);\r\n                })(Knockout.ViewModels || (Knockout.ViewModels = {}));\r\n                var ViewModels = Knockout.ViewModels;\r\n            })(Core.Knockout || (Core.Knockout = {}));\r\n            var Knockout = Core.Knockout;\r\n        })(UI.Core || (UI.Core = {}));\r\n        var Core = UI.Core;\r\n    })(SDL.UI || (SDL.UI = {}));\r\n    var UI = SDL.UI;\r\n})(SDL || (SDL = {}));\r\n//# sourceMappingURL=ViewModelItem.js.map\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "ViewModels/ViewModelItem.js");
	globalEval(/*FILE-BEGIN*/"/// \u003creference path=\"../../SDL.Client.Core/Types/Types.d.ts\" /\u003e\r\n/// \u003creference path=\"../../SDL.Client.Core/Models/Models.d.ts\" /\u003e\r\n/// \u003creference path=\"ViewModelBase.ts\" /\u003e\r\n/// \u003creference path=\"ViewModelItem.ts\" /\u003e\r\nvar __extends = this.__extends || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    __.prototype = b.prototype;\r\n    d.prototype = new __();\r\n};\r\nvar SDL;\r\n(function (SDL) {\r\n    (function (UI) {\r\n        (function (Core) {\r\n            (function (Knockout) {\r\n                (function (ViewModels) {\r\n                    eval(SDL.Client.Types.OO.enableCustomInheritance);\r\n                    var ViewModel = (function (_super) {\r\n                        __extends(ViewModel, _super);\r\n                        function ViewModel(item) {\r\n                            _super.call(this);\r\n                            this.item = item;\r\n                        }\r\n                        return ViewModel;\r\n                    })(ViewModels.ViewModelBase);\r\n                    ViewModels.ViewModel = ViewModel;\r\n\r\n                    ViewModel.prototype.disposeInterface = SDL.Client.Types.OO.nonInheritable(function SDL$UI$Core$ViewModels$Knockout$ViewModel$disposeInterface() {\r\n                        if (this.item) {\r\n                            //(\u003cViewModelItem\u003ethis.item).dispose();\t// the responsibility to dispose the view model item is on the one who has created it\r\n                            this.item = undefined;\r\n                        }\r\n                    });\r\n\r\n                    SDL.Client.Types.OO.createInterface(\"SDL.UI.Core.Knockout.ViewModels.ViewModel\", ViewModel);\r\n                })(Knockout.ViewModels || (Knockout.ViewModels = {}));\r\n                var ViewModels = Knockout.ViewModels;\r\n            })(Core.Knockout || (Core.Knockout = {}));\r\n            var Knockout = Core.Knockout;\r\n        })(UI.Core || (UI.Core = {}));\r\n        var Core = UI.Core;\r\n    })(SDL.UI || (SDL.UI = {}));\r\n    var UI = SDL.UI;\r\n})(SDL || (SDL = {}));\r\n//# sourceMappingURL=ViewModel.js.map\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "ViewModels/ViewModel.js");
	globalEval(/*FILE-BEGIN*/"var SDL;\r\n(function (SDL) {\r\n    (function (UI) {\r\n        (function (Core) {\r\n            (function (Knockout) {\r\n                (function (BindingHandlers) {\r\n                    var knockoutObservableSettings = {};\r\n                    function enableKnockoutObservableSettings(type) {\r\n                        knockoutObservableSettings[type] = true;\r\n                    }\r\n                    BindingHandlers.enableKnockoutObservableSettings = enableKnockoutObservableSettings;\r\n\r\n                    function areKnockoutObservableSettingsEnabled(type) {\r\n                        return knockoutObservableSettings[type] || false;\r\n                    }\r\n                    BindingHandlers.areKnockoutObservableSettingsEnabled = areKnockoutObservableSettingsEnabled;\r\n                })(Knockout.BindingHandlers || (Knockout.BindingHandlers = {}));\r\n                var BindingHandlers = Knockout.BindingHandlers;\r\n            })(Core.Knockout || (Core.Knockout = {}));\r\n            var Knockout = Core.Knockout;\r\n        })(UI.Core || (UI.Core = {}));\r\n        var Core = UI.Core;\r\n    })(SDL.UI || (SDL.UI = {}));\r\n    var UI = SDL.UI;\r\n})(SDL || (SDL = {}));\r\n//# sourceMappingURL=KnockoutBindingHandlers.js.map\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "BindingHandlers/KnockoutBindingHandlers.js");
	globalEval(/*FILE-BEGIN*/"/// \u003creference path=\"../../SDL.Client.UI.Core/Renderers/ViewRenderer.d.ts\" /\u003e\r\n/// \u003creference path=\"../../SDL.Client.UI.Core/Views/ViewBase.d.ts\" /\u003e\r\n/// \u003creference path=\"../../SDL.Client.UI.Core/Controls/Base.d.ts\" /\u003e\r\n/// \u003creference path=\"../Libraries/knockout/knockout.d.ts\" /\u003e\r\n/// \u003creference path=\"../Utils/knockout.ts\" /\u003e\r\n/// \u003creference path=\"KnockoutBindingHandlers.ts\" /\u003e\r\nvar SDL;\r\n(function (SDL) {\r\n    (function (UI) {\r\n        (function (Core) {\r\n            (function (Knockout) {\r\n                (function (BindingHandlers) {\r\n                    var ViewKnockoutBindingHandler = (function () {\r\n                        function ViewKnockoutBindingHandler() {\r\n                        }\r\n                        ViewKnockoutBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {\r\n                            var value = ko.unwrap(valueAccessor()) || \"\";\r\n                            if (value) {\r\n                                ko.utils.domNodeDisposal.addDisposeCallback(element, ViewKnockoutBindingHandler.elementDisposalCallback);\r\n                                SDL.jQuery(element).data(\"view-create\", true);\r\n\r\n                                var type = (SDL.Client.Type.isString(value) ? value : (value.type || \"\"));\r\n                                if (type) {\r\n                                    SDL.Client.Resources.ResourceManager.load(type, function () {\r\n                                        ViewKnockoutBindingHandler.initViewBinding(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext);\r\n                                    });\r\n                                } else {\r\n                                    ViewKnockoutBindingHandler.initViewBinding(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext);\r\n                                }\r\n                                return value.controlsDescendantBindings == false ? undefined : { controlsDescendantBindings: true };\r\n                            }\r\n                            return { controlsDescendantBindings: true };\r\n                        };\r\n\r\n                        ViewKnockoutBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {\r\n                            var value = ko.unwrap(valueAccessor()) || \"\";\r\n                            if (value) {\r\n                                var $e = SDL.jQuery(element);\r\n                                var handler = $e.data(\"view-handler\");\r\n\r\n                                if (handler !== null) {\r\n                                    if (!handler) {\r\n                                        $e.data(\"view-update\", true);\r\n                                        Knockout.Utils.unwrapRecursive(value.data); // this is to make sure observables are evaluated, otherwise ko will not notify us when they change\r\n                                    } else if (handler.update) {\r\n                                        handler.update(element, ViewKnockoutBindingHandler.getDataValueAccessor(valueAccessor), allBindingsAccessor, viewModel, bindingContext);\r\n                                    } else {\r\n                                        $e.data(\"view-handler\", null);\r\n                                    }\r\n                                }\r\n                            }\r\n                        };\r\n\r\n                        ViewKnockoutBindingHandler.initViewBinding = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {\r\n                            var $e = SDL.jQuery(element);\r\n                            if ($e.data(\"view-create\")) {\r\n                                var value = ko.unwrap(valueAccessor()) || \"\";\r\n                                var type = ko.unwrap(value.type) || \"\" + value;\r\n                                var handlerName = ko.unwrap(value.handler);\r\n                                var handler;\r\n\r\n                                if (handlerName) {\r\n                                    // if handle name is provided, first try to find a registered ko binding with the name\r\n                                    handler = ko.bindingHandlers[handlerName];\r\n                                    if (!handler) {\r\n                                        try  {\r\n                                            handler = SDL.Client.Type.resolveNamespace(handlerName);\r\n                                        } catch (err) {\r\n                                            throw Error(\"Unable to resolve handler \u0027\" + handlerName + \"\u0027: \" + err.message);\r\n                                        }\r\n\r\n                                        if (!handler) {\r\n                                            throw Error(\"Unable to resolve handler \u0027\" + handlerName + \"\u0027.\");\r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    // otherwise use the type to find the ko binding\r\n                                    handler = ko.bindingHandlers[type];\r\n                                }\r\n\r\n                                if (handler) {\r\n                                    var dataValueAccessor = ViewKnockoutBindingHandler.getDataValueAccessor(valueAccessor);\r\n                                    if (handler.init) {\r\n                                        handler.init(element, dataValueAccessor, allBindingsAccessor, viewModel, bindingContext);\r\n                                    }\r\n                                    $e.data(\"view-handler\", handler);\r\n                                    if ($e.data(\"view-update\")) {\r\n                                        $e.data(\"view-update\", null);\r\n                                        if (handler.update) {\r\n                                            handler.update(element, dataValueAccessor, allBindingsAccessor, viewModel, bindingContext);\r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    $e.data(\"view-handler\", null);\r\n                                    if (type) {\r\n                                        // no handler is found, just create the view\r\n                                        SDL.UI.Core.Renderers.ViewRenderer.renderView(type, element, BindingHandlers.areKnockoutObservableSettingsEnabled(type) ? value.data : Knockout.Utils.unwrapRecursive(value.data), ViewKnockoutBindingHandler.addViewDisposalCallback);\r\n                                    }\r\n                                }\r\n                            }\r\n                        };\r\n\r\n                        ViewKnockoutBindingHandler.getDataValueAccessor = function (valueAccessor) {\r\n                            return function () {\r\n                                return valueAccessor().data;\r\n                            };\r\n                        };\r\n\r\n                        ViewKnockoutBindingHandler.elementDisposalCallback = function (element) {\r\n                            SDL.jQuery(element).removeData();\r\n                        };\r\n\r\n                        ViewKnockoutBindingHandler.addViewDisposalCallback = function (view) {\r\n                            ko.utils.domNodeDisposal.addDisposeCallback(view.getElement(), function (element) {\r\n                                SDL.UI.Core.Renderers.ViewRenderer.disposeView(view);\r\n                            });\r\n                        };\r\n                        return ViewKnockoutBindingHandler;\r\n                    })();\r\n                    ;\r\n\r\n                    ko.bindingHandlers.view = (new ViewKnockoutBindingHandler());\r\n                })(Knockout.BindingHandlers || (Knockout.BindingHandlers = {}));\r\n                var BindingHandlers = Knockout.BindingHandlers;\r\n            })(Core.Knockout || (Core.Knockout = {}));\r\n            var Knockout = Core.Knockout;\r\n        })(UI.Core || (UI.Core = {}));\r\n        var Core = UI.Core;\r\n    })(SDL.UI || (SDL.UI = {}));\r\n    var UI = SDL.UI;\r\n})(SDL || (SDL = {}));\r\n;\r\n//# sourceMappingURL=ViewKnockoutBindingHandler.js.map\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "BindingHandlers/ViewKnockoutBindingHandler.js");
	globalEval(/*FILE-BEGIN*/"/// \u003creference path=\"../../SDL.Client.UI.Core/Renderers/ControlRenderer.d.ts\" /\u003e\r\n/// \u003creference path=\"../Libraries/knockout/knockout.d.ts\" /\u003e\r\n/// \u003creference path=\"../Utils/knockout.ts\" /\u003e\r\nvar SDL;\r\n(function (SDL) {\r\n    (function (UI) {\r\n        (function (Core) {\r\n            (function (Knockout) {\r\n                (function (BindingHandlers) {\r\n                    var ControlKnockoutBindingHandler = (function () {\r\n                        function ControlKnockoutBindingHandler() {\r\n                        }\r\n                        ControlKnockoutBindingHandler.prototype.init = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {\r\n                            var value = ko.unwrap(valueAccessor());\r\n                            if (value) {\r\n                                SDL.jQuery(element).data(\"control-handlers\", {});\r\n                                ko.utils.domNodeDisposal.addDisposeCallback(element, ControlKnockoutBindingHandler.elementDisposalCallback);\r\n\r\n                                if (SDL.Client.Type.isArray(value)) {\r\n                                    SDL.jQuery.each(value, function (index, value) {\r\n                                        ControlKnockoutBindingHandler.addControlBinding(element, function () {\r\n                                            return value;\r\n                                        }, allBindingsAccessor, viewModel, bindingContext);\r\n                                    });\r\n                                } else {\r\n                                    ControlKnockoutBindingHandler.addControlBinding(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext);\r\n                                }\r\n                                return value.controlsDescendantBindings ? { controlsDescendantBindings: true } : undefined;\r\n                            }\r\n                        };\r\n\r\n                        ControlKnockoutBindingHandler.prototype.update = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {\r\n                            // TODO: implement dynamically adding/removing controls:\r\n                            //\t\t- if controls are added -\u003e they must be loaded and initialized\r\n                            //\t\t- if controls are removed -\u003e they must be disposed\r\n                            var value = ko.unwrap(valueAccessor()) || \"\";\r\n                            if (value) {\r\n                                if (SDL.Client.Type.isArray(value)) {\r\n                                    SDL.jQuery.each(value, function (index, value) {\r\n                                        ControlKnockoutBindingHandler.updateControlBinding(element, function () {\r\n                                            return value;\r\n                                        }, allBindingsAccessor, viewModel, bindingContext);\r\n                                    });\r\n                                } else {\r\n                                    ControlKnockoutBindingHandler.updateControlBinding(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext);\r\n                                }\r\n                            }\r\n                        };\r\n\r\n                        ControlKnockoutBindingHandler.addControlBinding = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {\r\n                            var value = ko.unwrap(valueAccessor()) || \"\";\r\n                            if (value) {\r\n                                var type = ko.unwrap(value.type) || \"\" + value;\r\n                                if (type) {\r\n                                    SDL.Client.Resources.ResourceManager.load(type, function () {\r\n                                        ControlKnockoutBindingHandler.initControlBinding(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext);\r\n                                    });\r\n                                } else {\r\n                                    ControlKnockoutBindingHandler.initControlBinding(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext);\r\n                                }\r\n                            }\r\n                        };\r\n\r\n                        ControlKnockoutBindingHandler.initControlBinding = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {\r\n                            var $e = SDL.jQuery(element);\r\n                            var handlers = $e.data(\"control-handlers\");\r\n                            if (handlers) {\r\n                                var value = ko.unwrap(valueAccessor());\r\n                                var type = ko.unwrap(value.type) || \"\" + (value || \"\");\r\n                                var handlerName = ko.unwrap(value.handler);\r\n                                var handler;\r\n\r\n                                if (handlerName) {\r\n                                    // if handle name is provided, first try to find a registered ko binding with the name\r\n                                    handler = ko.bindingHandlers[handlerName];\r\n                                    if (!handler) {\r\n                                        try  {\r\n                                            handler = SDL.Client.Type.resolveNamespace(handlerName);\r\n                                        } catch (err) {\r\n                                            throw Error(\"Unable to resolve handler \u0027\" + handlerName + \"\u0027: \" + err.message);\r\n                                        }\r\n\r\n                                        if (!handler) {\r\n                                            throw Error(\"Unable to resolve handler \u0027\" + handlerName + \"\u0027.\");\r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    // otherwise use the type to find the ko binding\r\n                                    handler = ko.bindingHandlers[type];\r\n                                }\r\n\r\n                                handlers[type] = handler || null;\r\n                                if (handler) {\r\n                                    var dataValueAccessor = ControlKnockoutBindingHandler.getDataValueAccessor(value);\r\n                                    var allBindingsWithEventsAccessor = ControlKnockoutBindingHandler.getAllBindingsWithEventsAccessor(allBindingsAccessor, type, value);\r\n\r\n                                    if (handler.init) {\r\n                                        handler.init(element, dataValueAccessor, allBindingsWithEventsAccessor, viewModel, bindingContext);\r\n                                    }\r\n\r\n                                    if ($e.data(\"control-update\") \u0026\u0026 handler.update) {\r\n                                        handler.update(element, dataValueAccessor, allBindingsWithEventsAccessor, viewModel, bindingContext);\r\n                                    }\r\n                                } else if (type) {\r\n                                    // no handler is found, just create the control\r\n                                    SDL.UI.Core.Renderers.ControlRenderer.renderControl(type, element, Knockout.Utils.unwrapRecursive(value.data), function (control) {\r\n                                        return ControlKnockoutBindingHandler.addControlDisposalCallback(element, control);\r\n                                    });\r\n                                }\r\n                            }\r\n                        };\r\n\r\n                        ControlKnockoutBindingHandler.updateControlBinding = function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {\r\n                            var $e = SDL.jQuery(element);\r\n                            var handlers = $e.data(\"control-handlers\");\r\n                            if (handlers) {\r\n                                var value = ko.unwrap(valueAccessor());\r\n                                if (value) {\r\n                                    var type = ko.unwrap(value.type) || \"\" + (value || \"\");\r\n                                    var handler = handlers[type];\r\n\r\n                                    if (handler !== null) {\r\n                                        if (!handler) {\r\n                                            $e.data(\"control-update\", true);\r\n                                            Knockout.Utils.unwrapRecursive(value.data); // this is to make sure observables are evaluated, otherwise ko will not notify us when they change\r\n                                        } else if (handler.update) {\r\n                                            handler.update(element, ControlKnockoutBindingHandler.getDataValueAccessor(value), ControlKnockoutBindingHandler.getAllBindingsWithEventsAccessor(allBindingsAccessor, type, value), viewModel, bindingContext);\r\n                                        } else {\r\n                                            $e.data(\"control-handlers\")[type] = null;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        };\r\n\r\n                        ControlKnockoutBindingHandler.getDataValueAccessor = function (value) {\r\n                            return function () {\r\n                                return value.data;\r\n                            };\r\n                        };\r\n\r\n                        ControlKnockoutBindingHandler.getAllBindingsWithEventsAccessor = function (allBindingsAccessor, control, value) {\r\n                            if (value.events) {\r\n                                var allBindings;\r\n                                var controlEvents;\r\n\r\n                                var allBindingsWithEventsAccessor = function () {\r\n                                    if (!allBindings) {\r\n                                        allBindings = SDL.jQuery.extend({}, allBindingsAccessor()); // cloning not to change the original value\r\n                                        allBindings.controlEvents = allBindingsWithEventsAccessor.get(\"controlEvents\");\r\n                                    }\r\n                                    return allBindings;\r\n                                };\r\n\r\n                                allBindingsWithEventsAccessor.get = function (name) {\r\n                                    if (name == \"controlEvents\") {\r\n                                        if (!controlEvents) {\r\n                                            var result = allBindingsAccessor.get(name);\r\n                                            controlEvents = result ? SDL.jQuery.extend({}, ko.unwrap(result)) : {};\r\n\r\n                                            if (!controlEvents[control]) {\r\n                                                controlEvents[control] = value.events;\r\n                                            } else {\r\n                                                controlEvents[control] = SDL.jQuery.extend(controlEvents[control], value.events);\r\n                                            }\r\n                                        }\r\n\r\n                                        return controlEvents;\r\n                                    } else {\r\n                                        return allBindingsAccessor.get(name);\r\n                                    }\r\n                                };\r\n\r\n                                allBindingsWithEventsAccessor.has = function (name) {\r\n                                    return name == \"controlEvents\" || allBindingsAccessor.has(name);\r\n                                };\r\n\r\n                                return allBindingsWithEventsAccessor;\r\n                            } else {\r\n                                return allBindingsAccessor;\r\n                            }\r\n                        };\r\n\r\n                        ControlKnockoutBindingHandler.elementDisposalCallback = function (element) {\r\n                            SDL.jQuery(element).removeData();\r\n                        };\r\n\r\n                        ControlKnockoutBindingHandler.addControlDisposalCallback = function (element, control) {\r\n                            ko.utils.domNodeDisposal.addDisposeCallback(element, function (element) {\r\n                                SDL.UI.Core.Renderers.ControlRenderer.disposeControl(control);\r\n                            });\r\n                        };\r\n                        return ControlKnockoutBindingHandler;\r\n                    })();\r\n                    ;\r\n\r\n                    ko.bindingHandlers.control = (new ControlKnockoutBindingHandler());\r\n                })(Knockout.BindingHandlers || (Knockout.BindingHandlers = {}));\r\n                var BindingHandlers = Knockout.BindingHandlers;\r\n            })(Core.Knockout || (Core.Knockout = {}));\r\n            var Knockout = Core.Knockout;\r\n        })(UI.Core || (UI.Core = {}));\r\n        var Core = UI.Core;\r\n    })(SDL.UI || (SDL.UI = {}));\r\n    var UI = SDL.UI;\r\n})(SDL || (SDL = {}));\r\n;\r\n//# sourceMappingURL=ControlKnockoutBindingHandler.js.map\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "BindingHandlers/ControlKnockoutBindingHandler.js");
	globalEval(/*FILE-BEGIN*/"/// \u003creference path=\"../Libraries/knockout/knockout.d.ts\" /\u003e\r\nvar SDL;\r\n(function (SDL) {\r\n    (function (UI) {\r\n        (function (Core) {\r\n            (function (Knockout) {\r\n                (function (BindingHandlers) {\r\n                    ko.bindingHandlers.indeterminate = {\r\n                        after: [\"checked\"],\r\n                        init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {\r\n                            //Only bind to checkboxes\r\n                            if (element.type != \"checkbox\") {\r\n                                return;\r\n                            }\r\n\r\n                            var onElementClick = function (e) {\r\n                                if (ko.isWriteableObservable(valueAccessor())) {\r\n                                    valueAccessor()(e.target.indeterminate);\r\n                                }\r\n                            };\r\n                            ko.utils.registerEventHandler(element, \"click\", onElementClick);\r\n                        },\r\n                        update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {\r\n                            element.indeterminate = !!ko.utils.unwrapObservable(valueAccessor());\r\n                        }\r\n                    };\r\n                })(Knockout.BindingHandlers || (Knockout.BindingHandlers = {}));\r\n                var BindingHandlers = Knockout.BindingHandlers;\r\n            })(Core.Knockout || (Core.Knockout = {}));\r\n            var Knockout = Core.Knockout;\r\n        })(UI.Core || (UI.Core = {}));\r\n        var Core = UI.Core;\r\n    })(SDL.UI || (SDL.UI = {}));\r\n    var UI = SDL.UI;\r\n})(SDL || (SDL = {}));\r\n//# sourceMappingURL=Indeterminate.js.map\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "BindingHandlers/Indeterminate.js");
})();