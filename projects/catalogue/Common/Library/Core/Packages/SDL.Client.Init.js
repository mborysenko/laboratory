/*SDL-PACKAGE*/
var SDL;
(function()
{
	var packageContextUrl;
	var defaultLocation = location.protocol + '//' + location.host + '/';
	if (SDL && SDL.Client && SDL.Client.Resources && SDL.Client.Resources.executingPackageUrl)
	{
		packageContextUrl = SDL.Client.Resources.executingPackageUrl.replace(/[^\/]*$/, '');
		SDL.Client.Resources.executingPackageUrl = null;
	}
	else
	{
		var scripts = document.getElementsByTagName('script');
		for (var i = 0, len = scripts.length; i < len; i++)
		{
			var script = scripts[i];
			var src = script.src;
			if (src)
			{
				if (script.getAttribute('data-package-name') == 'SDL.Client.Init')
				{
					packageContextUrl = src.replace(/[^\/]*$/, '');
					break;
				}
				else if (!packageContextUrl &&
					src.slice(-19).toLowerCase() == '/sdl.client.init.js')
				{
					packageContextUrl = src.slice(0, -18);
				}
			}
		}
	}

	var globalEval = eval;
	globalEval(/*FILE-BEGIN*/"var SDL;\r\n(function (SDL) {\r\n    (function (Client) {\r\n        (function (Types) {\r\n            /**\r\n            *\timplemented in SDL.Client.HostedApplication, copied to SDL.Client.Core\r\n            **/\r\n            (function (Url) {\r\n                function isSameDomain(url1, url2) {\r\n                    if (url1 \u0026\u0026 url2) {\r\n                        var m1 = url1.toLowerCase().match(/^(https?):\\/{2,}([^\\/:]+)(:(\\d+))?/);\r\n                        var m2 = url2.toLowerCase().match(/^(https?):\\/{2,}([^\\/:]+)(:(\\d+))?/);\r\n                        if (m1 \u0026\u0026 m2) {\r\n                            return (m1[1] == m2[1] \u0026\u0026 m1[2] == m2[2] \u0026\u0026 (m1[4] == m2[4] || (m1[4] == null \u0026\u0026 m2[4] == (m2[1] == \"http\" ? \"80\" : \"443\")) || (m2[4] == null \u0026\u0026 m1[4] == (m1[1] == \"http\" ? \"80\" : \"443\"))));\r\n                        }\r\n                    }\r\n                    return false;\r\n                }\r\n                Url.isSameDomain = isSameDomain;\r\n\r\n                function getDomain(url) {\r\n                    if (url != null) {\r\n                        var m = url.toString().match(/^[\\w]+:\\/{2,}[^\\/?#]*/);\r\n                        return m ? m[0] : \"\";\r\n                    }\r\n                }\r\n                Url.getDomain = getDomain;\r\n                ;\r\n            })(Types.Url || (Types.Url = {}));\r\n            var Url = Types.Url;\r\n        })(Client.Types || (Client.Types = {}));\r\n        var Types = Client.Types;\r\n    })(SDL.Client || (SDL.Client = {}));\r\n    var Client = SDL.Client;\r\n})(SDL || (SDL = {}));\r\n//# sourceMappingURL=Url1.js.map\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Types/Url1.js");
	globalEval(/*FILE-BEGIN*/"/// \u003creference path=\"../Types/Url1.ts\" /\u003e\r\nvar SDL;\r\n(function (SDL) {\r\n    (function (Client) {\r\n        /**\r\n        *\timplemented in SDL.Client.HostedApplication, copied to SDL.Client.Core\r\n        **/\r\n        (function (CrossDomainMessaging) {\r\n            var reqId = new Date().getTime();\r\n            var callbacks = {};\r\n            var trustedDomains = [Client.Types.Url.getDomain(window.location.href)];\r\n            var allowedHandlerBases;\r\n            var parentXdm = undefined;\r\n\r\n            function addTrustedDomain(url) {\r\n                if (trustedDomains[0] != \"*\") {\r\n                    if (url == \"*\") {\r\n                        trustedDomains = [\"*\"];\r\n                    } else {\r\n                        for (var i = 0, len = trustedDomains.length; i \u003c len; i++) {\r\n                            if (Client.Types.Url.isSameDomain(trustedDomains[i], url)) {\r\n                                return;\r\n                            }\r\n                        }\r\n                        trustedDomains.push(url);\r\n                    }\r\n                }\r\n            }\r\n            CrossDomainMessaging.addTrustedDomain = addTrustedDomain;\r\n\r\n            function clearTrustedDomains() {\r\n                trustedDomains = [];\r\n            }\r\n            CrossDomainMessaging.clearTrustedDomains = clearTrustedDomains;\r\n\r\n            function addAllowedHandlerBase(handler) {\r\n                if (!allowedHandlerBases) {\r\n                    allowedHandlerBases = [handler];\r\n                } else {\r\n                    allowedHandlerBases.push(handler);\r\n                }\r\n            }\r\n            CrossDomainMessaging.addAllowedHandlerBase = addAllowedHandlerBase;\r\n\r\n            function call(target, method, args, callback) {\r\n                if (args) {\r\n                    for (var i = 0, len = args.length; i \u003c len; i++) {\r\n                        if (typeof (args[i]) == \"function\") {\r\n                            var callbackId = (++reqId);\r\n                            callbacks[callbackId.toString()] = args[i];\r\n                            args[i] = {\r\n                                __callbackId: callbackId\r\n                            };\r\n                        }\r\n                    }\r\n                }\r\n\r\n                var obj = {\r\n                    method: method,\r\n                    args: args\r\n                };\r\n\r\n                if (callback) {\r\n                    obj.reqId = (++reqId);\r\n                    callbacks[obj.reqId.toString()] = callback;\r\n                }\r\n\r\n                _postMessage(target, obj);\r\n            }\r\n            CrossDomainMessaging.call = call;\r\n            function executeMessage(message, source, origin) {\r\n                if (message) {\r\n                    var execute;\r\n                    if (message.method) {\r\n                        var parts = message.method.split(\".\");\r\n                        var lastIdx = parts.length - 1;\r\n                        var base = window;\r\n                        for (var i = 0; (i \u003c lastIdx) \u0026\u0026 base; i++) {\r\n                            base = base[parts[i]];\r\n                        }\r\n\r\n                        if (!base) {\r\n                            throw Error(\"XDM: Unable to evaluate \" + message.method);\r\n                        } else if (!base[parts[lastIdx]]) {\r\n                            throw Error(\"XDM: Unable to evaluate \" + message.method + \". Method \u0027\" + parts[lastIdx] + \"\u0027 is not defined.\");\r\n                        } else if (!allowedHandlerBases || allowedHandlerBases.indexOf(base) == -1) {\r\n                            throw Error(\"XDM: Access denied to \" + message.method);\r\n                        } else {\r\n                            var result;\r\n                            var args = message.args;\r\n\r\n                            if (args) {\r\n                                for (var i = 0, len = args.length; i \u003c len; i++) {\r\n                                    if (args[i] \u0026\u0026 args[i].__callbackId) {\r\n                                        args[i] = _createCallback(source, origin, args[i].__callbackId);\r\n                                    }\r\n                                }\r\n\r\n                                execute = function () {\r\n                                    return base[parts[lastIdx]].apply(base, message.args);\r\n                                };\r\n                            } else {\r\n                                execute = function () {\r\n                                    return base[parts[lastIdx]]();\r\n                                };\r\n                            }\r\n\r\n                            execute.sourceWindow = source;\r\n                            execute.sourceDomain = Client.Types.Url.getDomain(origin);\r\n\r\n                            result = execute();\r\n\r\n                            if (message.reqId) {\r\n                                _postMessage(source, {\r\n                                    respId: message.reqId,\r\n                                    args: [result] }, origin);\r\n                            }\r\n                        }\r\n                    } else if (message.respId) {\r\n                        var callback = callbacks[message.respId.toString()];\r\n                        if (callback) {\r\n                            if (message.retire != false) {\r\n                                delete callbacks[message.respId.toString()];\r\n                            }\r\n                            if (message.execute != false) {\r\n                                execute = function () {\r\n                                    callback.apply(window, message.args || []);\r\n                                };\r\n                                execute.sourceWindow = source;\r\n                                execute.sourceDomain = Client.Types.Url.getDomain(origin);\r\n                                execute();\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            CrossDomainMessaging.executeMessage = executeMessage;\r\n\r\n            function _postMessage(target, message, origin) {\r\n                if (!origin) {\r\n                    origin = trustedDomains.length == 1 ? trustedDomains[0] : \"*\";\r\n                }\r\n\r\n                var remoteXdm;\r\n\r\n                if (origin == \"*\") {\r\n                    if (target == window.parent) {\r\n                        if (parentXdm === undefined) {\r\n                            try  {\r\n                                parentXdm = target.SDL.Client.CrossDomainMessaging;\r\n                            } catch (err) {\r\n                                parentXdm = null;\r\n                            }\r\n                        }\r\n\r\n                        remoteXdm = parentXdm;\r\n                    }\r\n                } else if (Client.Types.Url.isSameDomain(origin, window.location.href)) {\r\n                    try  {\r\n                        remoteXdm = target.SDL.Client.CrossDomainMessaging;\r\n                    } catch (err) {\r\n                    }\r\n                }\r\n\r\n                if (remoteXdm) {\r\n                    remoteXdm.executeMessage(message, window, window.location.href);\r\n                } else {\r\n                    target.postMessage(\"sdl:\" + window.JSON.stringify(message), origin);\r\n                }\r\n            }\r\n\r\n            function _createCallback(target, domain, callbackId) {\r\n                var fnc = function () {\r\n                    _postMessage(target, {\r\n                        respId: callbackId,\r\n                        retire: !fnc.reoccuring,\r\n                        args: [].slice.call(arguments) }, domain);\r\n                };\r\n                fnc.retire = function () {\r\n                    _postMessage(target, {\r\n                        respId: callbackId,\r\n                        execute: false,\r\n                        retire: true }, domain);\r\n                };\r\n                return fnc;\r\n            }\r\n\r\n            function _messageHandler(e) {\r\n                if (e \u0026\u0026 e.data \u0026\u0026 e.data.length \u003e 4 \u0026\u0026 e.data.indexOf(\"sdl:\") == 0) {\r\n                    var allowed = trustedDomains[0] == \"*\";\r\n                    if (!allowed) {\r\n                        for (var i = 0, len = trustedDomains.length; i \u003c len; i++) {\r\n                            if (Client.Types.Url.isSameDomain(trustedDomains[i], e.origin)) {\r\n                                allowed = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (allowed) {\r\n                        executeMessage(window.JSON.parse(e.data.slice(4)), e.source, e.origin);\r\n                    }\r\n                }\r\n            }\r\n\r\n            window.addEventListener(\"message\", _messageHandler);\r\n        })(Client.CrossDomainMessaging || (Client.CrossDomainMessaging = {}));\r\n        var CrossDomainMessaging = Client.CrossDomainMessaging;\r\n    })(SDL.Client || (SDL.Client = {}));\r\n    var Client = SDL.Client;\r\n})(SDL || (SDL = {}));\r\n//# sourceMappingURL=CrossDomainMessaging.js.map\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "CrossDomainMessaging/CrossDomainMessaging.js");
	globalEval(/*FILE-BEGIN*/"/// \u003creference path=\"../../SDL.Client.Core/Resources/Resources.d.ts\" /\u003e\r\n/// \u003creference path=\"../Types/Url1.ts\" /\u003e\r\n/// \u003creference path=\"../CrossDomainMessaging/CrossDomainMessaging.ts\" /\u003e\r\n/// \u003creference path=\"Application.ts\" /\u003e\r\nvar SDL;\r\n(function (SDL) {\r\n    (function (Client) {\r\n        /**\r\n        *\timplemented in SDL.Client.HostedApplication, copied to SDL.Client.Core\r\n        **/\r\n        (function (Application) {\r\n            ;\r\n\r\n            ;\r\n\r\n            ;\r\n\r\n            ;\r\n\r\n            var ApplicationHostProxyClass = (function () {\r\n                function ApplicationHostProxyClass() {\r\n                    this.handlers = {};\r\n                    this.supportedMethods = {\r\n                        // overwritten if ApplicationHost provides a different list\r\n                        applicationEntryPointLoaded: true,\r\n                        exposeApplicationFacade: true,\r\n                        applicationEntryPointUnloaded: true,\r\n                        setCulture: true,\r\n                        setActiveApplicationEntryPoint: true,\r\n                        setApplicationEntryPointUrl: true,\r\n                        callApplicationFacade: true,\r\n                        initializeApplicationSuite: true,\r\n                        resetApplicationSuite: true,\r\n                        resolveCommonLibraryResources: true,\r\n                        getCommonLibraryResources: true,\r\n                        getCommonLibraryResource: true\r\n                    };\r\n                }\r\n                ApplicationHostProxyClass.prototype.setCulture = function (culture) {\r\n                    this.call(\"setCulture\", [culture]);\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.applicationEntryPointLoaded = function (coreVersion, callback) {\r\n                    var _this = this;\r\n                    var _callback = function (data) {\r\n                        _this.version = data.version;\r\n                        _this.libraryVersionSupported = data.libraryVersionSupported;\r\n                        _this.activeApplicationEntryPointId = data.activeApplicationEntryPointId;\r\n                        _this.activeApplicationId = data.activeApplicationId;\r\n                        _this.culture = data.culture;\r\n                        if (data.supportedMethods) {\r\n                            _this.supportedMethods = data.supportedMethods;\r\n                        }\r\n\r\n                        if (callback) {\r\n                            _callback.sourceDomain = arguments.callee.caller.sourceDomain;\r\n                            _callback.sourceWindow = arguments.callee.caller.sourceWindow;\r\n                            callback(data);\r\n                        }\r\n                    };\r\n\r\n                    this.call(\"applicationEntryPointLoaded\", [coreVersion, function (e) {\r\n                            _this.onHostEvent(e);\r\n                        }], _callback);\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.startCaptureDomEvents = function (events) {\r\n                    this.call(\"startCaptureDomEvents\", [events]);\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.stopCaptureDomEvents = function (events) {\r\n                    this.call(\"stopCaptureDomEvents\", [events]);\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.exposeApplicationFacade = function (applicationEntryPointId) {\r\n                    if (!this.isTrusted) {\r\n                        throw Error(\"Unable to expose application facade: application host is untrusted.\");\r\n                    }\r\n\r\n                    if (Application.isApplicationFacadeSecure === undefined) {\r\n                        Application.isApplicationFacadeSecure = true;\r\n                        this.call(\"exposeApplicationFacade\", [applicationEntryPointId]);\r\n                    } else if (!Application.isApplicationFacadeSecure) {\r\n                        throw Error(\"Application facade is already exposed as unsecure.\");\r\n                    }\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.exposeApplicationFacadeUnsecure = function (applicationEntryPointId) {\r\n                    if (Application.isApplicationFacadeSecure === undefined) {\r\n                        Application.isApplicationFacadeSecure = false;\r\n                        this.call(\"exposeApplicationFacade\", [applicationEntryPointId]);\r\n                    } else if (Application.isApplicationFacadeSecure) {\r\n                        throw Error(\"Application facade is already exposed as secure.\");\r\n                    }\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.applicationEntryPointUnloaded = function () {\r\n                    this.call(\"applicationEntryPointUnloaded\");\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.resolveCommonLibraryResources = function (resourceGroupName, callback) {\r\n                    this.call(\"resolveCommonLibraryResources\", [resourceGroupName], callback);\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.getCommonLibraryResources = function (files, version, onFileLoad, onFailure) {\r\n                    this.call(\"getCommonLibraryResources\", [files, version, onFileLoad, onFailure]);\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.getCommonLibraryResource = function (file, version, onSuccess, onFailure) {\r\n                    this.call(\"getCommonLibraryResource\", [file, version, onSuccess, onFailure]);\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.setActiveApplicationEntryPoint = function (applicationEntryPointId, applicationSuiteId) {\r\n                    this.call(\"setActiveApplicationEntryPoint\", [applicationEntryPointId, applicationSuiteId]);\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.setApplicationEntryPointUrl = function (applicationEntryPointId, url, applicationSuiteId) {\r\n                    if (!Application.ApplicationHost.isTrusted) {\r\n                        throw Error(\"Unable to set application entry point Url: application host is untrusted.\");\r\n                    }\r\n\r\n                    if (applicationSuiteId \u0026\u0026 applicationSuiteId != Application.applicationSuiteId \u0026\u0026 (Application.trustedApplications ? (applicationSuiteId != Application.applicationSuiteId \u0026\u0026 Application.trustedApplications.indexOf(applicationSuiteId) == -1) : !Application.trustedApplicationDomains)) {\r\n                        throw Error(\"Unable to set application entry point Url: application \\\"\" + applicationSuiteId + \"\\\" is untrusted.\");\r\n                    }\r\n\r\n                    this.call(\"setApplicationEntryPointUrl\", [\r\n                        applicationEntryPointId, url, applicationSuiteId,\r\n                        Application.trustedApplicationDomains ? this.getWithLocalDomain(Application.trustedApplicationDomains) : null]);\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.setApplicationEntryPointUrlUnsecure = function (applicationEntryPointId, url, applicationSuiteId) {\r\n                    this.call(\"setApplicationEntryPointUrl\", [applicationEntryPointId, url, applicationSuiteId]);\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.updateTargetDisplayUrlUnsecure = function (url) {\r\n                    this.call(\"updateTargetDisplayUrl\", [url]);\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.callApplicationFacade = function (applicationEntryPointId, method, args, callback, applicationSuiteId) {\r\n                    if (!Application.ApplicationHost.isTrusted) {\r\n                        throw Error(\"Unable to call application facade: application host is untrusted.\");\r\n                    }\r\n\r\n                    if (applicationSuiteId \u0026\u0026 applicationSuiteId != Application.applicationSuiteId \u0026\u0026 (Application.trustedApplications ? (applicationSuiteId != Application.applicationSuiteId \u0026\u0026 Application.trustedApplications.indexOf(applicationSuiteId) == -1) : !Application.trustedApplicationDomains)) {\r\n                        throw Error(\"Unable to call application facade: application \\\"\" + applicationSuiteId + \"\\\" is untrusted.\");\r\n                    }\r\n\r\n                    this.call(\"callApplicationFacade\", [\r\n                        applicationEntryPointId, method, args, callback, applicationSuiteId,\r\n                        Application.trustedApplicationDomains ? this.getWithLocalDomain(Application.trustedApplicationDomains) : null]);\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.callApplicationFacadeUnsecure = function (applicationEntryPointId, method, args, callback, applicationSuiteId) {\r\n                    this.call(\"callApplicationFacade\", [applicationEntryPointId, method, args, callback, applicationSuiteId]);\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.initializeApplicationSuite = function (includeApplicationEntryPointIds, excludeApplicationEntryPointIds, domainDefinitions) {\r\n                    this.call(\"initializeApplicationSuite\", [includeApplicationEntryPointIds, excludeApplicationEntryPointIds, domainDefinitions]);\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.resetApplicationSuite = function () {\r\n                    this.call(\"resetApplicationSuite\");\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.storeApplicationData = function (key, data) {\r\n                    if (!Application.ApplicationHost.isTrusted) {\r\n                        throw Error(\"Unable to store application data: application host is untrusted.\");\r\n                    }\r\n                    this.call(\"storeApplicationData\", [key, data]);\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.storeApplicationSessionData = function (key, data) {\r\n                    if (!Application.ApplicationHost.isTrusted) {\r\n                        throw Error(\"Unable to store application session data: application host is untrusted.\");\r\n                    }\r\n                    this.call(\"storeApplicationSessionData\", [key, data]);\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.getApplicationData = function (key, callback) {\r\n                    if (!Application.ApplicationHost.isTrusted) {\r\n                        throw Error(\"Unable to get application data: application host is untrusted.\");\r\n                    }\r\n                    this.call(\"getApplicationData\", [key], callback);\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.getApplicationSessionData = function (key, callback) {\r\n                    if (!Application.ApplicationHost.isTrusted) {\r\n                        throw Error(\"Unable to get application session data: application host is untrusted.\");\r\n                    }\r\n                    this.call(\"getApplicationSessionData\", [key], callback);\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.clearApplicationData = function () {\r\n                    if (!Application.ApplicationHost.isTrusted) {\r\n                        throw Error(\"Unable to clear application data: application host is untrusted.\");\r\n                    }\r\n                    this.call(\"clearApplicationData\");\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.clearApplicationSessionData = function () {\r\n                    if (!Application.ApplicationHost.isTrusted) {\r\n                        throw Error(\"Unable to clear application session data: application host is untrusted.\");\r\n                    }\r\n                    this.call(\"clearApplicationSessionData\");\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.removeApplicationData = function (key) {\r\n                    if (!Application.ApplicationHost.isTrusted) {\r\n                        throw Error(\"Unable to remove application data: application host is untrusted.\");\r\n                    }\r\n                    this.call(\"removeApplicationData\", [key]);\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.removeApplicationSessionData = function (key) {\r\n                    if (!Application.ApplicationHost.isTrusted) {\r\n                        throw Error(\"Unable to remove application session data: application host is untrusted.\");\r\n                    }\r\n                    this.call(\"removeApplicationSessionData\", [key]);\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.triggerAnalyticsEvent = function (event, object) {\r\n                    if (this.isSupported(\"triggerAnalyticsEvent\")) {\r\n                        this.call(\"triggerAnalyticsEvent\", [event, object]);\r\n                    }\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.addEventListener = function (event, handler) {\r\n                    if (this.handlers) {\r\n                        var e = this.handlers[event];\r\n                        if (!e) {\r\n                            e = this.handlers[event] = [];\r\n                        }\r\n                        e.push({ fnc: handler });\r\n                    }\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.removeEventListener = function (event, handler) {\r\n                    if (this.handlers) {\r\n                        var e = this.handlers[event];\r\n                        if (e) {\r\n                            var len = e.length;\r\n                            for (var i = 0; i \u003c len; i++) {\r\n                                if (e[i].fnc == handler) {\r\n                                    if (len == 1) {\r\n                                        delete this.handlers[event];\r\n                                    } else {\r\n                                        for (var j = i + 1; j \u003c len; j++) {\r\n                                            e[j - 1] = e[j];\r\n                                        }\r\n                                        e.pop();\r\n                                    }\r\n                                    return;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.fireEvent = function (eventType, eventData) {\r\n                    if (this.handlers) {\r\n                        var eventObj = {\r\n                            type: eventType,\r\n                            target: this,\r\n                            data: eventData\r\n                        };\r\n\r\n                        this._processHandlers(eventObj, eventType);\r\n                        this._processHandlers(eventObj, \"*\");\r\n                    }\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.isSupported = function (method) {\r\n                    return this.supportedMethods[method] || false;\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.call = function (method, args, callback) {\r\n                    if (this.isSupported(method)) {\r\n                        Client.CrossDomainMessaging.call(window.parent, \"SDL.Client.ApplicationHost.ApplicationHostFacade.\" + method, args, callback);\r\n                    } else {\r\n                        throw Error(\"ApplicationHost (ver. \" + this.version + \") does not support method \\\"\" + method + \"\\\".\");\r\n                    }\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.onHostEvent = function (e) {\r\n                    switch (e.type) {\r\n                        case \"culturechange\":\r\n                            this.culture = e.data.culture;\r\n                            break;\r\n                        case \"applicationentrypointactivate\":\r\n                            this.activeApplicationEntryPointId = e.data.applicationEntryPointId;\r\n                            this.activeApplicationId = e.data.applicationId;\r\n                            break;\r\n                    }\r\n                    this.fireEvent(e.type, e.data);\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.getWithLocalDomain = function (domains) {\r\n                    var localDomain = Client.Types.Url.getDomain(window.location.href);\r\n                    if (!domains) {\r\n                        return [localDomain];\r\n                    } else {\r\n                        for (var i = 0, len = domains.length; i \u003c len; i++) {\r\n                            if (Client.Types.Url.isSameDomain(domains[i], localDomain)) {\r\n                                return domains;\r\n                            }\r\n                        }\r\n                        return domains.concat(localDomain);\r\n                    }\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype._processHandlers = function (eventObj, handlersCollectionName) {\r\n                    var handlers = this.handlers \u0026\u0026 this.handlers[handlersCollectionName];\r\n                    if (handlers) {\r\n                        var handlersClone = handlers.concat();\r\n                        for (var i = 0, len = handlersClone.length; i \u003c len \u0026\u0026 handlers; i++) {\r\n                            var handler = handlersClone[i];\r\n                            if (handlers.indexOf(handler) != -1) {\r\n                                handler.fnc.call(this, eventObj); // cannot cancel ApplicationHost events -\u003e ignore the return value\r\n                                handlers = this.handlers \u0026\u0026 this.handlers[handlersCollectionName];\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n                return ApplicationHostProxyClass;\r\n            })();\r\n            Application.ApplicationHostProxyClass = ApplicationHostProxyClass;\r\n        })(Client.Application || (Client.Application = {}));\r\n        var Application = Client.Application;\r\n    })(SDL.Client || (SDL.Client = {}));\r\n    var Client = SDL.Client;\r\n})(SDL || (SDL = {}));\r\n//# sourceMappingURL=ApplicationHost.js.map\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Application/ApplicationHost.js");
	globalEval(/*FILE-BEGIN*/"/// \u003creference path=\"../../SDL.Client.Core/Resources/Resources.d.ts\" /\u003e\r\n/// \u003creference path=\"../../SDL.Client.Core/Libraries/jQuery/jQuery.d.ts\" /\u003e\r\n/// \u003creference path=\"../../SDL.Client.UI.Core.Knockout/Libraries/Knockout/knockout.d.ts\" /\u003e\r\n/// \u003creference path=\"../Types/Url1.ts\" /\u003e\r\n/// \u003creference path=\"../CrossDomainMessaging/CrossDomainMessaging.ts\" /\u003e\r\n/// \u003creference path=\"ApplicationHost.ts\" /\u003e\r\n/// \u003creference path=\"ApplicationFacade.ts\" /\u003e\r\nvar SDL;\r\n(function (SDL) {\r\n    (function (Client) {\r\n        /**\r\n        *\timplemented in SDL.Client.HostedApplication, copied to SDL.Client.Core\r\n        **/\r\n        (function (Application) {\r\n            Application.defaultApplicationEntryPointId;\r\n            Application.defaultApplicationSuiteId;\r\n            Application.isHosted;\r\n            Application.applicationSuiteId;\r\n            Application.isReloading;\r\n            Application.applicationHostUrl;\r\n            Application.applicationHostCorePath;\r\n            Application.defaultApplicationHostUrl;\r\n            Application.trustedApplicationHostDomains;\r\n            Application.trustedApplications;\r\n            Application.trustedApplicationDomains;\r\n            Application.ApplicationHost;\r\n            Application.useHostedLibraryResources = true;\r\n            Application.libraryVersion;\r\n            Application.sharedSettings;\r\n            Application.isInitialized = false;\r\n\r\n            var _isInitialized = false;\r\n            var isReady = false;\r\n\r\n            Application.initCallbacks;\r\n            Application.readyCallbacks;\r\n\r\n            var _initCallbacks = Application.initCallbacks ? Application.initCallbacks.concat() : null;\r\n            var _readyCallbacks = Application.readyCallbacks ? Application.readyCallbacks.concat() : null;\r\n\r\n            var filesToRender = [];\r\n            var allResources = [];\r\n            var renderedResources = [];\r\n            var resolveResourcesCallbacks = {};\r\n\r\n            function initialize(callback) {\r\n                addInitializeCallback(callback);\r\n\r\n                if (_isInitialized === false) {\r\n                    _isInitialized = undefined;\r\n                    initializeApplication();\r\n                }\r\n            }\r\n            Application.initialize = initialize;\r\n            ;\r\n\r\n            function addInitializeCallback(callback) {\r\n                if (callback) {\r\n                    if (_isInitialized) {\r\n                        callback();\r\n                    } else if (!Application.isReloading) {\r\n                        if (_initCallbacks) {\r\n                            _initCallbacks.push(callback);\r\n                        } else {\r\n                            _initCallbacks = [callback];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Application.addInitializeCallback = addInitializeCallback;\r\n            ;\r\n\r\n            function addReadyCallback(callback) {\r\n                if (callback) {\r\n                    if (isReady) {\r\n                        callback();\r\n                    } else if (!Application.isReloading) {\r\n                        if (_readyCallbacks) {\r\n                            _readyCallbacks.push(callback);\r\n                        } else {\r\n                            _readyCallbacks = [callback];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Application.addReadyCallback = addReadyCallback;\r\n            ;\r\n\r\n            function setApplicationReady() {\r\n                if (!isReady) {\r\n                    isReady = true;\r\n                    if (_readyCallbacks) {\r\n                        for (var i = 0, len = _readyCallbacks.length; i \u003c len; i++) {\r\n                            _readyCallbacks[i]();\r\n                        }\r\n                        _readyCallbacks = null;\r\n                    }\r\n                }\r\n            }\r\n            Application.setApplicationReady = setApplicationReady;\r\n            ;\r\n\r\n            function exposeApplicationFacade() {\r\n                if (!Application.isHosted) {\r\n                    throw Error(\"Cannot expose Application facade: application is not hosted.\");\r\n                }\r\n                Application.ApplicationHost.exposeApplicationFacade(Application.defaultApplicationEntryPointId);\r\n            }\r\n            Application.exposeApplicationFacade = exposeApplicationFacade;\r\n            ;\r\n\r\n            function exposeApplicationFacadeUnsecure() {\r\n                if (!Application.isHosted) {\r\n                    throw Error(\"Cannot expose Application facade: application is not hosted.\");\r\n                }\r\n                Application.ApplicationHost.exposeApplicationFacadeUnsecure(Application.defaultApplicationEntryPointId);\r\n            }\r\n            Application.exposeApplicationFacadeUnsecure = exposeApplicationFacadeUnsecure;\r\n            ;\r\n\r\n            function registerResourceGroupRendered(resourceGroupName) {\r\n                if (renderedResources.indexOf(resourceGroupName) == -1) {\r\n                    if (allResources.indexOf(resourceGroupName) == -1) {\r\n                        allResources.push(resourceGroupName);\r\n                    }\r\n\r\n                    renderedResources.push(resourceGroupName);\r\n                }\r\n            }\r\n            Application.registerResourceGroupRendered = registerResourceGroupRendered;\r\n            ;\r\n\r\n            function loadLibraryResourceGroup(resourceGroupName, jQuery, knockout, callback) {\r\n                if (Client.Configuration) {\r\n                    Application.addReadyCallback(function () {\r\n                        Client.Resources.ResourceManager.load(resourceGroupName, callback);\r\n                    });\r\n                } else {\r\n                    if (!Application.isHosted) {\r\n                        throw Error(\"Unable to load library resources, application is not hosted.\");\r\n                    }\r\n\r\n                    if (!Application.ApplicationHost.isTrusted) {\r\n                        throw Error(\"Unable to load library resources, application host is not trusted.\");\r\n                    }\r\n\r\n                    registerResourceGroupRendered(\"SDL.Client.Types.Url1\");\r\n                    registerResourceGroupRendered(\"SDL.Client.CrossDomainMessaging\");\r\n                    registerResourceGroupRendered(\"SDL.Client.Application\");\r\n                    if (jQuery) {\r\n                        SDL.jQuery = jQuery;\r\n                        registerResourceGroupRendered(\"SDL.Client.Libraries.JQuery\");\r\n                    }\r\n\r\n                    if (knockout) {\r\n                        registerResourceGroupRendered(\"SDL.UI.Core.Knockout.Libraries.Knockout\");\r\n                    }\r\n\r\n                    Application.ApplicationHost.resolveCommonLibraryResources(resourceGroupName, function (resources) {\r\n                        if (resources \u0026\u0026 resources.length) {\r\n                            var filesToLoad = [];\r\n                            var resourceForCallback;\r\n\r\n                            for (var i = 0, len = resources.length; i \u003c len; i++) {\r\n                                var resourceName = resources[i].name;\r\n                                if (allResources.indexOf(resourceName) == -1) {\r\n                                    allResources.push(resourceName);\r\n                                    var files = resources[i].files;\r\n                                    if (files \u0026\u0026 files.length) {\r\n                                        var count = files.length;\r\n                                        for (var j = 0; j \u003c count; j++) {\r\n                                            filesToRender[filesToRender.length] = filesToLoad[filesToLoad.length] = { url: files[j] };\r\n                                        }\r\n                                        filesToRender[filesToRender.length - 1].resourceName = resourceName; // adding the name of the group to the last file of the resource group\r\n                                        resourceForCallback = resourceName;\r\n                                    } else {\r\n                                        // no files to render, mark group as rendered right away\r\n                                        renderedResources.push(resourceName);\r\n                                    }\r\n                                } else if (renderedResources.indexOf(resourceName) == -1) {\r\n                                    resourceForCallback = resourceName;\r\n                                }\r\n                            }\r\n\r\n                            if (resourceForCallback) {\r\n                                if (!resolveResourcesCallbacks[resourceForCallback]) {\r\n                                    resolveResourcesCallbacks[resourceForCallback] = [callback];\r\n                                } else {\r\n                                    resolveResourcesCallbacks[resourceForCallback].push(callback);\r\n                                }\r\n\r\n                                if (filesToLoad.length \u003e 0) {\r\n                                    Application.ApplicationHost.getCommonLibraryResources(filesToLoad, null, onFileLoaded, function (error) {\r\n                                        throw Error(error);\r\n                                    });\r\n                                }\r\n                                return;\r\n                            }\r\n                        }\r\n\r\n                        if (callback) {\r\n                            callback();\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            Application.loadLibraryResourceGroup = loadLibraryResourceGroup;\r\n\r\n            var fileToRenderIndex = 0;\r\n            function onFileLoaded(resource) {\r\n                var nextFile = filesToRender[fileToRenderIndex];\r\n                var url = resource.url;\r\n                if (nextFile \u0026\u0026 nextFile.url == url) {\r\n                    renderFile(url, resource.data, resource.context, nextFile.resourceName);\r\n                    fileToRenderIndex++;\r\n\r\n                    while (fileToRenderIndex \u003c filesToRender.length) {\r\n                        var fileToRender = filesToRender[fileToRenderIndex];\r\n                        var data = fileToRender.data;\r\n                        if (data != null) {\r\n                            renderFile(fileToRender.url, data, fileToRender.context, fileToRender.resourceName);\r\n                            filesToRender[fileToRenderIndex] = null;\r\n                            fileToRenderIndex++;\r\n                        } else {\r\n                            return;\r\n                        }\r\n                    }\r\n                } else {\r\n                    for (var i = fileToRenderIndex + 1; i \u003c filesToRender.length; i++) {\r\n                        var fileToRender = filesToRender[i];\r\n                        if (fileToRender.url == url) {\r\n                            fileToRender.data = resource.data || \"\";\r\n                            fileToRender.context = resource.context;\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            ;\r\n\r\n            var globalEval = eval;\r\n            function renderFile(url, data, context, resourceName) {\r\n                if (data) {\r\n                    if (url.slice(-3).toLowerCase() == \".js\") {\r\n                        data += (\"\\n//@ sourceURL=\" + Application.applicationHostCorePath + url.slice(2));\r\n                        if (context) {\r\n                            (function () {\r\n                                globalEval(arguments[0]);\r\n                            }).apply(globalEval(context), [data]);\r\n                        } else {\r\n                            globalEval(data);\r\n                        }\r\n                    } else if (url.slice(-4).toLowerCase() == \".css\") {\r\n                        var style = document.getElementById(\"sdl-styles\");\r\n                        if (!style) {\r\n                            style = document.createElement(\"style\");\r\n                            style.id = \"sdl-styles\";\r\n                            var head = document.getElementsByTagName(\"head\");\r\n                            (head[0] || document.body).appendChild(style);\r\n                        }\r\n                        var text = document.createTextNode(data);\r\n                        style.appendChild(text);\r\n                    }\r\n                }\r\n\r\n                if (resourceName) {\r\n                    renderedResources.push(resourceName);\r\n                    var calls = resolveResourcesCallbacks[resourceName];\r\n                    if (calls) {\r\n                        for (var i = 0, len = calls.length; i \u003c len; i++) {\r\n                            calls[i]();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            ;\r\n\r\n            function initializeApplication() {\r\n                var callbacks = function () {\r\n                    if (_initCallbacks) {\r\n                        for (var i = 0, len = _initCallbacks.length; i \u003c len; i++) {\r\n                            _initCallbacks[i]();\r\n                        }\r\n                        _initCallbacks = null;\r\n                    }\r\n                };\r\n\r\n                var hosted = (window.top != window);\r\n\r\n                if (hosted) {\r\n                    Client.CrossDomainMessaging.addTrustedDomain(\"*\");\r\n\r\n                    // notify the host the app is loaded, and see if the library version can be served by the host\r\n                    var timeout = window.setTimeout(function () {\r\n                        timeout = null;\r\n\r\n                        if (window.console) {\r\n                            console.log(\"No reply from application host after 1 second -\u003e setting isHosted = false\");\r\n                        }\r\n\r\n                        Application.isHosted = false;\r\n                        Application.useHostedLibraryResources = false;\r\n                        Application.isInitialized = _isInitialized = true;\r\n                        callbacks();\r\n                    }, 1000);\r\n\r\n                    var host = new Application.ApplicationHostProxyClass();\r\n                    var onUnload = function () {\r\n                        host.applicationEntryPointUnloaded();\r\n                        window.removeEventListener(\"unload\", onUnload);\r\n                        window.removeEventListener(\"hashchange\", updateTargetDisplayUrl);\r\n                    };\r\n                    window.addEventListener(\"unload\", onUnload);\r\n\r\n                    host.applicationEntryPointLoaded(Application.libraryVersion, function (data) {\r\n                        if (timeout) {\r\n                            window.clearTimeout(timeout);\r\n                            timeout = null;\r\n                        }\r\n\r\n                        Application.applicationHostUrl = sessionStorage[\"appHost-url\"] = data.applicationHostUrl;\r\n                        Application.applicationHostCorePath = data.applicationHostCorePath;\r\n                        Application.applicationSuiteId = data.applicationSuiteId;\r\n\r\n                        var applicationHostDomain = arguments.callee.caller.sourceDomain;\r\n                        host.isTrusted = Client.Types.Url.isSameDomain(window.location.href, applicationHostDomain);\r\n                        if (!host.isTrusted) {\r\n                            var domains = Application.trustedApplicationHostDomains || [];\r\n                            for (var i = 0, len = domains.length; i \u003c len; i++) {\r\n                                if (Client.Types.Url.isSameDomain(domains[i], applicationHostDomain)) {\r\n                                    host.isTrusted = true;\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        Client.CrossDomainMessaging.clearTrustedDomains();\r\n                        Client.CrossDomainMessaging.addTrustedDomain(applicationHostDomain);\r\n                        Client.CrossDomainMessaging.addAllowedHandlerBase(Application.ApplicationFacadeStub);\r\n\r\n                        Application.ApplicationHost = host;\r\n                        Application.isHosted = true;\r\n\r\n                        if (host.isTrusted) {\r\n                            Application.sharedSettings = data.sharedSettings;\r\n                        }\r\n\r\n                        if (!host.isTrusted || !data.libraryVersionSupported) {\r\n                            Application.useHostedLibraryResources = false;\r\n                        }\r\n\r\n                        updateTargetDisplayUrl();\r\n\r\n                        if (!Application.isInitialized) {\r\n                            Application.isInitialized = _isInitialized = true;\r\n                            callbacks();\r\n                        }\r\n                    });\r\n                } else if (Application.defaultApplicationHostUrl) {\r\n                    Application.applicationHostUrl = sessionStorage[\"appHost-url\"] || Application.defaultApplicationHostUrl; // use sessionStorage value if specified\r\n                    _initCallbacks = null;\r\n                    Application.isReloading = true;\r\n                    window.location.replace(Application.applicationHostUrl + (Application.defaultApplicationSuiteId ? (\"#app=\" + encodeURIComponent(Application.defaultApplicationSuiteId) + (Application.defaultApplicationEntryPointId ? \"\u0026entry=\" + encodeURIComponent(Application.defaultApplicationEntryPointId) + \"\u0026url=\" + encodeURIComponent(location.href) : \"\")) : \"\"));\r\n                } else {\r\n                    Application.isHosted = false;\r\n                    Application.useHostedLibraryResources = false;\r\n                    Application.isInitialized = _isInitialized = true;\r\n                    callbacks();\r\n                }\r\n            }\r\n            ;\r\n\r\n            var updateTargetDisplayUrl = function () {\r\n                if (Application.isHosted \u0026\u0026 Application.ApplicationHost.isTrusted \u0026\u0026 Application.ApplicationHost.isSupported(\"updateTargetDisplayUrl\")) {\r\n                    Application.ApplicationHost.updateTargetDisplayUrlUnsecure(window.location.href);\r\n                }\r\n            };\r\n            window.addEventListener(\"hashchange\", updateTargetDisplayUrl);\r\n        })(Client.Application || (Client.Application = {}));\r\n        var Application = Client.Application;\r\n    })(SDL.Client || (SDL.Client = {}));\r\n    var Client = SDL.Client;\r\n})(SDL || (SDL = {}));\r\n//# sourceMappingURL=Application.js.map\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Application/Application.js");
	globalEval(/*FILE-BEGIN*/"/// \u003creference path=\"Application.ts\" /\u003e\r\nvar SDL;\r\n(function (SDL) {\r\n    (function (Client) {\r\n        /**\r\n        *\timplemented in SDL.Client.HostedApplication, copied to SDL.Client.Core\r\n        **/\r\n        (function (Application) {\r\n            Application.ApplicationFacade = {};\r\n            Application.isApplicationFacadeSecure = undefined;\r\n\r\n            (function (ApplicationFacadeStub) {\r\n                function callApplicationFacade(method, arguments, caller) {\r\n                    if (!Application.isHosted) {\r\n                        throw Error(\"Attempt to call Application facade failed: application is not hosted.\");\r\n                    } else if (!Application.ApplicationFacade[method]) {\r\n                        throw Error(\"Attempt to call Application facade failed: method \u0027\" + method + \"\u0027 is not defined.\");\r\n                    } else if (Application.isApplicationFacadeSecure == undefined) {\r\n                        throw Error(\"Attempt to call Application facade failed: unable to determine security level of the Application facade.\");\r\n                    } else {\r\n                        if (Application.isApplicationFacadeSecure) {\r\n                            if (!Application.ApplicationHost.isTrusted) {\r\n                                throw Error(\"Attempt to call secured Application facade failed: appliction host is untrusted.\");\r\n                            } else if (!caller.applicationId || !caller.applicationDomain) {\r\n                                throw Error(\"Attempt to call secured Application facade failed: unable to determine the caller.\");\r\n                            } else if (caller.applicationId != Application.applicationSuiteId || !Client.Types.Url.isSameDomain(window.location.href, caller.applicationDomain)) {\r\n                                if (!Application.trustedApplications \u0026\u0026 !Application.trustedApplicationDomains) {\r\n                                    throw Error(\"Attempt to call secured Application facade failed: caller untrusted (\" + caller.applicationId + \", \" + caller.applicationDomain + \")\");\r\n                                } else {\r\n                                    var allowed;\r\n                                    var i, len;\r\n                                    if (Application.trustedApplications \u0026\u0026 caller.applicationId != Application.applicationSuiteId \u0026\u0026 Application.trustedApplications.indexOf(caller.applicationId) == -1) {\r\n                                        throw Error(\"Attempt to call secured Application facade failed: caller untrusted (\" + caller.applicationId + \")\");\r\n                                    }\r\n\r\n                                    if (Application.trustedApplicationDomains \u0026\u0026 !Client.Types.Url.isSameDomain(window.location.href, caller.applicationDomain) \u0026\u0026 !Client.Types.Url.isSameDomain(window.location.href, caller.applicationDomain)) {\r\n                                        allowed = false;\r\n                                        for (i = 0, len = Application.trustedApplicationDomains.length; i \u003c len; i++) {\r\n                                            if (Client.Types.Url.isSameDomain(Application.trustedApplicationDomains[i], caller.applicationDomain)) {\r\n                                                allowed = true;\r\n                                                break;\r\n                                            }\r\n                                        }\r\n\r\n                                        if (!allowed) {\r\n                                            throw Error(\"Attempt to call secured Application facade failed: caller untrusted (\" + caller.applicationDomain + \")\");\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        var execute = function (args) {\r\n                            return Application.ApplicationFacade[method].apply(Application.ApplicationFacade, args);\r\n                        };\r\n                        execute.applicationDomain = caller.applicationDomain;\r\n                        execute.applicationId = caller.applicationId;\r\n                        return execute(arguments || []);\r\n                    }\r\n                }\r\n                ApplicationFacadeStub.callApplicationFacade = callApplicationFacade;\r\n            })(Application.ApplicationFacadeStub || (Application.ApplicationFacadeStub = {}));\r\n            var ApplicationFacadeStub = Application.ApplicationFacadeStub;\r\n        })(Client.Application || (Client.Application = {}));\r\n        var Application = Client.Application;\r\n    })(SDL.Client || (SDL.Client = {}));\r\n    var Client = SDL.Client;\r\n})(SDL || (SDL = {}));\r\n//# sourceMappingURL=ApplicationFacade.js.map\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Application/ApplicationFacade.js");
	globalEval(/*FILE-BEGIN*/"var SDL;\r\n(function (SDL) {\r\n    (function (Client) {\r\n        (function (Xml) {\r\n            ;\r\n\r\n            /**\r\n            * Defines several common namespaces in use throughout the system.\r\n            */\r\n            Xml.Namespaces = {\r\n                xsl: \"http://www.w3.org/1999/XSL/Transform\",\r\n                xlink: \"http://www.w3.org/1999/xlink\",\r\n                models: \"http://wwww.sdlcommonui.com/core/models\",\r\n                apphost: \"http://www.sdl.com/2013/ApplicationHost\"\r\n            };\r\n\r\n            var isIE = ((/msie|trident/i).test(navigator.userAgent) \u0026\u0026 !(/chrome|webkit|opera/i).test(navigator.userAgent));\r\n\r\n            function progIDs() {\r\n                var progIDs = Xml.progIDs;\r\n                if (!progIDs.initialized) {\r\n                    progIDs.initialized = true;\r\n                    var msXmlProgIDs = [\".6.0\", \".3.0\"];\r\n                    for (var i = 0, l = msXmlProgIDs.length; i \u003c l; i++) {\r\n                        var ver = msXmlProgIDs[i];\r\n\r\n                        if (!progIDs.domDocument) {\r\n                            try  {\r\n                                new ActiveXObject(\"MSXML2.DOMDocument\" + ver);\r\n                                progIDs.domDocument = \"MSXML2.DOMDocument\" + ver;\r\n                            } catch (err) {\r\n                            }\r\n                        }\r\n                        if (!progIDs.freeThreadedDOMDocument) {\r\n                            try  {\r\n                                new ActiveXObject(\"MSXML2.FreeThreadedDOMDocument\" + ver);\r\n                                progIDs.freeThreadedDOMDocument = \"MSXML2.FreeThreadedDOMDocument\" + ver;\r\n                            } catch (err) {\r\n                            }\r\n                        }\r\n                        if (!progIDs.xslTemplate) {\r\n                            try  {\r\n                                new ActiveXObject(\"MSXML2.XSLTemplate\" + ver);\r\n                                progIDs.xslTemplate = \"MSXML2.XSLTemplate\" + ver;\r\n                            } catch (err) {\r\n                            }\r\n                        }\r\n                        if (progIDs.domDocument \u0026\u0026 progIDs.freeThreadedDOMDocument \u0026\u0026 progIDs.xslTemplate) {\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                return progIDs;\r\n            }\r\n            Xml.progIDs = progIDs;\r\n            ;\r\n\r\n            function getNewXmlDocument(xml, async, freeThreaded) {\r\n                var xmlDoc = null;\r\n                var errorText = null;\r\n                try  {\r\n                    if (isIE) {\r\n                        var progIDs = Xml.progIDs();\r\n                        if (!freeThreaded \u0026\u0026 progIDs.domDocument || freeThreaded \u0026\u0026 progIDs.freeThreadedDOMDocument) {\r\n                            xmlDoc = new ActiveXObject(freeThreaded ? progIDs.freeThreadedDOMDocument : progIDs.domDocument);\r\n                            xmlDoc.async = async ? true : false;\r\n                            xmlDoc.preserveWhiteSpace = true;\r\n\r\n                            var namespaces = [];\r\n                            for (var prefix in Xml.Namespaces) {\r\n                                namespaces.push(\"xmlns:\" + prefix + \"=\\\"\" + Xml.Namespaces[prefix] + \"\\\"\");\r\n                            }\r\n\r\n                            if (namespaces.length \u003e 0) {\r\n                                xmlDoc.setProperty(\"SelectionNamespaces\", namespaces.join(\" \"));\r\n                            }\r\n                            xmlDoc.setProperty(\"SelectionLanguage\", \"XPath\");\r\n\r\n                            if (progIDs.domDocument == \"MSXML2.DOMDocument.6.0\") {\r\n                                xmlDoc.setProperty(\"AllowXsltScript\", true);\r\n                            }\r\n\r\n                            if (xml) {\r\n                                xmlDoc.loadXML(xml);\r\n                            }\r\n                        } else {\r\n                            errorText = \"Could not find appropriate progID\";\r\n                        }\r\n                    } else {\r\n                        xmlDoc = (new window.DOMParser()).parseFromString(xml, \"text/xml\");\r\n                        var namespaceURI = xmlDoc.documentElement.namespaceURI;\r\n                        if (xmlDoc.documentElement.nodeName == \"parsererror\" \u0026\u0026 (namespaceURI == \"http://www.w3.org/1999/xhtml\" || namespaceURI == \"http://www.mozilla.org/newlayout/xml/parsererror.xml\")) {\r\n                            errorText = Xml.getInnerText(xmlDoc);\r\n                        } else {\r\n                            var firstChild = xmlDoc.documentElement.firstChild;\r\n                            if (firstChild) {\r\n                                if (firstChild.nodeName == \"parsererror\" \u0026\u0026 firstChild.namespaceURI == \"http://www.w3.org/1999/xhtml\") {\r\n                                    errorText = Xml.getInnerText(firstChild);\r\n                                } else if ((firstChild = firstChild.firstChild) \u0026\u0026 firstChild.nodeName == \"parsererror\" \u0026\u0026 firstChild.namespaceURI == \"http://www.w3.org/1999/xhtml\") {\r\n                                    errorText = Xml.getInnerText(firstChild);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                } catch (err) {\r\n                    errorText = err.message;\r\n                }\r\n\r\n                if (errorText !== null) {\r\n                    xmlDoc = { parseError: { errorCode: 1, reason: errorText, srcText: xml } };\r\n                }\r\n\r\n                return xmlDoc;\r\n            }\r\n            Xml.getNewXmlDocument = getNewXmlDocument;\r\n            ;\r\n\r\n            function getInnerText(node, xpath, defaultValue, namespaces) {\r\n                if (node \u0026\u0026 xpath) {\r\n                    node = selectSingleNode(node, xpath, namespaces);\r\n                    if (!node) {\r\n                        return defaultValue;\r\n                    }\r\n                }\r\n\r\n                if (node) {\r\n                    if (node.nodeType == 9) {\r\n                        node = node.documentElement;\r\n                    }\r\n\r\n                    if (node.textContent != undefined) {\r\n                        return node.textContent;\r\n                    } else {\r\n                        return node.text;\r\n                    }\r\n                }\r\n            }\r\n            Xml.getInnerText = getInnerText;\r\n            ;\r\n\r\n            function selectSingleNode(parent, xPath, namespaces) {\r\n                var doc = (!parent || parent.nodeType == 9) ? parent : parent.ownerDocument;\r\n                if (doc) {\r\n                    if (doc.evaluate) {\r\n                        var xPathResult = doc.evaluate(xPath, parent, createResolver(namespaces), window.XPathResult.FIRST_ORDERED_NODE_TYPE, null);\r\n\r\n                        return xPathResult.singleNodeValue;\r\n                    } else {\r\n                        if (namespaces) {\r\n                            var nsList = String(doc.getProperty(\"SelectionNamespaces\") || \"\").split(\" \");\r\n                            for (var prefix in namespaces) {\r\n                                var spec = \"xmlns:\" + prefix + \"=\\\"\" + namespaces[prefix] + \"\\\"\";\r\n                                if (nsList.indexOf(spec) == -1) {\r\n                                    nsList.push(spec);\r\n                                }\r\n                            }\r\n                            doc.setProperty(\"SelectionNamespaces\", nsList.join(\" \"));\r\n                        }\r\n                        return parent.selectSingleNode(xPath);\r\n                    }\r\n                }\r\n            }\r\n            Xml.selectSingleNode = selectSingleNode;\r\n            ;\r\n\r\n            function selectNodes(parent, xPath, namespaces) {\r\n                var result = [];\r\n                var doc = (!parent || parent.nodeType == 9) ? parent : parent.ownerDocument;\r\n                if (doc) {\r\n                    if (doc.evaluate) {\r\n                        var xPathResult = doc.evaluate(xPath, parent, createResolver(namespaces), window.XPathResult.ORDERED_NODE_ITERATOR_TYPE, null);\r\n\r\n                        var node = xPathResult.iterateNext();\r\n                        while (node) {\r\n                            result[result.length] = node;\r\n                            node = xPathResult.iterateNext();\r\n                        }\r\n                    } else {\r\n                        if (namespaces) {\r\n                            var nsList = String(doc.getProperty(\"SelectionNamespaces\") || \"\").split(\" \");\r\n                            for (var prefix in namespaces) {\r\n                                var spec = \"xmlns:\" + prefix + \"=\\\"\" + namespaces[prefix] + \"\\\"\";\r\n                                if (nsList.indexOf(spec) == -1) {\r\n                                    nsList.push(spec);\r\n                                }\r\n                            }\r\n                            doc.setProperty(\"SelectionNamespaces\", nsList.join(\" \"));\r\n                        }\r\n                        result = parent.selectNodes(xPath);\r\n                    }\r\n                }\r\n                return result;\r\n            }\r\n            Xml.selectNodes = selectNodes;\r\n            ;\r\n\r\n            function createResolver(namespaces) {\r\n                return function Xml$resolvePrefix(prefix) {\r\n                    return (namespaces \u0026\u0026 namespaces[prefix]) || Xml.Namespaces[prefix];\r\n                };\r\n            }\r\n            Xml.createResolver = createResolver;\r\n            ;\r\n\r\n            /**\r\n            * Returns a string that provides information about a document\u0027s parse error, if it has one.\r\n            * @param {XMLDocument} document The document for which to generate parse error text.\r\n            * @return {String} An error text associated with the specified document\u0027s parse error, if it has one; otherwise\r\n            * the return value is \u003cc\u003enull\u003c/c\u003e.\r\n            */\r\n            function getParseError(doc) {\r\n                if (doc \u0026\u0026 hasParseError(doc)) {\r\n                    return doc.url + \": (\" + doc.parseError.reason + \")\";\r\n                } else if (!doc || doc.nodeType != 9) {\r\n                    throw Error(\"Xml.getParseError: Object should be a document node\");\r\n                }\r\n            }\r\n            Xml.getParseError = getParseError;\r\n            ;\r\n\r\n            /**\r\n            * Returns \u003cc\u003etrue\u003c/c\u003e if the specified documen has a parse error.\r\n            * @param {XMLDocument} document The document to check.\r\n            * @return {Boolean} \u003cc\u003etrue\u003c/c\u003e if the specified documen has a parse error; otherwise \u003cc\u003efalse\u003c/c\u003e.\r\n            */\r\n            function hasParseError(doc) {\r\n                return (doc.parseError \u0026\u0026 doc.parseError.errorCode != 0) || false;\r\n            }\r\n            Xml.hasParseError = hasParseError;\r\n            ;\r\n        })(Client.Xml || (Client.Xml = {}));\r\n        var Xml = Client.Xml;\r\n    })(SDL.Client || (SDL.Client = {}));\r\n    var Client = SDL.Client;\r\n})(SDL || (SDL = {}));\r\n;\r\n//# sourceMappingURL=Xml.Base.js.map\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Xml/Xml.Base.js");
	globalEval(/*FILE-BEGIN*/"var SDL;\r\n(function (SDL) {\r\n    (function (Client) {\r\n        (function (Types) {\r\n            /// \u003creference path=\"Url1.ts\" /\u003e\r\n            (function (Url) {\r\n                (function (UrlParts) {\r\n                    UrlParts[UrlParts[\"PROTOCOL\"] = 0] = \"PROTOCOL\";\r\n                    UrlParts[UrlParts[\"HOSTNAME\"] = 1] = \"HOSTNAME\";\r\n                    UrlParts[UrlParts[\"PORT\"] = 2] = \"PORT\";\r\n                    UrlParts[UrlParts[\"DOMAIN\"] = 3] = \"DOMAIN\";\r\n                    UrlParts[UrlParts[\"PATH\"] = 4] = \"PATH\";\r\n                    UrlParts[UrlParts[\"FILE\"] = 5] = \"FILE\";\r\n                    UrlParts[UrlParts[\"SEARCH\"] = 6] = \"SEARCH\";\r\n                    UrlParts[UrlParts[\"HASH\"] = 7] = \"HASH\";\r\n                })(Url.UrlParts || (Url.UrlParts = {}));\r\n                var UrlParts = Url.UrlParts;\r\n                ;\r\n\r\n                function isAbsoluteUrl(url) {\r\n                    return /^[\\w]+\\:[^\\d]/i.test(url);\r\n                }\r\n                Url.isAbsoluteUrl = isAbsoluteUrl;\r\n                ;\r\n\r\n                function getAbsoluteUrl(path) {\r\n                    return (path \u0026\u0026 !isAbsoluteUrl(path)) ? combinePath(location.protocol + \"//\" + location.host + \"/\", path) : path;\r\n                }\r\n                Url.getAbsoluteUrl = getAbsoluteUrl;\r\n                ;\r\n\r\n                function combinePath(base, path) {\r\n                    if (!path || path == \".\") {\r\n                        return base;\r\n                    } else if (!base || isAbsoluteUrl(path)) {\r\n                        return path;\r\n                    } else {\r\n                        var hashIndx = base.indexOf(\"#\");\r\n                        if (hashIndx != -1) {\r\n                            base = base.slice(0, hashIndx); // removed the hash from the base if present\r\n                        }\r\n\r\n                        var charAt0 = path.charAt(0);\r\n                        if (charAt0 == \"#\") {\r\n                            return base + path;\r\n                        } else if (charAt0 == \"?\") {\r\n                            var searchIndx = base.indexOf(\"?\");\r\n                            if (searchIndx != -1) {\r\n                                return base.slice(0, searchIndx) + path;\r\n                            } else {\r\n                                return base + path;\r\n                            }\r\n                        } else {\r\n                            var baseParts = parseUrl(base);\r\n\r\n                            if (charAt0 != \"/\") {\r\n                                path = Url.normalize(baseParts[4 /* PATH */] + path);\r\n                            } else if (path.charAt(1) == \"/\") {\r\n                                // path starts with // (a hostname without the protocol)\r\n                                return baseParts[0 /* PROTOCOL */] + path;\r\n                            }\r\n                            return baseParts[3 /* DOMAIN */] + path;\r\n                        }\r\n                    }\r\n                }\r\n                Url.combinePath = combinePath;\r\n                ;\r\n\r\n                function normalize(url) {\r\n                    // get rid of /../ and /./\r\n                    if (url) {\r\n                        var parts = parseUrl(url);\r\n                        var path = parts[4 /* PATH */];\r\n                        if (path) {\r\n                            var pathParts = path.match(/[^\\/]+/g);\r\n                            if (pathParts) {\r\n                                var i = 0;\r\n                                while (i \u003c pathParts.length) {\r\n                                    if (pathParts[i] == \"..\") {\r\n                                        if (i \u003e 0 \u0026\u0026 pathParts[i - 1] != \"..\") {\r\n                                            pathParts.splice(i - 1, 2);\r\n                                            i--;\r\n                                            continue;\r\n                                        }\r\n                                    } else if (pathParts[i] == \".\") {\r\n                                        pathParts.splice(i, 1);\r\n                                        continue;\r\n                                    }\r\n\r\n                                    i++;\r\n                                }\r\n\r\n                                if (path.charAt(path.length - 1) == \"/\") {\r\n                                    pathParts.push(\"\"); // will add / at the end\r\n                                }\r\n\r\n                                if (path.charAt(0) == \"/\" \u0026\u0026 (pathParts.length \u003c= 1 || pathParts[0] != \"\")) {\r\n                                    pathParts.unshift(\"\"); // will add / at the start\r\n                                }\r\n                                path = pathParts.join(\"/\");\r\n                            }\r\n                        }\r\n                        url = parts[3 /* DOMAIN */] + path + parts[5 /* FILE */] + parts[6 /* SEARCH */] + parts[7 /* HASH */];\r\n                    }\r\n                    return url;\r\n                }\r\n                Url.normalize = normalize;\r\n                ;\r\n\r\n                function parseUrl(url) {\r\n                    if (url != null) {\r\n                        var m = url.toString().match(/^(([\\w]+:)?\\/{2,}([^\\/?#:]+)(:(\\d+))?)?([^?#]*\\/)*([^\\/?#]*)?(\\?[^#]*)?(#.*)?$/);\r\n                        var parts = [];\r\n                        parts[0 /* PROTOCOL */] = m[2] || \"\";\r\n                        parts[1 /* HOSTNAME */] = m[3] || \"\";\r\n                        parts[2 /* PORT */] = m[5] || \"\";\r\n                        parts[3 /* DOMAIN */] = m[1] || \"\";\r\n                        parts[4 /* PATH */] = m[6] || (m[1] ? \"/\" : \"\");\r\n                        parts[5 /* FILE */] = m[7] || \"\";\r\n                        parts[6 /* SEARCH */] = m[8] || \"\";\r\n                        parts[7 /* HASH */] = m[9] || \"\";\r\n                        return parts;\r\n                    }\r\n                }\r\n                Url.parseUrl = parseUrl;\r\n                ;\r\n            })(Types.Url || (Types.Url = {}));\r\n            var Url = Types.Url;\r\n        })(Client.Types || (Client.Types = {}));\r\n        var Types = Client.Types;\r\n    })(SDL.Client || (SDL.Client = {}));\r\n    var Client = SDL.Client;\r\n})(SDL || (SDL = {}));\r\n//# sourceMappingURL=Url2.js.map\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Types/Url2.js");
	globalEval(/*FILE-BEGIN*/"/// \u003creference path=\"../Application/Application.ts\" /\u003e\r\n/// \u003creference path=\"../Types/Url2.ts\" /\u003e\r\n/// \u003creference path=\"../Xml/Xml.Base.ts\" /\u003e\r\nvar SDL;\r\n(function (SDL) {\r\n    (function (Client) {\r\n        (function (Configuration) {\r\n            ;\r\n\r\n            var ConfigurationManagerClass = (function () {\r\n                function ConfigurationManagerClass() {\r\n                    this.configurationFiles = {};\r\n                    this.isInitialized = false;\r\n                    this.nonCoreInitialized = false;\r\n                    this.loadingCounter = 0;\r\n                    this.coreConfigurationToLoad = [];\r\n                }\r\n                ConfigurationManagerClass.prototype.initialize = function (callback, nonCoreInitCallback) {\r\n                    var _this = this;\r\n                    if (nonCoreInitCallback) {\r\n                        if (this.nonCoreInitialized) {\r\n                            nonCoreInitCallback();\r\n                        } else if (this.nonCoreInitCallbacks) {\r\n                            this.nonCoreInitCallbacks.push(nonCoreInitCallback);\r\n                        } else {\r\n                            this.nonCoreInitCallbacks = [nonCoreInitCallback];\r\n                        }\r\n                    }\r\n\r\n                    if (!this.isInitialized) {\r\n                        if (callback) {\r\n                            if (this.initCallbacks) {\r\n                                this.initCallbacks.push(callback);\r\n                            } else {\r\n                                this.initCallbacks = [callback];\r\n                            }\r\n                        }\r\n\r\n                        if (this.isInitialized === false) {\r\n                            this.isInitialized = undefined;\r\n\r\n                            if (!Client.Application.isInitialized) {\r\n                                this.coreConfigurationToLoad = [];\r\n                                Client.Application.addInitializeCallback(function () {\r\n                                    return _this.loadPostponedCoreConfiguration();\r\n                                });\r\n                            }\r\n\r\n                            if (!Configuration.settingsFile) {\r\n                                Configuration.settingsFile = \"/configuration.xml\";\r\n                            }\r\n\r\n                            if (Configuration.settingsFile.charAt(0) != \"/\") {\r\n                                Configuration.settingsFile = Client.Types.Url.combinePath(window.location.pathname, Configuration.settingsFile); // making sure the path starts with \"/\"\r\n                            }\r\n\r\n                            this.configurationFiles[Configuration.settingsFile.toLowerCase()] = { url: Configuration.settingsFile };\r\n\r\n                            this.loadingCounter = 1;\r\n\r\n                            if (Configuration.settings) {\r\n                                this.processConfigurationFile(Configuration.settings, Configuration.settingsFile);\r\n                            } else {\r\n                                xhr(Configuration.settingsVersion ? Client.Types.Url.combinePath(Configuration.settingsFile, \"?\" + Configuration.settingsVersion) : Configuration.settingsFile, function (result) {\r\n                                    return _this.processConfigurationFile(result, Configuration.settingsFile);\r\n                                });\r\n                            }\r\n                        }\r\n                    } else if (callback) {\r\n                        callback();\r\n                    }\r\n                };\r\n\r\n                ConfigurationManagerClass.prototype.getAppSetting = function (name) {\r\n                    return Client.Application.isHosted \u0026\u0026 Client.Application.sharedSettings \u0026\u0026 Client.Application.sharedSettings[name] || Client.Xml.getInnerText(this.configuration, \"//configuration/appSettings/setting[@name=\u0027\" + name + \"\u0027]/@value\");\r\n                };\r\n\r\n                ConfigurationManagerClass.prototype.getCurrentPageConfigurationNode = function () {\r\n                    if (!this.currentPageConfigurationNode) {\r\n                        var pageNodes = SDL.Client.Xml.selectNodes(this.configuration, \"//configuration/pages/page[@url]\");\r\n                        if (pageNodes) {\r\n                            var path = window.location.pathname;\r\n\r\n                            for (var i = 0, len = pageNodes.length; i \u003c len; i++) {\r\n                                var pageNode = pageNodes[i];\r\n                                var url = pageNode.getAttribute(\"url\");\r\n                                if (!SDL.Client.Types.Url.isAbsoluteUrl(url)) {\r\n                                    var baseUrl = pageNode.parentNode.getAttribute(\"baseUrl\");\r\n                                    if (baseUrl) {\r\n                                        url = SDL.Client.Types.Url.combinePath(baseUrl, url);\r\n                                    }\r\n\r\n                                    if (!SDL.Client.Types.Url.isAbsoluteUrl(url)) {\r\n                                        var baseUrlNodes = Client.Xml.selectNodes(pageNode, \"ancestor::configuration/@baseUrl\");\r\n                                        if (baseUrlNodes.length) {\r\n                                            url = SDL.Client.Types.Url.combinePath(baseUrlNodes[baseUrlNodes.length - 1].nodeValue, url);\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                                // create a regular expression to process \u0027*\u0027 as \u003canything\u003e.\r\n                                // if need \u0027*\u0027, then use \u0027\\*\u0027.\r\n                                // if need \\\u003canything\u003e, use %5C for \u0027\\\u0027 =\u003e %5C*\r\n                                var regExp = new RegExp(\"^\" + url.replace(/([\\(\\)\\{\\}\\[\\]\\^\\$\\?\\:\\.\\|\\+]|\\\\(?!\\*))/g, \"\\\\$1\").replace(/\\*/g, \".*\").replace(/\\\\\\.\\*/g, \"\\\\*\") + \"$\", \"i\");\r\n\r\n                                if (regExp.test(path)) {\r\n                                    return this.currentPageConfigurationNode = pageNode;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    return this.currentPageConfigurationNode;\r\n                };\r\n\r\n                ConfigurationManagerClass.prototype.getCurrentPageExtensionConfigurationNodes = function () {\r\n                    if (!this.currentPageExtensionConfigurationNodes) {\r\n                        var extensionNodes = this.currentPageExtensionConfigurationNodes = [];\r\n                        var pageNodes = SDL.Client.Xml.selectNodes(this.configuration, \"//configuration/extensions/pages/page[@url]\");\r\n                        if (pageNodes.length) {\r\n                            var path = window.location.pathname;\r\n\r\n                            for (var i = 0, len = pageNodes.length; i \u003c len; i++) {\r\n                                var pageNode = pageNodes[i];\r\n                                var url = pageNode.getAttribute(\"url\");\r\n                                if (!SDL.Client.Types.Url.isAbsoluteUrl(url)) {\r\n                                    var baseUrl = pageNode.parentNode.getAttribute(\"baseUrl\");\r\n                                    if (baseUrl) {\r\n                                        url = SDL.Client.Types.Url.combinePath(baseUrl, url);\r\n                                    }\r\n\r\n                                    if (!SDL.Client.Types.Url.isAbsoluteUrl(url)) {\r\n                                        var baseUrlNodes = Client.Xml.selectNodes(pageNode, \"ancestor::configuration/@baseUrl\");\r\n                                        if (baseUrlNodes.length) {\r\n                                            url = SDL.Client.Types.Url.combinePath(baseUrlNodes[baseUrlNodes.length - 1].nodeValue, url);\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                                // create a regular expression to process \u0027*\u0027 as \u003canything\u003e.\r\n                                // if need \u0027*\u0027, then use \u0027\\*\u0027.\r\n                                // if need \\\u003canything\u003e, use %5C for \u0027\\\u0027 =\u003e %5C*\r\n                                var regExp = new RegExp(\"^\" + url.replace(/([\\(\\)\\{\\}\\[\\]\\^\\$\\?\\:\\.\\|\\+]|\\\\(?!\\*))/g, \"\\\\$1\").replace(/\\*/g, \".*\").replace(/\\\\\\.\\*/g, \"\\\\*\") + \"$\", \"i\");\r\n\r\n                                if (regExp.test(path)) {\r\n                                    extensionNodes.push(pageNode);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    return this.currentPageExtensionConfigurationNodes;\r\n                };\r\n\r\n                ConfigurationManagerClass.prototype.callbacks = function () {\r\n                    if (this.initCallbacks) {\r\n                        for (var i = 0, len = this.initCallbacks.length; i \u003c len; i++) {\r\n                            this.initCallbacks[i]();\r\n                        }\r\n                        this.initCallbacks = null;\r\n                    }\r\n                };\r\n\r\n                ConfigurationManagerClass.prototype.nonCoreCallbacks = function () {\r\n                    if (this.nonCoreInitCallbacks) {\r\n                        for (var i = 0, len = this.nonCoreInitCallbacks.length; i \u003c len; i++) {\r\n                            this.nonCoreInitCallbacks[i]();\r\n                        }\r\n                        this.nonCoreInitCallbacks = null;\r\n                    }\r\n                };\r\n\r\n                ConfigurationManagerClass.prototype.processConfigurationFile = function (xmlString, baseUrl, parentElement) {\r\n                    /*\r\n                    ConfigurationManager.corePath is set to a configured value when the corresponding \u0027corePath\u0027 setting is found in a configuration file.\r\n                    ConfigurationManager.corePath is used to resolve urls that start with ~/. ~/ makes sense only if \u0027corePath\u0027 has already been set.\r\n                    processConfigurationFile(...) method is called when a configuration file is loaded.\r\n                    Therefore this is an impossible situation that the url of a loaded file starts with ~/ while ConfigurationManager.corePath is undefined.\r\n                    */\r\n                    this.configurationFiles[(baseUrl.indexOf(\"~/\") == 0 ? Client.Types.Url.combinePath(this.corePath, baseUrl.slice(2)) : baseUrl).toLowerCase()].data = xmlString;\r\n\r\n                    var document = Client.Xml.getNewXmlDocument(xmlString);\r\n                    if (Client.Xml.hasParseError(document)) {\r\n                        throw Error(\"Invalid xml loaded: \" + baseUrl + \"\\n\" + Client.Xml.getParseError(document));\r\n                    }\r\n\r\n                    var data = document.documentElement;\r\n\r\n                    if (!this.configuration) {\r\n                        this.configuration = data;\r\n                    }\r\n\r\n                    if (!this.corePath) {\r\n                        var corePath = Client.Xml.getInnerText(data, \"//configuration/appSettings/setting[@name=\u0027corePath\u0027]/@value\");\r\n                        if (corePath != null) {\r\n                            if (!corePath) {\r\n                                corePath = \"/\";\r\n                            } else if (corePath.slice(-1) != \"/\") {\r\n                                corePath += \"/\";\r\n                            }\r\n                            this.corePath = Client.Types.Url.combinePath(baseUrl, corePath);\r\n                        }\r\n                    }\r\n\r\n                    if (this.coreVersion == null) {\r\n                        this.coreVersion = Client.Xml.getInnerText(data, \"//configuration/appSettings/setting[@name=\u0027coreVersion\u0027]/@value\");\r\n                    }\r\n\r\n                    if (this.version == null) {\r\n                        this.version = Client.Xml.getInnerText(data, \"//configuration/appSettings/setting[@name=\u0027version\u0027]/@value\");\r\n                    }\r\n\r\n                    var includeNodes = Client.Xml.selectNodes(data, \"//configuration/include[not(configuration)]\");\r\n\r\n                    if (parentElement) {\r\n                        parentElement.appendChild(data);\r\n                    }\r\n\r\n                    var len = includeNodes.length;\r\n                    this.loadingCounter += len;\r\n\r\n                    if (baseUrl) {\r\n                        data.setAttribute(\"baseUrl\", baseUrl);\r\n                    }\r\n\r\n                    for (var i = 0; i \u003c len; i++) {\r\n                        this.loadIncludedConfigurationFile(includeNodes[i], baseUrl);\r\n                    }\r\n                    ;\r\n\r\n                    this.loadingCounter--;\r\n\r\n                    if (!this.nonCoreInitialized \u0026\u0026 this.loadingCounter == (this.coreConfigurationToLoad ? this.coreConfigurationToLoad.length : 0)) {\r\n                        this.nonCoreInitialized = true;\r\n                        this.isApplicationHost = !!Client.Xml.selectSingleNode(this.configuration, \"//configuration/applicationHost\");\r\n                        this.nonCoreCallbacks();\r\n                    }\r\n\r\n                    if (!this.loadingCounter) {\r\n                        this.isInitialized = true;\r\n                        this.callbacks();\r\n                    }\r\n                };\r\n\r\n                ConfigurationManagerClass.prototype.loadPostponedCoreConfiguration = function () {\r\n                    if (this.coreConfigurationToLoad) {\r\n                        var libraryConfigurationToLoad = this.coreConfigurationToLoad;\r\n                        this.coreConfigurationToLoad = null;\r\n                        for (var i = 0, len = libraryConfigurationToLoad.length; i \u003c len; i++) {\r\n                            this.loadCoreConfigurationFile(null, libraryConfigurationToLoad[i]);\r\n                        }\r\n                    }\r\n                };\r\n\r\n                ConfigurationManagerClass.prototype.loadCoreConfigurationFile = function (url, node) {\r\n                    if (!url) {\r\n                        url = node.getAttribute(\"src\");\r\n                    }\r\n\r\n                    this.loadConfigurationFile(url, Client.Types.Url.combinePath(this.corePath, url.slice(2)), node);\r\n                };\r\n\r\n                ConfigurationManagerClass.prototype.loadIncludedConfigurationFile = function (node, baseUrl) {\r\n                    var url = node.getAttribute(\"src\");\r\n\r\n                    if (url.indexOf(\"~/\") == 0) {\r\n                        if (this.coreConfigurationToLoad) {\r\n                            this.coreConfigurationToLoad.push(node);\r\n                        } else {\r\n                            this.loadCoreConfigurationFile(url, node);\r\n                        }\r\n                    } else {\r\n                        url = Client.Types.Url.combinePath(baseUrl, url);\r\n                        if (url.indexOf(\"~/\") == 0) {\r\n                            this.loadCoreConfigurationFile(url, node);\r\n                        } else {\r\n                            this.loadConfigurationFile(url, url, node);\r\n                        }\r\n                    }\r\n                };\r\n\r\n                ConfigurationManagerClass.prototype.loadConfigurationFile = function (url, resolvedUrl, node) {\r\n                    var _this = this;\r\n                    if (this.configurationFiles[resolvedUrl.toLowerCase()]) {\r\n                        // file is already included, skip it here\r\n                        this.loadingCounter--;\r\n                        return;\r\n                    }\r\n\r\n                    this.configurationFiles[resolvedUrl.toLowerCase()] = { url: url };\r\n\r\n                    var version;\r\n                    var appVersionNodes = Client.Xml.selectNodes(node, \"ancestor::configuration/appSettings/setting[@name=\u0027version\u0027 and @value]\");\r\n\r\n                    if (appVersionNodes.length) {\r\n                        var appVersionNode = appVersionNodes[appVersionNodes.length - 1];\r\n                        if (url.indexOf(\"~/\") == 0) {\r\n                            version = Client.Xml.getInnerText(appVersionNode, \"../../appSettings/setting[@name=\u0027coreVersion\u0027]/@value\");\r\n                        }\r\n                        if (!version) {\r\n                            version = appVersionNode.getAttribute(\"value\");\r\n                        }\r\n                    }\r\n\r\n                    var modification = node.getAttribute(\"modification\");\r\n                    version = (version \u0026\u0026 modification) ? (version + \".\" + modification) : (version || modification);\r\n\r\n                    if (Client.Application.isHosted \u0026\u0026 Client.Application.useHostedLibraryResources \u0026\u0026 url.indexOf(\"~/\") == 0) {\r\n                        Client.Application.ApplicationHost.getCommonLibraryResource({ url: url, version: version }, Client.Application.libraryVersion, function (result) {\r\n                            return _this.processConfigurationFile(result, url, node);\r\n                        });\r\n                    } else {\r\n                        xhr(version ? Client.Types.Url.combinePath(resolvedUrl, \"?\" + version) : resolvedUrl, function (result) {\r\n                            return _this.processConfigurationFile(result, url, node);\r\n                        });\r\n                    }\r\n                };\r\n                return ConfigurationManagerClass;\r\n            })();\r\n            ;\r\n\r\n            function xhr(url, callback) {\r\n                var xhr = new XMLHttpRequest();\r\n                xhr.onreadystatechange = function () {\r\n                    if (xhr.readyState == 4) {\r\n                        var statusCode = xhr.status;\r\n                        if (statusCode \u003c 200 || statusCode \u003e= 300) {\r\n                            var error;\r\n                            try  {\r\n                                error = xhr.statusText;\r\n                            } catch (err) {\r\n                            }\r\n\r\n                            throw Error(error || xhr.responseText);\r\n                        }\r\n\r\n                        callback(xhr.responseText);\r\n                    }\r\n                };\r\n                xhr.open(\"GET\", url, true);\r\n                xhr.send();\r\n            }\r\n\r\n            Configuration.ConfigurationManager = new ConfigurationManagerClass();\r\n        })(Client.Configuration || (Client.Configuration = {}));\r\n        var Configuration = Client.Configuration;\r\n    })(SDL.Client || (SDL.Client = {}));\r\n    var Client = SDL.Client;\r\n})(SDL || (SDL = {}));\r\n//# sourceMappingURL=ConfigurationManager.js.map\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "ConfigurationManager/ConfigurationManager.js");
	globalEval(/*FILE-BEGIN*/"/// \u003creference path=\"../Application/Application.ts\" /\u003e\r\n/// \u003creference path=\"../ConfigurationManager/ConfigurationManager.ts\" /\u003e\r\nvar SDL;\r\n(function (SDL) {\r\n    /// \u003creference path=\"../Localization/Localization.ts\" /\u003e\r\n    /// \u003creference path=\"../Resources/ResourceManager.ts\" /\u003e\r\n    (function (Client) {\r\n        var Appl = Client.Application;\r\n        var Conf = Client.Configuration;\r\n        var cm = Conf.ConfigurationManager;\r\n        var pageConfigurationElement;\r\n        var corePackageKey;\r\n\r\n        cm.initialize(initApplication, function () {\r\n            pageConfigurationElement = cm.getCurrentPageConfigurationNode();\r\n\r\n            if (!pageConfigurationElement) {\r\n                throw Error(\"Unable to find configuration for page \\\"\" + window.location.pathname + \"\\\"\");\r\n            }\r\n\r\n            if (cm.coreVersion) {\r\n                Appl.libraryVersion = cm.coreVersion; // use \u0027coreVersion\u0027 setting if configured\r\n            }\r\n\r\n            var hostingElement = Client.Xml.selectSingleNode(Conf.ConfigurationManager.configuration, \"//configuration/hosting\");\r\n            if (hostingElement) {\r\n                Appl.defaultApplicationHostUrl = Client.Xml.getInnerText(hostingElement, \"defaultApplicationHostUrl\");\r\n                Appl.defaultApplicationEntryPointId = Client.Xml.getInnerText(hostingElement, \"defaultApplicationEntryPointId\");\r\n                Appl.defaultApplicationSuiteId = Client.Xml.getInnerText(hostingElement, \"defaultApplicationSuiteId\");\r\n                Appl.useHostedLibraryResources = !Client.Xml.selectSingleNode(hostingElement, \"useHostedLibraryResources[.=\u0027false\u0027 or .=\u00270\u0027]\");\r\n\r\n                var map = function (nodes, handler) {\r\n                    var result = [];\r\n                    for (var i = 0, len = nodes.length; i \u003c len; i++) {\r\n                        result.push(handler ? handler(Client.Xml.getInnerText(nodes[i])) : Client.Xml.getInnerText(nodes[i]));\r\n                    }\r\n                    return result;\r\n                };\r\n\r\n                Appl.trustedApplicationHostDomains = map(Client.Xml.selectNodes(hostingElement, \"restrictions/trustedApplicationHostDomains/domain\"), function (domain) {\r\n                    return Client.Types.Url.getAbsoluteUrl(domain);\r\n                });\r\n\r\n                Appl.trustedApplications = map(Client.Xml.selectNodes(hostingElement, \"restrictions/trustedApplications/applicationId\"));\r\n\r\n                Appl.trustedApplicationDomains = map(Client.Xml.selectNodes(hostingElement, \"restrictions/trustedApplicationDomains/domain\"), function (domain) {\r\n                    return Client.Types.Url.getAbsoluteUrl(domain);\r\n                });\r\n            }\r\n\r\n            // Appl.initialize(), when completed, will unblock ConfigurationManager, allow it to load library configuration resources\r\n            Appl.initialize(function () {\r\n                var i;\r\n                var len;\r\n                var packagesToLoad = [];\r\n                if (!SDL.Client.Resources) {\r\n                    SDL.Client.Resources = {};\r\n                }\r\n\r\n                var packages = Client.Resources.preloadPackages || (Client.Resources.preloadPackages = {});\r\n                var corePackageUrl = \"~/Library/Core/Packages/SDL.Client.Core.js\";\r\n                corePackageKey = corePackageUrl.toLowerCase();\r\n                if (!packages[corePackageKey]) {\r\n                    packagesToLoad.push(packages[corePackageKey] = { packageName: \"SDL.Client.Core\", url: \"~/Library/Core/Packages/SDL.Client.Core.js\", version: Appl.libraryVersion });\r\n                }\r\n\r\n                if (cm.getAppSetting(\"debug\") != \"true\") {\r\n                    var pageConfElements = [pageConfigurationElement];\r\n\r\n                    var nodes = cm.getCurrentPageExtensionConfigurationNodes();\r\n                    for (i = 0, len = nodes.length; i \u003c len; i++) {\r\n                        pageConfElements.push(nodes[i]);\r\n                    }\r\n\r\n                    for (i = 0, len = pageConfElements.length; i \u003c len; i++) {\r\n                        var preloadPackages = Client.Xml.selectNodes(pageConfElements[i], \"preloadPackages/package[@url]\");\r\n                        if (preloadPackages.length) {\r\n                            var baseUrlNodes = Client.Xml.selectNodes(pageConfElements[i], \"ancestor::configuration/@baseUrl\");\r\n                            var baseUrl = baseUrlNodes.length ? baseUrlNodes[baseUrlNodes.length - 1].nodeValue : \"\";\r\n\r\n                            var appVersionNodes = Client.Xml.selectNodes(pageConfElements[i], \"ancestor::configuration/appSettings/setting[@name=\u0027version\u0027]/@value\");\r\n                            var appVersion = appVersionNodes.length ? appVersionNodes[appVersionNodes.length - 1].nodeValue : \"\";\r\n\r\n                            for (var j = 0, lenj = preloadPackages.length; j \u003c lenj; j++) {\r\n                                var packageElement = preloadPackages[j];\r\n                                var url = packageElement.getAttribute(\"url\");\r\n                                if (url.indexOf(\"~/\") != 0) {\r\n                                    url = Client.Types.Url.combinePath(baseUrl, url);\r\n                                }\r\n                                var key = url.toLowerCase();\r\n\r\n                                if (!packages[key]) {\r\n                                    var version = url.indexOf(\"~/\") == 0 ? Appl.libraryVersion : appVersion;\r\n                                    var modification = packageElement.getAttribute(\"modification\") || \"\";\r\n\r\n                                    packagesToLoad.push(packages[key] = {\r\n                                        packageName: packageElement.getAttribute(\"name\"),\r\n                                        url: url,\r\n                                        version: (version \u0026\u0026 modification) ? (version + \".\" + modification) : (version || modification) });\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                for (i = 0, len = packagesToLoad.length; i \u003c len; i++) {\r\n                    (function (pckg) {\r\n                        if (Appl.isHosted \u0026\u0026 Appl.useHostedLibraryResources \u0026\u0026 pckg.url.indexOf(\"~/\") == 0) {\r\n                            Appl.ApplicationHost.getCommonLibraryResource({ url: pckg.url, version: pckg.version }, Appl.libraryVersion, function (data) {\r\n                                pckg.isShared = true;\r\n                                pckg.data = data;\r\n                                packageLoaded();\r\n                            }, function (error) {\r\n                                pckg.error = error;\r\n                                throw Error(error);\r\n                            });\r\n                        } else {\r\n                            var xhr = new XMLHttpRequest();\r\n                            xhr.onreadystatechange = function () {\r\n                                if (xhr.readyState == 4) {\r\n                                    var statusCode = xhr.status;\r\n                                    if (statusCode \u003c 200 || statusCode \u003e= 300) {\r\n                                        var error;\r\n                                        try  {\r\n                                            error = xhr.statusText;\r\n                                        } catch (err) {\r\n                                        }\r\n\r\n                                        pckg.error = error;\r\n                                        throw Error(error || xhr.responseText);\r\n                                    }\r\n\r\n                                    pckg.data = xhr.responseText;\r\n                                    initApplication();\r\n                                }\r\n                            };\r\n\r\n                            xhr.open(\"GET\", (pckg.url.indexOf(\"~/\") == 0 ? Client.Types.Url.combinePath(cm.corePath, pckg.url.slice(2)) : pckg.url) + (pckg.version ? \"?\" + pckg.version : \"\"), true);\r\n                            xhr.send();\r\n                        }\r\n                    })(packagesToLoad[i]);\r\n                }\r\n            });\r\n        });\r\n\r\n        function packageLoaded() {\r\n            initApplication();\r\n        }\r\n\r\n        function initApplication() {\r\n            if (cm.isInitialized \u0026\u0026 Client.Resources \u0026\u0026 Client.Resources.preloadPackages) {\r\n                var corePackage = Client.Resources.preloadPackages[corePackageKey];\r\n                var finalizeInitialization = corePackage \u0026\u0026 corePackage.data != null;\r\n                if (finalizeInitialization) {\r\n                    var globalEval = eval;\r\n                    var corePackageUrl = Appl.isHosted \u0026\u0026 Appl.useHostedLibraryResources \u0026\u0026 corePackage.url.indexOf(\"~/\") == 0 ? Client.Types.Url.combinePath(Client.Application.applicationHostCorePath, corePackage.url.slice(2)) : Client.Types.Url.getAbsoluteUrl(corePackage.url.indexOf(\"~/\") == 0 ? Client.Types.Url.combinePath(cm.corePath, corePackage.url.slice(2)) : corePackage.url);\r\n                    globalEval(corePackage.data + \"\\n//@ sourceURL=\" + corePackageUrl);\r\n                }\r\n\r\n                var rm = Client.Resources.ResourceManager;\r\n                if (rm) {\r\n                    for (var key in Client.Resources.preloadPackages) {\r\n                        var pckg = Client.Resources.preloadPackages[key];\r\n                        if (pckg) {\r\n                            if (pckg.data != null) {\r\n                                switch (pckg.packageName) {\r\n                                    case \"SDL.Client.Init\":\r\n                                    case \"SDL.Client.Core\":\r\n                                        rm.registerPackageRendered(pckg.packageName, pckg.url, pckg.data);\r\n                                        break;\r\n                                    default:\r\n                                        rm.storeFileData(pckg.url, pckg.data, pckg.isShared);\r\n                                        break;\r\n                                }\r\n                                Client.Resources.preloadPackages[key] = null;\r\n                            } else if (pckg.packageName == \"SDL.Client.Init\") {\r\n                                rm.registerPackageRendered(pckg.packageName, pckg.url);\r\n                                Client.Resources.preloadPackages[key] = null;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (finalizeInitialization) {\r\n                    rm.registerPackageRendered(\"SDL.Client.Init\"); // in case it was not registered as rendered\r\n\r\n                    Client.Localization.setCulture((Appl.isHosted \u0026\u0026 Appl.ApplicationHost.culture) || cm.getAppSetting(\"culture\") || \"en\");\r\n                    rm.readConfiguration();\r\n\r\n                    window.document.title = pageConfigurationElement.getAttribute(\"title\") || \"\";\r\n\r\n                    var resource = pageConfigurationElement.getAttribute(\"resource\");\r\n                    if (resource) {\r\n                        rm.load(resource, function () {\r\n                            Client.Application.setApplicationReady();\r\n                        });\r\n                    } else {\r\n                        Client.Application.setApplicationReady();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    })(SDL.Client || (SDL.Client = {}));\r\n    var Client = SDL.Client;\r\n})(SDL || (SDL = {}));\r\n//# sourceMappingURL=init.js.map\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Bootstrap/init.js");
})();