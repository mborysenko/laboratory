/*SDL-PACKAGE*/
var SDL;
(function()
{
	var packageContextUrl;
	var defaultLocation = location.protocol + '//' + location.host + '/';
	if (SDL && SDL.Client && SDL.Client.Resources && SDL.Client.Resources.executingPackageUrl)
	{
		packageContextUrl = SDL.Client.Resources.executingPackageUrl.replace(/[^\/]*$/, '');
		SDL.Client.Resources.executingPackageUrl = null;
	}
	else
	{
		var scripts = document.getElementsByTagName('script');
		for (var i = 0, len = scripts.length; i < len; i++)
		{
			var script = scripts[i];
			var src = script.src;
			if (src)
			{
				if (script.getAttribute('data-package-name') == 'SDL.Client.Models')
				{
					packageContextUrl = src.replace(/[^\/]*$/, '');
					break;
				}
				else if (!packageContextUrl &&
					src.slice(-21).toLowerCase() == '/sdl.client.models.js')
				{
					packageContextUrl = src.slice(0, -20);
				}
			}
		}
	}

	var globalEval = eval;
	globalEval(/*FILE-BEGIN*/"/*! @namespace {SDL.Client.Models.MarshallableArray} */\r\nSDL.Client.Types.OO.createInterface(\"SDL.Client.Models.MarshallableArray\");\r\n\r\nSDL.Client.Models.MarshallableArray.$constructor = function SDL$Client$Models$MarshallableArray$constructor()\r\n{\r\n\tthis.addInterface(\"SDL.Client.Models.MarshallableObject\");\r\n\r\n\tthis.properties.array = [];\r\n};\r\n\r\nSDL.Client.Models.MarshallableArray.prototype.getArray = function SDL$Client$Models$MarshallableArray$getArray()\r\n{\r\n\treturn this.properties.array;\r\n};\r\n\r\nSDL.Client.Models.MarshallableArray.prototype.pack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$MarshallableArray$pack()\r\n{\r\n\treturn {array: this.properties.array};\r\n});\r\n\r\nSDL.Client.Models.MarshallableArray.prototype.unpack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$MarshallableArray$unpack(data)\r\n{\r\n\tif (data \u0026\u0026 data.array)\r\n\t{\r\n\t\tthis.properties.array = SDL.Client.Types.Array.clone(data.array);\r\n\t}\r\n});"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Models/MarshallableArray.js");
	globalEval(/*FILE-BEGIN*/"/*! @namespace {SDL.Client.Models.MarshallableObject} */\r\nSDL.Client.Types.OO.createInterface(\"SDL.Client.Models.MarshallableObject\");\r\n\r\nSDL.Client.Models.MarshallableObject.$constructor = function SDL$Client$Models$MarshallableObject$constructor()\r\n{\r\n\tthis.addInterface(\"SDL.Client.Types.ObjectWithEvents\");\r\n\r\n\tthis.properties.target;\r\n\tthis.properties.marshalling;\r\n\r\n\t//Copy the block within the comment below to a class implementing SDL.Client.Models.MarshallableObject\r\n\t/*\r\n\r\n\t// [optional]\r\n\t// implement pack whenever needed for marshalling\r\n\tthis.pack = SDL.Client.Types.OO.nonInheritable(function()\r\n\t{\r\n\t\treturn null;\t// returns an object that packs private variables\r\n\t});\r\n\r\n\t// [optional]\r\n\t// implement unpack whenever needed for marshalling\r\n\tthis.unpack = SDL.Client.Types.OO.nonInheritable(function(data)\r\n\t{\r\n\t\t//gets an object and unpacks it to private variables, making sure all object (reference type) variables are recreated locally\r\n\t});\r\n\t*/\r\n};\r\n\r\nSDL.Client.Models.MarshallableObject.prototype.getMarshalObject = function SDL$Client$Models$MarshallableObject$getMarshalObject()\r\n{\r\n\treturn this.properties.target;\r\n};\r\n\r\nSDL.Client.Models.MarshallableObject.prototype.pack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$MarshallableObject$pack()\r\n{\r\n\tvar properties = this.properties;\r\n\treturn {\"handlers\": properties.handlers};\r\n});\r\n\r\nSDL.Client.Models.MarshallableObject.prototype.unpack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$MarshallableObject$unpack(data)\r\n{\r\n\tif (data \u0026\u0026 data.handlers)\r\n\t{\r\n\t\tvar handlers = {};\r\n\t\tvar events = data.handlers;\r\n\t\tfor (var e in events)\r\n\t\t{\r\n\t\t\tvar h = events[e];\r\n\t\t\tvar tmp = handlers[e] = [];\r\n\t\t\tfor (var i = 0; i \u003c h.length; i++)\r\n\t\t\t{\r\n\t\t\t\ttmp[i] = {fnc: h[i].fnc};\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.properties.handlers = handlers;\r\n\t}\r\n});\r\n\r\nSDL.Client.Models.MarshallableObject.prototype._marshalData = function SDL$Client$Models$MarshallableObject$_marshalData(target)\r\n{\r\n\tvar p = this.properties;\r\n\tp.marshalling = true;\r\n\tp.target = target;\r\n\tvar targetInterfaces = target.interfaces;\r\n\tvar sourceInterfaces = this.interfaces;\r\n\tif (sourceInterfaces \u0026\u0026 targetInterfaces)\r\n\t{\r\n\t\tfor (var iface in targetInterfaces)\r\n\t\t{\r\n\t\t\tvar targetBase = targetInterfaces[iface];\r\n\t\t\tvar sourceBase = sourceInterfaces[iface];\r\n\t\t\tif (targetBase.unpack \u0026\u0026 sourceBase.pack)\r\n\t\t\t{\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\ttargetBase.unpack(sourceBase.pack());\r\n\t\t\t\t}\r\n\t\t\t\tcatch (err)\r\n\t\t\t\t{\r\n\t\t\t\t\talert(\"Failed to marshal interface \\\"\" + iface + \"\\\": \" + err.message);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tp.marshalling = false;\r\n\tthis.fireEvent(\"marshal\");\r\n\tp.handlers = undefined;\t// after marshalling the target object is responsible for firing all events\r\n};\r\n\r\nSDL.Client.Models.MarshallableObject.prototype._initializeMarshalledObject = function SDL$Client$Models$MarshallableObject$_initializeMarshalledObject(object)\r\n{\r\n\tif (object \u0026\u0026 object._marshalData \u0026\u0026 this.getTypeName() == object.getTypeName())\r\n\t{\r\n\t\tobject._marshalData(this);\r\n\t\tthis.callInterfaces(\"afterInitializeMarshalledObject\", [object]);\r\n\t\treturn true;\r\n\t}\r\n};\r\n\r\nSDL.Client.Models.MarshallableObject.prototype.isMarshalling = function SDL$Client$Models$MarshallableObject$isMarshalling()\r\n{\r\n\treturn this.properties.marshalling || false;\r\n};"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Models/MarshallableObject.js");
	globalEval(/*FILE-BEGIN*/"/*! @namespace {SDL.Client.Models.IdentifiableObject} */\r\nSDL.Client.Types.OO.createInterface(\"SDL.Client.Models.IdentifiableObject\");\r\n\r\n/*\r\n\tAdds an identifier (ID) to an object.\r\n*/\r\nSDL.Client.Models.IdentifiableObject.$constructor = function SDL$Client$Models$IdentifiableObject$constructor(id)\r\n{\r\n\tthis.addInterface(\"SDL.Client.Models.MarshallableObject\");\r\n\r\n\tvar p = this.properties;\r\n\tp.id = id;\r\n};\r\n\r\n/*\r\n\tReturns the ID of the object.\r\n*/\r\nSDL.Client.Models.IdentifiableObject.prototype.getId = function SDL$Client$Models$IdentifiableObject$getId()\r\n{\r\n\treturn this.properties.id;\r\n};\r\n\r\n// ------- SDL.Client.Models.MarshallableObject implementations/overrides\r\nSDL.Client.Models.IdentifiableObject.prototype.pack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$IdentifiableObject$pack()\r\n{\r\n\tvar p = this.properties;\r\n\treturn {\r\n\t\tid: p.id\r\n\t};\r\n});\r\n\r\nSDL.Client.Models.IdentifiableObject.prototype.unpack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$IdentifiableObject$unpack(data)\r\n{\r\n\tif (data)\r\n\t{\r\n\t\tvar p = this.properties;\r\n\t\tp.id = data.id;\r\n\t}\r\n});\r\n// ------- end of SDL.Client.Models.MarshallableObject overrides\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Models/IdentifiableObject.js");
	globalEval(/*FILE-BEGIN*/"/*! @namespace {SDL.Client.Models.ModelObject} */\r\nSDL.Client.Types.OO.createInterface(\"SDL.Client.Models.ModelObject\");\r\n\r\n/*\r\n\tMakes an object \"model-aware\".\r\n\tModel object knows its implementing model (model factory), its own item type, it can be marshalled and trigger events.\r\n*/\r\nSDL.Client.Models.ModelObject.$constructor = function SDL$Client$Models$ModelObject$constructor(id)\r\n{\r\n\tSDL.Client.Diagnostics.Assert.areEqual(SDL.Client.Models.getRepositoryOwningWindow(), window,\r\n\t\t\"An object of type SDL.Client.Models.ModelObject can only be created in the context of ModelRepository\");\r\n\r\n\tthis.addInterface(\"SDL.Client.Models.IdentifiableObject\", [id]);\r\n\r\n\tvar p = this.properties;\r\n\tp.modelFactory;\r\n\tp.itemType;\r\n};\r\n\r\n/*\r\n\tReturns the Model object that manages the current item.\r\n\tDifferent models can be registered with the system, each managing a specific domain.\r\n\tA Model is determined based on the item ID (the prefix used in the ID).\r\n*/\r\nSDL.Client.Models.ModelObject.prototype.getModelFactory = function SDL$Client$Models$ModelObject$getModelFactory()\r\n{\r\n\tvar p = this.properties;\r\n\tif (p.modelFactory === undefined)\r\n\t{\r\n\t\tp.modelFactory = SDL.Client.Models.getModelFactory(this.getId());\r\n\t}\r\n\treturn p.modelFactory;\r\n};\r\n\r\n/*\r\n\tReturns the string specifying the type of the item defined by the corresponding domain model.\r\n*/\r\nSDL.Client.Models.ModelObject.prototype.getItemType = function SDL$Client$Models$ModelObject$getItemType()\r\n{\r\n\tvar p = this.properties;\r\n\tif (p.itemType === undefined)\r\n\t{\r\n\t\tp.itemType = this.getModelFactory().getItemType(this.getId());\r\n\t}\r\n\treturn p.itemType;\r\n};"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Models/ModelObject.js");
	globalEval(/*FILE-BEGIN*/"/*! @namespace {SDL.Client.Models.CacheableObject} */\r\nSDL.Client.Types.OO.createInterface(\"SDL.Client.Models.CacheableObject\");\r\n\r\nSDL.Client.Models.CacheableObject.$constructor = function SDL$Client$Models$CacheableObject$constructor()\r\n{\r\n\tthis.addInterface(\"SDL.Client.Models.MarshallableObject\");\r\n\r\n\tvar p = this.properties;\r\n\tp.timeStamps = {}; //times of loading of data, item can have multiple pieces of data cached separately\r\n\tp.maxAge;\r\n};\r\n\r\nSDL.Client.Models.CacheableObject.prototype.getMaxAge = function SDL$Client$Models$CacheableObject$getMaxAge()\r\n{\r\n\tvar p = this.properties;\r\n\tif (p.maxAge == undefined)\r\n\t{\r\n\t\tvar interfaces = this.getInterfaceNames();\r\n\t\tvar xpath = \"//configuration/customSections/models:domainModels/models:caching/models:cache[(@implementation=\\\"\" +\r\n\t\t\tinterfaces.join(\"\\\" or @implementation=\\\"\") + \"\\\") and (number(@max-age) = @max-age) and (not(@priority) or number(@priority) = @priority)]\";\r\n\r\n\t\tvar settings = SDL.Client.Xml.selectNodes(SDL.Client.Configuration.ConfigurationManager.configuration, xpath);\r\n\t\tif (settings.length)\r\n\t\t{\r\n\t\t\tvar maxAgeIndex = 0;\r\n\t\t\tvar maxPrio = Number(settings[0].getAttribute(\"priority\")) || 0;\r\n\r\n\t\t\tfor (var i = 1, len = settings.length; i \u003c len; i++)\r\n\t\t\t{\r\n\t\t\t\tvar prio = Number(settings[i].getAttribute(\"priority\")) || 0;\r\n\t\t\t\tif (prio \u003e maxPrio)\r\n\t\t\t\t{\r\n\t\t\t\t\tmaxAgeIndex = i;\r\n\t\t\t\t\tprio = maxPrio;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tp.maxAge = Number(settings[maxAgeIndex].getAttribute(\"max-age\"));\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tp.maxAge = null;\r\n\t\t}\r\n\t}\r\n\treturn p.maxAge;\r\n};\r\n\r\nSDL.Client.Models.CacheableObject.prototype.isCacheValid = function SDL$Client$Models$CacheableObject$isCacheValid(data)\r\n{\r\n\tvar maxAge = this.getMaxAge();\r\n\treturn maxAge == undefined || (maxAge * 1000 \u003e (new Date()).getTime() - this.getTimeStamp(data));\r\n};\r\n\r\nSDL.Client.Models.CacheableObject.prototype.invalidateCache = function SDL$Client$Models$CacheableObject$invalidateCache(data)\r\n{\r\n\tif (data != undefined)\r\n\t{\r\n\t\tdelete this.properties.timeStamps[data]\r\n\t}\r\n\telse\r\n\t{\r\n\t\tthis.properties.timeStamps = {};\r\n\t}\r\n};\r\n\r\n/**\r\n@return {Date}\r\n*/\r\nSDL.Client.Models.CacheableObject.prototype.getTimeStamp = function SDL$Client$Models$CacheableObject$getTimeStamp(data)\r\n{\r\n\treturn this.properties.timeStamps[data || \"\"] || 0;\r\n};\r\n\r\nSDL.Client.Models.CacheableObject.prototype.setTimeStamp = function SDL$Client$Models$CacheableObject$setTimeStamp(timeStamp, data)\r\n{\r\n\tthis.properties.timeStamps[data || \"\"] = timeStamp;\r\n};\r\n\r\n// ------- SDL.Client.Models.MarshallableObject implementations/overrides\r\nSDL.Client.Models.CacheableObject.prototype.pack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$CacheableObject$pack()\r\n{\r\n\tvar p = this.properties;\r\n\treturn {\r\n\t\t\t\ttimeStamps: p.timeStamps,\r\n\t\t\t\tmaxAge: p.maxAge\r\n\t\t\t};\r\n});\r\n\r\nSDL.Client.Models.CacheableObject.prototype.unpack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$CacheableObject$unpack(data)\r\n{\r\n\tif (data)\r\n\t{\r\n\t\tvar p = this.properties;\r\n\t\tp.timeStamps = SDL.Client.Types.Object.clone(data.timeStamps);\r\n\t\tp.maxAge = data.maxAge;\r\n\t}\r\n});\r\n// ------- end of SDL.Client.Models.MarshallableObject overrides"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Models/CacheableObject.js");
	globalEval(/*FILE-BEGIN*/"/*! @namespace {SDL.Client.Models.LoadableObject} */\r\nSDL.Client.Types.OO.createInterface(\"SDL.Client.Models.LoadableObject\");\r\n\r\n/*\r\nAn interface that provides base implementation for loading and unloading an item.\r\nIt triggers related events (loading, load, loadfailed), manages item timestamp and its cached state.\r\nInterfaces inheriting from SDL.Client.Models.LoadableObject will override _executeLoad() method\r\nto implent the actual loading of data from a server and _processLoadResult() to handle the loaded data.\r\n*/\r\nSDL.Client.Models.LoadableObject.$constructor = function SDL$Client$Models$LoadableObject$constructor()\r\n{\r\n\tthis.addInterface(\"SDL.Client.Models.CacheableObject\");\r\n\r\n\tvar p = this.properties;\r\n\tp.loading = false;\r\n\tp.loaded = false;\r\n};\r\n\r\nSDL.Client.Models.LoadableObject.prototype._invalidateCachedState = function SDL$Client$Models$LoadableObject$_invalidateCachedState()\r\n{\r\n\tthis.callInterfaces(\"invalidateInterfaceCachedState\");\r\n\tthis.properties.loaded = false;\r\n};\r\n\r\n/*\r\nLoad object\u0027s data from the server.\r\nIf the data is already loaded the data will not be requested from the server and the method will return false.\r\nPass reload = true to force the loading of the data.\r\nThe method returns true of a request is made to the server.\r\nWhen data is loaded the object will trigger \"load\" event if the operation was successfull\r\nor \"loadfailed\" if loading did not succeed.\r\n*/\r\nSDL.Client.Models.LoadableObject.prototype.load = function SDL$Client$Models$LoadableObject$load(reload)\r\n{\r\n\tif (!this.isLoading() \u0026\u0026 (reload || !this.isLoaded(true)))\r\n\t{\r\n\t\tthis._setLoading();\r\n\t\tthis._executeLoad(reload);\r\n\t\treturn true;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn this.isLoading();\r\n\t}\r\n};\r\n\r\n/*\r\nInvalidates the loaded data and triggers \"unload\" event.\r\n*/\r\nSDL.Client.Models.LoadableObject.prototype.unload = function SDL$Client$Models$LoadableObject$unload()\r\n{\r\n\tthis._invalidateCachedState();\r\n\tthis.fireEvent(\"unload\");\r\n};\r\n\r\n/*\r\nReturns true if the object\u0027s data has been loaded from the server.\r\n*/\r\nSDL.Client.Models.LoadableObject.prototype.isLoaded = function SDL$Client$Models$LoadableObject$isLoaded(checkCacheValidity)\r\n{\r\n\treturn this.properties.loaded \u0026\u0026 (!checkCacheValidity || this.isCacheValid());\r\n};\r\n\r\nSDL.Client.Models.LoadableObject.prototype._setLoaded = function SDL$Client$Models$LoadableObject$_setLoaded()\r\n{\r\n\tthis.callInterfaces(\"beforeSetLoaded\");\r\n\tthis.properties.loading = false;\r\n\tthis.properties.loaded = true;\r\n\tthis.fireEvent(\"load\");\r\n\tthis.callInterfaces(\"afterSetLoaded\");\r\n};\r\n\r\n/*\r\nReturns true if object\u0027s data is being loaded from the server\r\n*/\r\nSDL.Client.Models.LoadableObject.prototype.isLoading = function SDL$Client$Models$LoadableObject$isLoading()\r\n{\r\n\treturn this.properties.loading;\r\n};\r\n\r\nSDL.Client.Models.LoadableObject.prototype._setLoading = function SDL$Client$Models$LoadableObject$_setLoading()\r\n{\r\n\tthis.properties.loading = true;\r\n\tthis.fireEvent(\"loading\");\r\n};\r\n\r\nSDL.Client.Models.LoadableObject.prototype._executeLoad = function SDL$Client$Models$LoadableObject$_executeLoad(reload)\r\n{\r\n\tthis._onLoad(); // to be overridden\r\n};\r\n\r\nSDL.Client.Models.LoadableObject.prototype._onLoad = function SDL$Client$Models$LoadableObject$_onLoad(result, webRequest)\r\n{\r\n\tthis._processLoadResult(result, webRequest);\r\n\tthis.setTimeStamp(new Date().getTime());\r\n\tthis._setLoaded();\r\n};\r\n\r\nSDL.Client.Models.LoadableObject.prototype._processLoadResult = function SDL$Client$Models$LoadableObject$_processLoadResult(result, webRequest)\r\n{\r\n\tthis._invalidateCachedState();\r\n\t// to be overridden\r\n};\r\n\r\nSDL.Client.Models.LoadableObject.prototype._onLoadFailed = function SDL$Client$Models$LoadableObject$_onLoadFailed(error, webRequest)\r\n{\r\n\tvar p = this.properties;\r\n\tp.loading = false;\r\n\r\n\tif (SDL.Client.Type.isString(error))\r\n\t{\r\n\t\tvar errorCode = webRequest ? webRequest.statusCode : null;\r\n\t\tthis.registerError(errorCode, error);\r\n\t\tthis.fireEvent(\"loadfailed\", { error: error, errorCode: errorCode });\r\n\t}\r\n\telse\r\n\t{\r\n\t\tif (!error.errorCode \u0026\u0026 webRequest)\r\n\t\t{\r\n\t\t\terror.errorCode = webRequest.statusCode;\r\n\t\t}\r\n\t\tthis.registerError(error.errorCode, error.message);\r\n\t\tthis.fireEvent(\"loadfailed\", error);\r\n\t}\r\n\tthis.callInterfaces(\"afterLoadFailed\", [error, webRequest]);\r\n};\r\n\r\nSDL.Client.Models.LoadableObject.prototype.registerError = function SDL$Client$Models$LoadableObject$registerError(errorCode, errorMessage)\r\n{\r\n\tSDL.Client.MessageCenter.registerException(new SDL.Client.Exception.Exception(errorCode, errorMessage));\r\n};\r\n\r\n// ------- SDL.Client.Models.MarshallableObject implementations/overrides\r\nSDL.Client.Models.LoadableObject.prototype.pack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$LoadableObject$pack()\r\n{\r\n\tvar p = this.properties;\r\n\treturn {\r\n\t\tloading: p.loading,\r\n\t\tloaded: p.loaded\r\n\t};\r\n});\r\n\r\nSDL.Client.Models.LoadableObject.prototype.unpack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$LoadableObject$unpack(data)\r\n{\r\n\tif (data)\r\n\t{\r\n\t\tvar p = this.properties;\r\n\t\tp.loading = data.loading;\r\n\t\tp.loaded = data.loaded;\r\n\t}\r\n});\r\n\r\nSDL.Client.Models.LoadableObject.prototype.afterInitializeMarshalledObject = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$LoadableObject$afterInitializeMarshalledObject(object)\r\n{\r\n\tvar p = this.properties;\r\n\tif (p.loading)\r\n\t{\r\n\t\t// the item was loading before marshalling -\u003e make sure it gets loaded in the new model repository\r\n\t\tp.loading = false;\r\n\t\tthis.load(true);\r\n\t}\r\n});\r\n// ------- end of SDL.Client.Models.MarshallableObject overrides\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Models/LoadableObject.js");
	globalEval(/*FILE-BEGIN*/"/*! @namespace {SDL.Client.Models.UpdatableObject} */\r\nSDL.Client.Types.OO.createInterface(\"SDL.Client.Models.UpdatableObject\");\r\n\r\n/*\r\n\tDefines methods for an object to update its data based on data loaded by an {SDL.Client.Models.UpdatableListObject} object.\r\n*/\r\nSDL.Client.Models.UpdatableObject.$constructor = function SDL$Client$Models$UpdatableObject$constructor(id)\r\n{\r\n\tthis.addInterface(\"SDL.Client.Models.IdentifiableObject\", [id]);\r\n\tthis.addInterface(\"SDL.Client.Models.LoadableObject\");\r\n\r\n\tvar p = this.properties;\r\n\tp.lastUpdateCheckTimeStamp = 0;\r\n};\r\n\r\n/*\r\n\tSets the timestamp (number) indicating the last time the item was updated with list data using setDataFromList() method.\r\n\tThis timestamp is used to optimize the process of updating the item using list data: only {SDL.Client.Models.UpdatableListObject} lists that\r\n\thave been loaded later than the item\u0027s lastUpdateCheckTimeStamp will be queried to update the item.\r\n*/\r\nSDL.Client.Models.UpdatableObject.prototype.setLastUpdateCheckTimeStamp = function SDL$Client$Models$UpdatableObject$setLastUpdateCheckTimeStamp(timeStamp)\r\n{\r\n\tthis.properties.lastUpdateCheckTimeStamp = timeStamp;\r\n};\r\n\r\n/*\r\n\tGets the timestamp (number) indicating the last time the item was updated with list data using setDataFromList() method.\r\n\tThis timestamp is used to optimize the process of updating the item using list data: only {SDL.Client.Models.UpdatableListObject} lists that\r\n\thave been loaded later than the item\u0027s lastUpdateCheckTimeStamp will be queried to update the item.\r\n*/\r\nSDL.Client.Models.UpdatableObject.prototype.getLastUpdateCheckTimeStamp = function SDL$Client$Models$UpdatableObject$getLastUpdateCheckTimeStamp()\r\n{\r\n\treturn this.properties.lastUpdateCheckTimeStamp;\r\n};\r\n\r\n\r\nSDL.Client.Models.UpdatableObject.prototype.afterSetLoaded = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$UpdatableObject$afterSetLoaded()\r\n{\r\n\tSDL.Client.Models.itemUpdated(this);\r\n});\r\n\r\n\r\n/*\r\n\tThe method uses data loaded by an {SDL.Client.Models.UpdatableListObject} to initialize the cached state of the item without\r\n\tthe need to load the full item data from the server.\r\n*/\r\nSDL.Client.Models.UpdatableObject.prototype.setDataFromList = function SDL$Client$Models$UpdatableObject$setDataFromList(data, parentId, timeStamp)\r\n{\r\n\tif (!timeStamp || timeStamp \u003e this.getTimeStamp())\r\n\t{\r\n\t\tthis.updateData(data, parentId);\r\n\r\n\t\tif (timeStamp)\r\n\t\t{\r\n\t\t\tthis.setTimeStamp(timeStamp);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/*\r\n\tThe method uses the provided item data to set the cached state of the item.\r\n*/\r\nSDL.Client.Models.UpdatableObject.prototype.updateData = function SDL$Client$Models$UpdatableObject$updateData(data, parentId)\r\n{\r\n\t// to be overriden\r\n};\r\n\r\n// ------- SDL.Client.Models.MarshallableObject implementations/overrides\r\nSDL.Client.Models.UpdatableObject.prototype.pack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$UpdatableObject$pack()\r\n{\r\n\tvar p = this.properties;\r\n\treturn {\r\n\t\t\t\tlastUpdateCheckTimeStamp: p.lastUpdateCheckTimeStamp\r\n\t\t\t};\r\n});\r\nSDL.Client.Models.UpdatableObject.prototype.unpack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$UpdatableObject$unpack(data)\r\n{\r\n\tif (data)\r\n\t{\r\n\t\tvar p = this.properties;\r\n\t\tp.lastUpdateCheckTimeStamp = data.lastUpdateCheckTimeStamp;\r\n\t}\r\n});\r\n// ------- end of SDL.Client.Models.MarshallableObject overrides"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Models/UpdatableObject.js");
	globalEval(/*FILE-BEGIN*/"/*! @namespace {SDL.Client.Models.UpdatableListObject} */\r\nSDL.Client.Types.OO.createInterface(\"SDL.Client.Models.UpdatableListObject\");\r\n\r\n/*\r\n\tAn interface to define methods for a list object that can be dynamically updated when\r\n\tan item in the list is changed. SDL.Client.Models.UpdatableListObject will also notify {SDL.Client.Models.UpdatableObject}\r\n\titems in the list when new list data is loaded from the server.\r\n\tA list of SDL.Client.Models.UpdatableListObject objects is maintained in the ModelRepository. Whenever a new\r\n\tinstance of {SDL.Client.Models.UpdatableObject} is cerated in the ModelRepository all SDL.Client.Models.UpdatableListObject\u0027s\r\n\tare queried for data for the item.\r\n*/\r\nSDL.Client.Models.UpdatableListObject.$constructor = function SDL$Client$Models$UpdatableListObject$constructor(id)\r\n{\r\n\tthis.addInterface(\"SDL.Client.Models.IdentifiableObject\", [id]);\r\n\tthis.addInterface(\"SDL.Client.Models.LoadableObject\");\r\n};\r\n\r\nSDL.Client.Models.UpdatableListObject.prototype.beforeSetLoaded = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$UpdatableListObject$beforeSetLoaded()\r\n{\r\n\tSDL.Client.Models.registerList(this);\r\n});\r\n\r\nSDL.Client.Models.UpdatableListObject.prototype.unload = function SDL$Client$Models$UpdatableListObject$unload()\r\n{\r\n\tSDL.Client.Models.unregisterList(this);\r\n\tthis.callBase(\"SDL.Client.Models.LoadableObject\", \"unload\");\r\n};\r\n\r\n/*\r\n\tInforms the list that an item has been updated.\r\n\tAllows the list to update it\u0027s state and trigger \"itemupdate\" or \"itemadd\" event.\r\n*/\r\nSDL.Client.Models.UpdatableListObject.prototype.itemUpdated = function SDL$Client$Models$UpdatableListObject$itemUpdated(item)\r\n{\r\n\t// this.fireEvent(\"itemupdate\", {item: item}) if the item is and stays in the list\r\n\t// this.fireEvent(\"itemadd\", {item: item}) if the item has been added to the list\r\n};\r\n\r\n/*\r\n\tInforms the list that an item has been removed from the list.\r\n\tAllows the list to update it\u0027s state and trigger \"itemremove\" event.\r\n*/\r\nSDL.Client.Models.UpdatableListObject.prototype.itemRemoved = function SDL$Client$Models$UpdatableListObject$itemRemoved(itemId)\r\n{\r\n\t// this.fireEvent(\"itemremove\", , {itemId: itemId}); if item was in the list\r\n};\r\n\r\n/*\r\n\tIf the list has some data related to an item, this data can be used to initialize the state\r\n\tof the {SDL.Client.Models.UpdatableObject} item without loading the full item from the server.\r\n\tupdateItemData() will extract data related to the item from the list and pass it to the item object.\r\n*/\r\nSDL.Client.Models.UpdatableListObject.prototype.updateItemData = function SDL$Client$Models$UpdatableListObject$updateItemData(item)\r\n{\r\n};"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Models/UpdatableListObject.js");
	globalEval(/*FILE-BEGIN*/"/*! @namespace {SDL.Client.Models.Navigator} */\r\nSDL.Client.Types.OO.createInterface(\"SDL.Client.Models.Navigator\");\r\n\r\nSDL.Client.Models.Navigator.$constructor = function SDL$Client$Models$Navigator$constructor()\r\n{\r\n\tthis.addInterface(\"SDL.Client.Types.DisposableObject\");\r\n};\r\n\r\nSDL.Client.Models.Navigator.prototype.$initialize = function SDL$Client$Models$Navigator$constructor()\r\n{\r\n\tvar navigators = (SDL.Client.Models.getFromRepository(\"models-navigator-registry\") ||\r\n\t\tSDL.Client.Models.createInRepository(\"models-navigator-registry\", \"SDL.Client.Models.MarshallableArray\"));\r\n\r\n\tnavigators.getArray().push(this);\r\n};\r\n\r\nSDL.Client.Models.Navigator.prototype.navigateTo = function SDL$Client$Models$Navigator$navigateTo(item, exploring, fromWindow)\r\n{ };\r\n\r\nSDL.Client.Models.Navigator.prototype.disposeInterface = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$Navigator$disposeInterface()\r\n{\r\n\tvar reg = SDL.Client.Models.getFromRepository(\"models-navigator-registry\");\r\n\tif (reg)\r\n\t{\r\n\t\tvar navs = reg.getArray();\r\n\t\tSDL.Client.Types.Array.removeAt(navs, SDL.jQuery.inArray(this, navs));\r\n\t}\r\n});\r\n\r\n// static method\r\nSDL.Client.Models.Navigator.getNavigator = function SDL$Client$Models$Navigator$getNavigator()\r\n{\r\n\tvar reg = SDL.Client.Models.getFromRepository(\"models-navigator-registry\");\r\n\tif (reg)\r\n\t{\r\n\t\treturn reg.getArray()[0];\r\n\t}\r\n};\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Models/Navigator.js");
	globalEval(/*FILE-BEGIN*/"/*! @namespace {SDL.Client.Repository.RepositoryBase} */\r\nSDL.Client.Types.OO.createInterface(\"SDL.Client.Repository.RepositoryBase\");\r\n\r\nSDL.Client.Repository.ModelRepositoryDiscoveryMode = {\r\n\tNONE: 0,\r\n\tTOP: 1,\r\n\tOPENER: 2,\r\n\tFULL: 3\r\n};\r\n\r\nSDL.Client.Repository.RepositoryBase.initRepository = function SDL$Client$Repository$RepositoryBase$initRepository(mode, identifier)\r\n{\r\n\tmode = (!isNaN(mode) \u0026\u0026 (mode || mode === SDL.Client.Repository.ModelRepositoryDiscoveryMode.NONE))\r\n\t\t? Number(mode)\r\n\t\t: SDL.Client.Repository.ModelRepositoryDiscoveryMode.FULL;\r\n\r\n\tidentifier = (\"sdl_repository_\" + document.location.protocol + document.location.host + \"_\" + document.location.port + \"_\" + (identifier || \"\")).replace(/[\\:\\/\\\\\\.\\-]/g, \"_\");\r\n\r\n\tSDL.Client.Repository.RepositoryBase.$constructor = function SDL$Client$Repository$RepositoryBase$constructor()\r\n\t{\r\n\t\tthis.addInterface(\"SDL.Client.Models.IdentifiableObject\", [identifier]);\r\n\r\n\t\tvar items = {};\r\n\t\tvar uniqueId = 0;\r\n\r\n\t\t// ------- SDL.Client.Models.MarshallableObject methods implementations/overrides\r\n\t\tthis.pack = SDL.Client.Types.OO.nonInheritable(function()\r\n\t\t{\r\n\t\t\tvar data = { \"items\": items, \"uniqueId\": uniqueId };\r\n\t\t\treturn data;\r\n\t\t});\r\n\r\n\t\tthis.unpack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Repository$RepositoryBase$unpack(data)\r\n\t\t{\r\n\t\t\tif (data)\r\n\t\t\t{\r\n\t\t\t\tuniqueId = data.uniqueId || 0;\r\n\t\t\t\tif (data.items)\r\n\t\t\t\t{\r\n\t\t\t\t\tfor (var id in data.items)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar item = SDL.Client.Types.OO.importObject(data.items[id]);\r\n\t\t\t\t\t\tif (item)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\titems[id] = item;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\t// ------- end of SDL.Client.Models.MarshallableObject overrides\r\n\r\n\t\t// ------- SDL.Client.Types.DisposableObject methods overrides\r\n\t\tthis.disposeInterface = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Repository$RepositoryBase$disposeInterface()\r\n\t\t{\r\n\t\t\tif (mode \u003e= SDL.Client.Repository.ModelRepositoryDiscoveryMode.FULL)\r\n\t\t\t{\r\n\t\t\t\twindow.name = \"\";\r\n\t\t\t\tif (window.top != window)\r\n\t\t\t\t{\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twindow.top.name = \"\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (err)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//it might fail if the page is loaded in a frame\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSDL.Client.Event.EventRegister.removeEventHandler(SDL.Client.Event.EventRegister, \"beforedispose\", this.getDelegate(this._onWindowUnload));\r\n\t\t});\r\n\t\t// ------- end of SDL.Client.Types.DisposableObject overrides\r\n\r\n\t\tthis.getOwningWindow = function SDL$Client$Repository$RepositoryBase$getOwningWindow()\r\n\t\t{\r\n\t\t\treturn window;\r\n\t\t};\r\n\r\n\t\tthis.getUniqueId = function SDL$Client$Repository$RepositoryBase$getUniqueId()\r\n\t\t{\r\n\t\t\treturn \"id_\" + (++uniqueId);\r\n\t\t};\r\n\r\n\t\tthis.getItem = function SDL$Client$Repository$RepositoryBase$getItem(id)\r\n\t\t{\r\n\t\t\treturn items[id];\r\n\t\t};\r\n\r\n\t\tthis.setItem = function SDL$Client$Repository$RepositoryBase$setItem(id, item)\r\n\t\t{\r\n\t\t\titems[id] = item;\r\n\t\t};\r\n\r\n\t\tthis.removeItem = function SDL$Client$Repository$RepositoryBase$removeItem(id)\r\n\t\t{\r\n\t\t\tdelete items[id];\r\n\t\t};\r\n\r\n\t\tthis.createItem = function SDL$Client$Repository$RepositoryBase$createItem(id, type, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)\r\n\t\t{\r\n\t\t\t// Unfortunatelly, apply(object, arguments) cannot by used with constructors\r\n\t\t\tvar resolveNamespace = SDL.Client.Type.resolveNamespace(type);\r\n\t\t\tif (resolveNamespace)\r\n\t\t\t{\r\n\t\t\t\tvar item = (items[id] = new (resolveNamespace)(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10));\r\n\t\t\t\tif (item)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn item;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t};\r\n\r\n\t\tthis.getItems = function SDL$Client$Repository$RepositoryBase$getItems()\r\n\t\t{\r\n\t\t\treturn items;\r\n\t\t};\r\n\r\n\t\tthis._onWindowUnload = function SDL$Client$Repository$RepositoryBase$_onWindowUnload()\r\n\t\t{\r\n\t\t\tthis.dispose();\r\n\t\t};\r\n\r\n\t\t//-- start of initialization --\r\n\t\tif (mode \u003e= SDL.Client.Repository.ModelRepositoryDiscoveryMode.FULL)\r\n\t\t{\r\n\t\t\t// set window name to be able to connect to it using window.open\r\n\t\t\twindow.name = identifier;\r\n\t\t\tif (window.top != window)\r\n\t\t\t{\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\twindow.top.name = identifier;\r\n\t\t\t\t}\r\n\t\t\t\tcatch (err)\r\n\t\t\t\t{\r\n\t\t\t\t\t//it might fail if the page is loaded in a frame\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tSDL.Client.Event.EventRegister.addEventHandler(SDL.Client.Event.EventRegister, \"beforedispose\", this.getDelegate(this._onWindowUnload));\t// making sure the repository is disposed last\r\n\t\t//-- end of initialization --\r\n\t};\r\n\r\n\t// SDL.Client.Repository.RepositoryBase static members\r\n\tfunction findRepository()\r\n\t{\r\n\t\tvar checkedTopWindows = [];\r\n\r\n\t\tvar findRepositoryInFrame = function SDL$Client$Repository$RepositoryBase$findRepositoryInFrame(win)\r\n\t\t{\r\n\t\t\tvar repository;\r\n\r\n\t\t\tif (!win.closed)\r\n\t\t\t{\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tif (win.SDL \u0026\u0026 win.SDL.Client)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\trepository = win.SDL.Client.ModelRepository;\r\n\t\t\t\t\t\tif (repository \u0026\u0026 (repository.getId() != identifier  || repository.getDisposing() || repository.getDisposed()))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\trepository = null;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcatch (err)\r\n\t\t\t\t{\r\n\t\t\t\t\t// might fail due to different domain\r\n\t\t\t\t\trepository = null;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!repository)\r\n\t\t\t\t{\r\n\t\t\t\t\tfor (var i = 0, len = win.frames.length; !repository \u0026\u0026 i \u003c len; i++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (win.frames[i])\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\trepository = findRepositoryInFrame(win.frames[i]);                    \r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn repository;\r\n\t\t};\r\n\r\n\t\tvar findRepositoryInWindow = function SDL$Client$Repository$RepositoryBase$findRepositoryInWindow(win, noOpener)\r\n\t\t{\r\n\t\t\tif (mode \u003e= SDL.Client.Repository.ModelRepositoryDiscoveryMode.TOP)\r\n\t\t\t{\r\n\t\t\t\tvar top = win ? win.top : window.top;\r\n\t\t\t\tif (SDL.jQuery.inArray(top, checkedTopWindows) == -1)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar repository = findRepositoryInFrame(top);\r\n\r\n\t\t\t\t\tif (!noOpener \u0026\u0026 !repository \u0026\u0026 mode \u003e= SDL.Client.Repository.ModelRepositoryDiscoveryMode.OPENER)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcheckedTopWindows.push(top);\r\n\r\n\t\t\t\t\t\tvar opener;\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\topener = top.opener \u0026\u0026 top.opener.top;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(err)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\topener = null;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (opener)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\trepository = findRepositoryInWindow(opener);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn repository;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar repository = findRepositoryInWindow();\r\n\r\n\t\tif (!repository \u0026\u0026 mode \u003e= SDL.Client.Repository.ModelRepositoryDiscoveryMode.FULL)\r\n\t\t{\r\n\t\t\tvar win = window.open(\"\", identifier, \"top=10000,left=10000,width=100,height=100\");\r\n\r\n\t\t\tif (win \u0026\u0026 !win.closed \u0026\u0026 SDL.jQuery.inArray(win, checkedTopWindows) == -1)\r\n\t\t\t{\r\n\t\t\t\tvar toClose;\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\ttoClose = (win.location.href == \"about:blank\");\r\n\t\t\t\t}\r\n\t\t\t\tcatch (err)\r\n\t\t\t\t{\r\n\t\t\t\t\ttoClose = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!toClose)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar winOpener;\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twinOpener = win.opener;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(err)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twinOpener = null;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttoClose = (winOpener == window \u0026\u0026 win.document \u0026\u0026 win.document.body \u0026\u0026 win.document.body.innerHTML.length == 0);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (err)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttoClose = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (toClose)\r\n\t\t\t\t{\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twin.close();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (err)\r\n\t\t\t\t\t{ }\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\trepository = findRepositoryInWindow(win);\r\n\r\n\t\t\t\t\tif (!repository)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\twin.name = undefined; //clear the name of that window, apparently something has gone wrong there during unload\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch (err)\r\n\t\t\t\t\t\t{ }\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\r\n\t\t\tif (!repository)\r\n\t\t\t{\r\n\t\t\t\t// multiple iframes, if loading simultaneously, might not have discovered each other, then all would try window.open(),\r\n\t\t\t\t// then would create their own repositories. Trying to prevent this by inspecting the local window again\r\n\t\t\t\tcheckedTopWindows = [];\r\n\t\t\t\trepository = findRepositoryInWindow(window.top, true);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn repository;\r\n\t};\r\n\r\n\tfunction connectToRepository()\r\n\t{\r\n\t\tvar modelRepository = findRepository();\r\n\t\tif (modelRepository)\r\n\t\t{\r\n\t\t\tSDL.Client.Event.EventRegister.addEventHandler(modelRepository, \"beforedispose\", onRepositoryDispose);\r\n\t\t\tSDL.Client.Event.EventRegister.addEventHandler(modelRepository, \"marshal\", onRepositoryMarshal);\r\n\t\t}\r\n\t\treturn modelRepository;\r\n\t};\r\n\r\n\tfunction onRepositoryDispose()\r\n\t{\r\n\t\tvar win = window;\r\n\t\tvar evt;\r\n\t\t\r\n\t\tdo\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tevt = win.SDL \u0026\u0026  win.SDL.Client \u0026\u0026  win.SDL.Client.Event \u0026\u0026  win.SDL.Client.Event.EventRegister;\r\n\t\t\t}\r\n\t\t\tcatch (err)\r\n\t\t\t{\r\n\t\t\t\t// would fail if cross-domain\r\n\t\t\t}\r\n\r\n\t\t\tif (evt \u0026\u0026 evt.isUnloading())\r\n\t\t\t{\r\n\t\t\t\t//if window is being closed -\u003e ignore the event, can\u0027t do much anyway\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\twin = (win.parent != win) ? win.parent : null;\r\n\t\t\t}\r\n\t\t\tcatch (err)\r\n\t\t\t{\r\n\t\t\t\twin = null;\r\n\t\t\t\t// would fail if an iframe in a document from another domain\r\n\t\t\t}\r\n\t\t}\r\n\t\twhile (win);\r\n\r\n\t\tSDL.Client.Event.EventRegister.removeEventHandler(SDL.Client.ModelRepository, \"beforedispose\", onRepositoryDispose);\r\n\t\tSDL.Client.Event.EventRegister.removeEventHandler(SDL.Client.ModelRepository, \"marshal\", onRepositoryMarshal);\r\n\t\t\r\n\t\tSDL.Client.ModelRepository = SDL.Client.Types.OO.importObject(SDL.Client.ModelRepository);\r\n\t};\r\n\r\n\tfunction onRepositoryMarshal()\r\n\t{\r\n\t\tvar marshalRepository = SDL.Client.ModelRepository.getMarshalObject();\r\n\t\tif (marshalRepository \u0026\u0026 !marshalRepository.getDisposing())\r\n\t\t{\r\n\t\t\tSDL.Client.ModelRepository = marshalRepository;\r\n\t\t}\r\n\t};\r\n\r\n\tSDL.Client.ModelRepository = connectToRepository() || new SDL.Client.Repository.RepositoryBase();\r\n};"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Repository/RepositoryBase.js");
	globalEval(/*FILE-BEGIN*/"/*! @namespace {SDL.Client.Models} */\r\nSDL.Client.Type.registerNamespace(\"SDL.Client.Models\");\r\n\r\nSDL.Client.Models.ItemType =\r\n\t{\r\n\t\tNONE: 0\r\n\t};\r\n\r\n(function()\r\n{\r\n\tvar models = SDL.Client.Models;\r\n\r\n\tmodels.idMatches = {};\r\n\tmodels.itemTypes = {};\r\n\r\n\t/*\r\n\t\tRegisters a domain model factory {SDL.Client.ModelFactory}.\r\n\t\tmatchPattern is a regular expression object or a string that matches\r\n\t\t\tID\u0027s of items managed by the model factory {SDL.Client.ModelFactory}.\r\n\t\tfactory is a domain model factory object. A model factory provides a number of methods to manage\r\n\t\t\tmodel items that belong to a certain domain.\r\n\t\titemTypes is an array of object of the following form:\r\n\t\t\t{\r\n\t\t\t\tid: ...,\t\t// item type id, i.e. CMIS.Model.getDocumentType()\r\n\t\t\t\talias: ...,\t\t// a string to be added to {SDL.Client.Models.ItemType} enum,\r\n\t\t\t\t\t\t\t\t// i.e. \"CMIS_DOCUMENT\"\r\n\t\t\t\timplementation: ...\t// a string, the class implementing the given item type,\r\n\t\t\t\t\t\t\t\t// i.e. \"{Cmis.Document}\"\r\n\t\t\t}\r\n\t*/\r\n\tmodels.registerModelFactory = function SDL$Client$Models$registerModelFactory(matchPattern, factory, itemTypes)\r\n\t{\r\n\t\tif (!(matchPattern in this.idMatches))\r\n\t\t{\r\n\t\t\tif (!SDL.Client.Types.OO.implementsInterface(factory, \"SDL.Client.Models.ModelFactory\"))\r\n\t\t\t{\r\n\t\t\t\tSDL.Client.Diagnostics.Assert.raiseError(\"SDL.Client.Models.ModelFactory object is not specified for item types with idmatch: \" + matchPattern);\r\n\t\t\t}\r\n\t\t\tthis.idMatches[matchPattern] = { regExp: new RegExp(matchPattern), factory: factory };\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tfactory = this.idMatches[matchPattern].factory;\r\n\t\t}\r\n\r\n\t\tif (itemTypes)\r\n\t\t{\r\n\t\t\tfor (var i = 0, len = itemTypes.length; i \u003c len; i++)\r\n\t\t\t{\r\n\t\t\t\tthis.registerItemType(itemTypes[i], factory);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/*\r\n\t\tAssociates a specific itemType with a model factory {SDL.Client.ModelFactory}.\r\n\t*/\r\n\tmodels.registerItemType = function SDL$Client$Models$registerItemType(itemType, factory)\r\n\t{\r\n\t\tvar id = itemType.id;\r\n\t\tSDL.Client.Models.ItemType[itemType.alias] = id;\r\n\r\n\t\tif (itemType.implementation)\r\n\t\t{\r\n\t\t\tvar impl = SDL.Client.Type.resolveNamespace(itemType.implementation);\r\n\t\t\tif (impl)\r\n\t\t\t{\r\n\t\t\t\timpl.ItemType = id;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tSDL.Client.Diagnostics.Assert.raiseError(\"Type implementation \\\"\" + itemType.implementation + \"\\\" is missing.\");\r\n\t\t\t}\r\n\t\t}\r\n\t\titemType.factory = factory;\r\n\t\tthis.itemTypes[id] = itemType;\r\n\t};\r\n\r\n\t/*\r\n\t\tReturns the Model (model factory) object for the given item.\r\n\t\tThe model factory is resolved based on the ID of the item.\r\n\t\tEvery model factory registers itself using registerModelFactory() method\r\n\t*/\r\n\tmodels.getModelFactory = function SDL$Client$Models$getModelFactory(item)\r\n\t{\r\n\t\tif (item)\r\n\t\t{\r\n\t\t\tif (SDL.Client.Types.OO.implementsInterface(item, \"SDL.Client.Models.IdentifiableObject\"))\r\n\t\t\t{\r\n\t\t\t\titem = item.getId();\r\n\t\t\t}\r\n\r\n\t\t\tvar idMatchRegistry = this.idMatches;\r\n\t\t\tfor (var idmatch in idMatchRegistry)\r\n\t\t\t{\r\n\t\t\t\tif (idmatch)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (idMatchRegistry[idmatch].regExp.test(item))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn idMatchRegistry[idmatch].factory;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (\"\" in idMatchRegistry)\r\n\t\t\t{\r\n\t\t\t\treturn idMatchRegistry[\"\"].factory;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/*\r\n\t\tReturns the owning window of the SDL.Client.Models object.\r\n\t*/\r\n\tmodels.getOwningWindow = function SDL$Client$Models$getOwningWindow()\r\n\t{\r\n\t\treturn window;\r\n\t};\r\n\r\n\t/*\r\n\t\tReturns the owning window of the model repository.\r\n\t*/\r\n\tmodels.getRepositoryOwningWindow = function()\r\n\t{\r\n\t\tvar repository = SDL.Client.ModelRepository;\r\n\t\tif (repository.isMarshalling())\r\n\t\t{\r\n\t\t\treturn repository.getMarshalObject().getOwningWindow();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn repository.getOwningWindow();\r\n\t\t}\r\n\t};\r\n\r\n\t/*\r\n\t\tReturns a list of all registered Models (model factories).\r\n\t\tEvery model factory registers itself using registerModelFactory() method.\r\n\t*/\r\n\tmodels.getModelFactories = function SDL$Client$Models$getModelFactories()\r\n\t{\r\n\t\tvar factories = [];\r\n\t\tvar idMatchRegistry = this.idMatches;\r\n\t\tfor (var idmatch in idMatchRegistry)\r\n\t\t{\r\n\t\t\tvar factory = idMatchRegistry[idmatch].factory;\r\n\t\t\tif (factory \u0026\u0026 SDL.jQuery.inArray(factory, factories) == -1)\r\n\t\t\t{\r\n\t\t\t\tfactories.push(factory);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn factories;\r\n\t};\r\n\r\n\t/*\r\n\t\tReturns an domain model object for the specified ID.\r\n\t\tExamples:\r\n\t\t\tvar schema = SDL.Client.Models.getItem(\"/schemas/schema.xsd\");\r\n\t\t\tvar item = SDL.Client.Models.getItem(\"url:document//doc.xml\");\r\n\t*/\r\n\tmodels.getItem = function SDL$Client$Models$getItem(id)\r\n\t{\r\n\t\tvar factory = this.getModelFactory(id);\r\n\t\tif (factory)\r\n\t\t{\r\n\t\t\treturn factory.getItem(id);\r\n\t\t}\r\n\t};\r\n\r\n\t/*\r\n\t\tCreates a new domain model object instance in the {SDL.Client.ModelRepository} based on the provided item type.\r\n\t\tExample:\r\n\t\t\tvar item = SDL.Client.Models.createNewItem({SDL.Client.Models.ItemType}.CMIS_DOCUMENT);\r\n\t*/\r\n\tmodels.createNewItem = function SDL$Client$Models$createNewItem(type)\r\n\t{\r\n\t\tvar itemTypeData = this.itemTypes[type];\r\n\t\tif (itemTypeData)\r\n\t\t{\r\n\t\t\treturn itemTypeData.factory.createNewItem(type);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tSDL.Client.Diagnostics.Assert.raiseError(\"Cannot determine a model factory for item type \\\"\" + type + \"\\\".\");\r\n\t\t}\r\n\t};\r\n\r\n\t/*\r\n\t\tReturns an item type for the given ID.\r\n\t\tExample:\r\n\t\t\tSDL.Client.Models.getItemType(\"/schemas/schema.xsd\") == {SDL.Client.Models.ItemType}.URL_DOCUMENT;\r\n\t*/\r\n\tmodels.getItemType = function SDL$Client$Models$getItemType(id)\r\n\t{\r\n\t\tvar factory = this.getModelFactory(id);\r\n\t\tif (factory)\r\n\t\t{\r\n\t\t\treturn factory.getItemType(id);\r\n\t\t}\r\n\t};\r\n\r\n\t/*\r\n\t\tReturns a string that can be used as an ID for a domain model object instance.\r\n\t*/\r\n\tmodels.getUniqueId = function SDL$Client$Models$getUniqueId()\r\n\t{\r\n\t\tvar repository = SDL.Client.ModelRepository;\r\n\t\tvar id;\r\n\t\tif (repository.isMarshalling())\r\n\t\t{\r\n\t\t\tid = repository.getMarshalObject().getUniqueId();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tid = repository.getUniqueId();\r\n\t\t}\r\n\r\n\t\treturn id;\r\n\t};\r\n\r\n\t/*\r\n\t\tAdds the provided item to {SDL.Client.ModelRepository} with the specified ID.\r\n\t*/\r\n\tmodels.addToRepository = function SDL$Client$Models$addToRepository(id, item)\r\n\t{\r\n\t\tvar repository = SDL.Client.ModelRepository;\r\n\t\tvar result;\r\n\t\tif (!repository.getDisposing() \u0026\u0026 !repository.getDisposed())\r\n\t\t{\r\n\t\t\tresult = repository.setItem(id, item);\r\n\t\t}\r\n\t\telse if (repository.isMarshalling())\r\n\t\t{\r\n\t\t\tresult = repository.getMarshalObject().setItem(id, item);\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/*\r\n\t\tReturns an item with the specified ID from {SDL.Client.ModelRepository}.\r\n\t*/\r\n\tmodels.getFromRepository = function SDL$Client$Models$getFromRepository(id)\r\n\t{\r\n\t\tvar item;\r\n\t\tvar repository = SDL.Client.ModelRepository;\r\n\r\n\t\tif (!repository.getDisposing() \u0026\u0026 !repository.getDisposed())\r\n\t\t{\r\n\t\t\titem = repository.getItem(id);\r\n\t\t}\r\n\t\telse if (repository.isMarshalling())\r\n\t\t{\r\n\t\t\tvar repositoryMarshalTarget = repository.getMarshalObject();\r\n\t\t\titem = repositoryMarshalTarget.getItem(id);\r\n\t\t\tif (!item)\r\n\t\t\t{\r\n\t\t\t\titem = repository.getItem(id);\r\n\t\t\t\tif (SDL.Client.Types.OO.implementsInterface(item, \"SDL.Client.Models.MarshallableObject\") \u0026\u0026 item.isMarshalling())\r\n\t\t\t\t{\r\n\t\t\t\t\titem = item.getMarshalObject();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn item;\r\n\t};\r\n\r\n\t/*\r\n\t\tCreates a new instance of an object in {SDL.Client.ModelRepository} based on the provided ID, type and constructor arguments.\r\n\t\tPassed \u0027type\u0027 parameter can be a domain model item type or a class name (constructor).\r\n\t\tExamples:\r\n\t\t\tvar item = SDL.Client.Models.createInRepository(url, {SDL.Client.Models.ItemType}.URL_DOCUMENT, url);\r\n\t*/\r\n\tmodels.createInRepository = function SDL$Client$Models$createInRepository(id, type, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)\r\n\t{\r\n\t\tvar repository = SDL.Client.ModelRepository;\r\n\t\tif (repository.isMarshalling())\r\n\t\t{\r\n\t\t\trepository = repository.getMarshalObject();\r\n\t\t}\r\n\r\n\t\tvar item;\r\n\t\tif (!repository.getDisposing() \u0026\u0026 !repository.getDisposed())\r\n\t\t{\r\n\t\t\t// apply() would not work across windows, have to specify the list of arguments explicitly\r\n\t\t\tif (type in this.itemTypes)\r\n\t\t\t{\r\n\t\t\t\t// resolve implementation based on the configuration\r\n\t\t\t\tvar itemTypeData = this.itemTypes[type];\r\n\t\t\t\tif (itemTypeData)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar className = itemTypeData.implementation;\r\n\t\t\t\t\tif (className)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\titem = repository.createItem(id, className, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tSDL.Client.Diagnostics.Assert.raiseError(\"Implementation is not defined for item type \\\"\" + type + \"\\\"\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\titem = repository.createItem(id, type, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn item;\r\n\t};\r\n\r\n\t/*\r\n\t\tRemoves an object with the specified ID from {SDL.Client.ModelRepository}.\r\n\t*/\r\n\tmodels.removeFromRepository = function SDL$Client$Models$removeFromRepository(id)\r\n\t{\r\n\t\tvar repository = SDL.Client.ModelRepository;\r\n\t\trepository.removeItem(id);\r\n\t\tif (repository.isMarshalling())\r\n\t\t{\r\n\t\t\trepository.getMarshalObject().removeItem(id);\r\n\t\t}\r\n\t};\r\n\r\n\t/*\r\n\t\tChanges the ID of an object in {SDL.Client.ModelRepository}.\r\n\t*/\r\n\tmodels.updateItemId = function SDL$Client$Models$updateItemId(oldId, newId)\r\n\t{\r\n\t\tvar item;\r\n\t\tvar repository = SDL.Client.ModelRepository;\r\n\t\tif (repository.isMarshalling())\r\n\t\t{\r\n\t\t\tvar repositoryMarshalTarget = repository.getMarshalObject();\r\n\t\t\titem = repositoryMarshalTarget.getItem(id);\r\n\t\t\tif (item)\r\n\t\t\t{\r\n\t\t\t\trepositoryMarshalTarget.removeItem(oldId);\r\n\t\t\t\trepositoryMarshalTarget.setItem(newId, item);\r\n\t\t\t\trepository.removeItem(oldId);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!item)\r\n\t\t{\r\n\t\t\titem = repository.getItem(oldId);\r\n\t\t\trepository.removeItem(oldId);\r\n\t\t\trepository.setItem(newId, item);\r\n\t\t}\r\n\t};\r\n\r\n\t/*\r\n\t\tReturns an {SDL.Client.MarshallableArray} collection of all registered {SDL.Client.Models.UpdatableListObject} objects.\r\n\t*/\r\n\tmodels.getListsRegistry = function SDL$Client$Models$getListsRegistry()\r\n\t{\r\n\t\tvar lists = (this.getFromRepository(\"models-list-registry\") ||\r\n\t\t\tthis.createInRepository(\"models-list-registry\", \"SDL.Client.Models.MarshallableArray\"));\r\n\t\treturn lists ? lists.getArray() : null;\r\n\t};\r\n\r\n\t/*\r\n\t\tAdds an {SDL.Client.Models.UpdatableListObject} object to the collection of registered lists.\r\n\t*/\r\n\tmodels.registerList = function SDL$Client$Models$registerList(list)\r\n\t{\r\n\t\tvar lists = this.getListsRegistry();\r\n\t\tif (lists \u0026\u0026 SDL.Client.Types.OO.implementsInterface(list, \"SDL.Client.Models.UpdatableListObject\"))\r\n\t\t{\r\n\t\t\tvar listId = list.getId();\r\n\t\t\tvar index = SDL.jQuery.inArray(listId, lists);\r\n\t\t\tif (index != -1)\r\n\t\t\t{\r\n\t\t\t\tSDL.Client.Types.Array.move(lists, index, lists.length - 1);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tlists.push(listId);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/*\r\n\t\tRemoves an {SDL.Client.Models.UpdatableListObject} object from the collection of registered lists.\r\n\t*/\r\n\tmodels.unregisterList = function SDL$Client$Models$unregisterList(list)\r\n\t{\r\n\t\tvar lists = this.getListsRegistry();\r\n\t\tif (lists)\r\n\t\t{\r\n\t\t\tvar index = SDL.jQuery.inArray(list.getId(), lists);\r\n\t\t\tif (index != -1)\r\n\t\t\t{\r\n\t\t\t\tSDL.Client.Types.Array.removeAt(lists, index);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/*\r\n\t\tCalls {SDL.Client.Models.UpdatableListObject}::itemUpdated method for all registered lists.\r\n\t*/\r\n\tmodels.itemUpdated = function SDL$Client$Models$itemUpdated(item, oldId)\r\n\t{\r\n\t\tif (SDL.Client.Types.OO.implementsInterface(item, \"SDL.Client.Models.UpdatableObject\"))\r\n\t\t{\r\n\t\t\tvar lists = this.getListsRegistry();\r\n\t\t\tif (lists)\r\n\t\t\t{\r\n\t\t\t\tlists = SDL.Client.Types.Array.clone(lists);\r\n\t\t\t\tfor (var i = 0, len = lists.length; i \u003c len; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar list = this.getFromRepository(lists[i])\r\n\t\t\t\t\tif (list)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlist.itemUpdated(item, oldId);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/*\r\n\t\tCalls {SDL.Client.Models.UpdatableListObject}::itemRemoved method for all registered lists.\r\n\t*/\r\n\tmodels.itemRemoved = function SDL$Client$Models$itemRemoved(id)\r\n\t{\r\n\t\tvar lists = this.getListsRegistry();\r\n\t\tif (lists)\r\n\t\t{\r\n\t\t\tlists = SDL.Client.Types.Array.clone(lists);\r\n\t\t\tfor (var i = 0, len = lists.length; i \u003c len; i++)\r\n\t\t\t{\r\n\t\t\t\tvar list = this.getItem(lists[i]);\r\n\t\t\t\tif (list)\r\n\t\t\t\t{\r\n\t\t\t\t\tlist.itemRemoved(id);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/*\r\n\t\tCalls {SDL.Client.Models.UpdatableListObject}::updateItemData method for all registered lists.\r\n\t*/\r\n\tmodels.updateItemData = function SDL$Client$Models$updateItemData(item)\r\n\t{\r\n\t\tif (SDL.Client.Types.OO.implementsInterface(item, \"SDL.Client.Models.UpdatableObject\"))\r\n\t\t{\r\n\t\t\tvar lists = this.getListsRegistry();\r\n\t\t\tif (lists \u0026\u0026 lists.length \u003e 0)\r\n\t\t\t{\r\n\t\t\t\tlists = SDL.Client.Types.Array.clone(lists);\r\n\t\t\t\tvar timeStamp = item.getLastUpdateCheckTimeStamp();\r\n\t\t\t\tvar listTimeStamp = 0;\r\n\t\t\t\tfor (var i = 0; i \u003c lists.length; i++)\t//loop from older to newer lists, so most recent values ovewrite obsolete values; lists.length might change during the operation\r\n\t\t\t\t{\r\n\t\t\t\t\tvar list = this.getItem(lists[i]);\r\n\t\t\t\t\tif (list)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlistTimeStamp = list.getTimeStamp();\r\n\t\t\t\t\t\tif (listTimeStamp \u003e timeStamp)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// timeStamp will change here, but it doesn\u0027t matter as the list of lists is ordered by timeStamp\r\n\t\t\t\t\t\t\tlist.updateItemData(item);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (listTimeStamp \u003e timeStamp)\r\n\t\t\t\t{\r\n\t\t\t\t\titem.setLastUpdateCheckTimeStamp(listTimeStamp); //set the time stamp to the last checked list\u0027s time stamp\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/*\r\n\tCalls {SDL.Client.Models.LoadableObject:load} method on the item and executes a callback function when operation is finished.\r\n\tThis is a helper method that should only be called from within a domain model implementation.\r\n\t*/\r\n\tmodels.loadItem = function SDL$Client$Models$loadItem(item, reload, onSuccess, onFailure)\r\n\t{\r\n\t\tif (SDL.Client.Types.OO.implementsInterface(item, \"SDL.Client.Models.LoadableObject\"))\r\n\t\t{\r\n\t\t\tif (!reload \u0026\u0026 item.isLoaded())\r\n\t\t\t{\r\n\t\t\t\tonSuccess();\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tvar loaded = function(event)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar item = event.target;\r\n\t\t\t\t\tSDL.Client.Event.EventRegister.removeEventHandler(item, \"load\", loaded);\r\n\t\t\t\t\tSDL.Client.Event.EventRegister.removeEventHandler(item, \"loadfailed\", loadFailed);\r\n\t\t\t\t\tonSuccess();\r\n\t\t\t\t}\r\n\t\t\t\tvar loadFailed = function(event)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar item = event.target;\r\n\t\t\t\t\tSDL.Client.Event.EventRegister.removeEventHandler(item, \"load\", loaded);\r\n\t\t\t\t\tSDL.Client.Event.EventRegister.removeEventHandler(item, \"loadfailed\", loadFailed);\r\n\t\t\t\t\tonFailure(event.data.error);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tSDL.Client.Event.EventRegister.addEventHandler(item, \"load\", loaded);\r\n\t\t\t\tSDL.Client.Event.EventRegister.addEventHandler(item, \"loadfailed\", loadFailed);\r\n\t\t\t\titem.load();\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tvar discoveryMode = SDL.Client.Configuration.ConfigurationManager.getAppSetting(\"modelRepositoryDiscoveryMode\");\r\n\tvar repositoryId = SDL.Client.Configuration.ConfigurationManager.getAppSetting(\"modelRepositoryId\");\r\n\tSDL.Client.Repository.RepositoryBase.initRepository(discoveryMode, repositoryId);\t// initializes SDL.Client.ModelRepository object\r\n}\r\n)();\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Models/Models.js");
	globalEval(/*FILE-BEGIN*/"/*! @namespace {SDL.Client.Models.ModelFactory} */\r\nSDL.Client.Types.OO.createInterface(\"SDL.Client.Models.ModelFactory\");\r\n\r\n/*\r\n\tDefines interface for a Domain Model Factory. A domain model factory manages\r\n\tobjects that belong to a specific domain model.\r\n\tA domain model factory can be registered with {SDL.Client.Models} models facade.\r\n*/\r\n\r\n\r\n/*\r\n\tReturns the item type of the provided item.\r\n*/\r\nSDL.Client.Models.ModelFactory.prototype.getItemType = function SDL$Client$Models$ModelFactory$getItemType(item)\r\n{\r\n};\r\n\r\n/*\r\n\tReturns an instance of a domain model item with the specified ID.\r\n*/\r\nSDL.Client.Models.ModelFactory.prototype.getItem = function SDL$Client$Models$ModelFactory$getItem(id)\r\n{\r\n\tif (!id)\r\n\t{\r\n\t\treturn null;\r\n\t}\r\n\r\n\tvar item = SDL.Client.Models.getFromRepository(id);\r\n\tif (!item)\r\n\t{\r\n\t\titem = SDL.Client.Models.createInRepository(id, this.getItemType(id), id);\r\n\t}\r\n\r\n\tif (SDL.Client.Types.OO.implementsInterface(item, \"SDL.Client.Models.UpdatableObject\"))\r\n\t{\r\n\t\t//this will initialize the item with static data, if found in any of the loaded lists\r\n\t\tSDL.Client.Models.updateItemData(item);\r\n\t}\r\n\r\n\treturn item;\r\n};\r\n\r\n/*\r\n\tCreates an instance of a new (non-existing) domain model item based on the specified Item Type.\r\n*/\r\nSDL.Client.Models.ModelFactory.prototype.createNewItem = function SDL$Client$Models$ModelFactory$createNewItem(type)\r\n{\r\n};"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Models/ModelFactory.js");
	globalEval(/*FILE-BEGIN*/"/*! @namespace {SDL.Client.Models.Base.ContinuousIterationObject} */\r\nSDL.Client.Types.OO.createInterface(\"SDL.Client.Models.Base.ContinuousIterationObject\");\r\n \r\n/**\r\n * Represents a Continuous Iteration object.\r\n * @namespace {SDL.Client.Models.Base}\r\n * @constructor\r\n * @param {String} parentId The parent item\u0027s Id    \r\n * @event update Fires when object is updated.\r\n * @event error Fires when object update failed.\r\n */\r\nSDL.Client.Models.Base.ContinuousIterationObject.$constructor = function SDL$Client$Models$Base$ContinuousIterationObject$constructor(id)\r\n{\r\n\tthis.addInterface(\"SDL.Client.Models.MarshallableObject\");\r\n\r\n\tvar p = this.properties;\r\n\tp.id = id;\r\n\tp.operationId;\r\n\tp.active;\r\n\tp.toCancel;\r\n\tp.cancelled;\r\n\tp.timeout;\r\n\tp.itemsCount;\r\n\tp.itemsDoneCount;\r\n\tp.errorsCount;\r\n\tp.items;\r\n\tp.operation;\r\n};\r\n\r\n/**\r\n * Return iterations object id.\r\n * @return {String} The iterations object id.\r\n */\r\nSDL.Client.Models.Base.ContinuousIterationObject.prototype.getId = function SDL$Client$Models$Base$ContinuousIterationObject$getId()\r\n{\r\n\treturn this.properties.id;\r\n};\r\n\r\n/**\r\n * Return the total operations count.\r\n * @return {Number} The total number of operations.\r\n */\r\nSDL.Client.Models.Base.ContinuousIterationObject.prototype.getItemsCount = function SDL$Client$Models$Base$ContinuousIterationObject$getItemsCount()\r\n{\r\n\treturn this.properties.itemsCount;\r\n};\r\n\r\n/**\r\n * Return the operations done count.\r\n * @return {Number} The number of done operations.\r\n */\r\nSDL.Client.Models.Base.ContinuousIterationObject.prototype.getItemsDoneCount = function SDL$Client$Models$Base$ContinuousIterationObject$getItemsDoneCount()\r\n{\r\n\treturn this.properties.itemsDoneCount;\r\n};\r\n\r\n/**\r\n * Return the operation errors count.\r\n * @return {Number} The number of errors.\r\n */\r\nSDL.Client.Models.Base.ContinuousIterationObject.prototype.getErrorsCount = function SDL$Client$Models$Base$ContinuousIterationObject$getErrorsCount()\r\n{\r\n\treturn this.properties.errorsCount;\r\n};\r\n\r\n/**\r\n * Return the operation errors.\r\n * @return {Object} The errors list.\r\n */\r\nSDL.Client.Models.Base.ContinuousIterationObject.prototype.getErrorDetails = function SDL$Client$Models$Base$ContinuousIterationObject$getErrorDetails()\r\n{\r\n};\r\n\r\n/**\r\n * Indicates whether the operations is active or now.\r\n * @return {Boolean} \u003cc\u003etrue\u003c/c\u003e if the operation is active, otherwise \u003cc\u003efalse\u003c/c\u003e.\r\n */\r\nSDL.Client.Models.Base.ContinuousIterationObject.prototype.isActive = function SDL$Client$Models$Base$ContinuousIterationObject$isActive()\r\n{\r\n\treturn this.properties.active || false;\r\n};\r\n\r\n/**\r\n * Stops iteration.\r\n */\r\nSDL.Client.Models.Base.ContinuousIterationObject.prototype.stop = function SDL$Client$Models$Base$ContinuousIterationObject$stop()\r\n{\r\n\tvar p = this.properties;\r\n\tif (p.active \u0026\u0026 !p.cancelled)\r\n\t{\r\n\t\tif (p.operationId)\r\n\t\t{\r\n\t\t\tp.cancelled = true;\r\n\t\t\tp.toCancel = false;\r\n\t\t\tthis._executeStopContinuousIteration(p.operationId, this.getDelegate(this._onUpdate), this.getDelegate(this._onError));\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tp.toCancel = true;\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * Queries the iteration state.\r\n * @private\r\n */\r\nSDL.Client.Models.Base.ContinuousIterationObject.prototype._queryState = function SDL$Client$Models$Base$ContinuousIterationObject$_queryState()\r\n{\r\n\tvar p = this.properties;\r\n\tif (p.active)\r\n\t{\r\n\t\tthis._executeQueryContinuousIteration(p.operationId, this.getDelegate(this._onUpdate), this.getDelegate(this._onError));\r\n\t}\r\n};\r\n\r\n/**\r\n * Executes after the Iteration Item was updated.\r\n * @param {Object} result The update result.\r\n * @private\r\n */\r\nSDL.Client.Models.Base.ContinuousIterationObject.prototype._onUpdate = function SDL$Client$Models$Base$ContinuousIterationObject$_onUpdate(result)\r\n{\r\n\tthis.fireEvent(\"update\");\r\n};\r\n\r\n/**\r\n * Executes after this Item has failed iteration.\r\n * @param {Object} error The error.\r\n * @private\r\n */\r\nSDL.Client.Models.Base.ContinuousIterationObject.prototype._onError = function SDL$Client$Models$Base$ContinuousIterationObject$_onError(error)\r\n{\r\n\tvar p = this.properties;\r\n\tp.active = false;\r\n\tSDL.Client.MessageCenter.registerError(error);\r\n\tthis.fireEvent(\"error\", { error: error });\r\n};\r\n\r\n/**\r\n* Server call for stop Iteration item.\r\n* @param {String} id The id of the Item to be loaded.\r\n* @param {Function} success The callback to be caled on load success.\r\n* @param {Function} failure the callback to be called on load failure.\r\n*/\r\nSDL.Client.Models.Base.ContinuousIterationObject.prototype._executeStopContinuousIteration = function SDL$Client$Models$Base$ContinuousIterationObject$_executeStopContinuousIteration(id, success, failure)\r\n{\r\n\tSDL.Client.Diagnostics.Assert.raiseError(\"This method must be implemented in child implementations\");\r\n};\r\n\r\n/**\r\n* Server call for query Iteration item\r\n* @param {String} id The id of the Item to be loaded.\r\n* @param {Function} success The callback to be caled on load success.\r\n* @param {Function} failure the callback to be called on load failure.\r\n*/\r\nSDL.Client.Models.Base.ContinuousIterationObject.prototype._executeQueryContinuousIteration = function SDL$Client$Models$Base$ContinuousIterationObject$_executeQueryContinuousIteration(id, success, failure)\r\n{\r\n\tSDL.Client.Diagnostics.Assert.raiseError(\"This method must be implemented in child implementations\");\r\n};\r\n\r\n// ------- SDL.Client.Models.MarshallableObject implementations/overrides\r\nSDL.Client.Models.Base.ContinuousIterationObject.prototype.pack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$Base$ContinuousIterationObject$pack()\r\n{\r\n\tvar p = this.properties;\r\n\treturn {\r\n\t\toperationId: p.operationId,\r\n\t\tactive: p.active,\r\n\t\tcancelled: p.cancelled,\r\n\t\ttoCancel: p.toCancel,\r\n\t\titems: p.items,\r\n\t\toperation: p.operation\r\n\t};\r\n});\r\n\r\nSDL.Client.Models.Base.ContinuousIterationObject.prototype.unpack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$Base$ContinuousIterationObject$unpack(data)\r\n{\r\n\tif (data)\r\n\t{\r\n\t\tvar p = this.properties;\r\n\t\tp.operationId = data.operationId;\r\n\t\tp.active = data.active;\r\n\t\tp.cancelled = data.cancelled;\r\n\t\tp.toCancel = data.toCancel;\r\n\t\tp.items = SDL.Client.Types.Array.clone(data.items);\r\n\t\tp.operation = data.operation;\r\n\t}\r\n});\r\n// ------- end of SDL.Client.Models.MarshallableObject overrides"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Models/Base/ContinuousIterationObject.js");
	globalEval(/*FILE-BEGIN*/"/*! @namespace {SDL.Client.Models.Base.EditableItem} */\r\nSDL.Client.Types.OO.createInterface(\"SDL.Client.Models.Base.EditableItem\");\r\n\r\n/*\r\n\tBase implementation of editable items (items that can be loaded, changed and saved back).\r\n*/\r\nSDL.Client.Models.Base.EditableItem.$constructor = function SDL$Client$Models$Base$EditableItem$constructor(id)\r\n{\r\n\tthis.addInterface(\"SDL.Client.Models.Base.Item\", [id]);\r\n\r\n\tvar p = this.properties;\r\n\tp.changed;\r\n\tp.saving;\r\n\tp.validationException;\r\n};\r\n\r\nSDL.Client.Models.Base.EditableItem.prototype.invalidateInterfaceCachedState = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$Base$EditableItem$invalidateInterfaceCachedState()\r\n{\r\n\tvar p = this.properties;\r\n\tp.changed = false;\r\n\tp.validationException = undefined;\r\n});\r\n\r\n/*\r\n\tReturns a boolean indicating whether properties of the document can be edited.\r\n*/\r\nSDL.Client.Models.Base.EditableItem.prototype.canEditProperties = function SDL$Client$Models$Base$EditableItem$canEditProperties()\r\n{\r\n\treturn true;\r\n};\r\n\r\n/*\r\n\tSets a flag and triggers an event when the item has changed.\r\n*/\r\nSDL.Client.Models.Base.EditableItem.prototype.setChanged = function SDL$Client$Models$Base$EditableItem$setChanged(changeData)\r\n{\r\n\tvar p = this.properties;\r\n\tthis._removeValidationResult(changeData \u0026\u0026 changeData.property || null);\r\n\tif (!p.changed || changeData)\r\n\t{\r\n\t\tp.changed = true;\r\n\t\tthis.fireEvent(\"change\", changeData);\r\n\t}\r\n};\r\n\r\n/*\r\n\tReturns a boolean indicating whether the document has unsaved changes.\r\n*/\r\nSDL.Client.Models.Base.EditableItem.prototype.isChanged = function SDL$Client$Models$Base$EditableItem$isChanged()\r\n{\r\n\treturn this.properties.changed || false;\r\n};\r\n\r\nSDL.Client.Models.Base.EditableItem.prototype.load = function SDL$Client$Models$Base$EditableItem$load(reload)\r\n{\r\n\tif (reload || !this.isChanged())\r\n\t{\r\n\t\treturn this.callBase(\"SDL.Client.Models.Base.Item\", \"load\", [reload]);\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n};\r\n\r\n/*\r\n\tReturns a boolean indicating whether the document has unsaved changes.\r\n*/\r\nSDL.Client.Models.Base.EditableItem.prototype.setTitle = function SDL$Client$Models$Base$EditableItem$setTitle(value)\r\n{\r\n\tif (this.canEditProperties() \u0026\u0026 this.getTitle() != value)\r\n\t{\r\n\t\tthis.properties.title = value;\r\n\t\tthis.setChanged({ property: \"title\", value: value });\r\n\t}\r\n};\r\n\r\n/*\r\n\tReturns a boolean indicating whether the changes to the current document can be saved.\r\n*/\r\nSDL.Client.Models.Base.EditableItem.prototype.canSave = function SDL$Client$Models$Base$EditableItem$canSave()\r\n{\r\n\treturn this.isChanged();\r\n};\r\n\r\n/*\r\n\tSaves item\u0027s changed data to the server. If the item has not changed then returns false, true otherwise.\r\n\tSave can be cancelled by validate() method if the data is not valid.\r\n\tThe method is asynchronous, it will trigger \"save\" or \"savefailed\" event when the operation completes.\r\n\tIf save is successful it will trigger \"load\" event as well when the operation completes, or \"loadfailed\" otherwise.\r\n*/\r\n\r\nSDL.Client.Models.Base.EditableItem.prototype.save = function SDL$Client$Models$Base$EditableItem$save()\r\n{\r\n\tthis.collectData();\r\n\tif (this.canSave() \u0026\u0026 this.validate())\r\n\t{\r\n\t\tthis._setSaving();\r\n\t\tthis._setLoading();\r\n\t\tthis._executeSave();\r\n\t\treturn true;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n};\r\n\r\n/*\r\n\tFires \u0027collectdata\u0027 event that allows GUI\u0027s to apply their changes to the item and perform validation.\r\n*/\r\nSDL.Client.Models.Base.EditableItem.prototype.collectData = function SDL$Client$Models$Base$EditableItem$collectData()\r\n{\r\n\tthis.fireEvent(\"collectdata\");\r\n};\r\n\r\n/*\r\n\tFires \u0027validate\u0027 event that allows GUI\u0027s to perform validation.\r\n\tThis event can be cancelled, then validate() will return false\r\n*/\r\nSDL.Client.Models.Base.EditableItem.prototype.validate = function SDL$Client$Models$Base$EditableItem$validate()\r\n{\r\n\tvar p = this.properties;\r\n\r\n\tif (p.validationException)\r\n\t{\r\n\t\tthis.fireEvent(\"validatefailed\", p.validationException);\r\n\t\treturn false;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvar e = this.fireEvent(\"validate\", new SDL.Client.Exception.ValidationException());\r\n\t\tif (e \u0026\u0026 e.defaultPrevented)\r\n\t\t{\r\n\t\t\t// validation exception generated by a view is not stored with the item\r\n\t\t\t// and is only availalble as part of \"validatefailed\" event\u0027s data.\r\n\t\t\t// for validation rules that are applicable regardless of views loaded\r\n\t\t\t// validation should be implemented by the item itself by overriding the \u0027validate()\u0027 method\r\n\r\n\t\t\tthis.fireEvent(\"validatefailed\", e.data);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n};\r\n\r\nSDL.Client.Models.Base.EditableItem.prototype._addValidationResult = function SDL$Client$Models$Base$EditableItem$_addValidationResult(property, errorCode, message, description)\r\n{\r\n\tvar validationException = this.properties.validationException;\r\n\tif (!validationException)\r\n\t{\r\n\t\tvalidationException = this.properties.validationException = new SDL.Client.Exception.ValidationException();\r\n\t}\r\n\tvalidationException.addValidationResult(property, errorCode, message, description)\r\n};\r\n\r\nSDL.Client.Models.Base.EditableItem.prototype._removeValidationResult = function SDL$Client$Models$Base$EditableItem$_removeValidationResult(property)\r\n{\r\n\tvar p = this.properties;\r\n\tif (p.validationException)\r\n\t{\r\n\t\tp.validationException.removeValidationResult(property);\r\n\t\tif (!p.validationException.getValidationResults())\r\n\t\t{\r\n\t\t\tp.validationException = null;\r\n\t\t}\r\n\t}\r\n};\r\n\r\nSDL.Client.Models.Base.EditableItem.prototype.getValidationException = function SDL$Client$Models$Base$EditableItem$getValidationException()\r\n{\r\n\treturn this.properties.validationException;\r\n};\r\n\r\n/*\r\n\tReturns a boolean indicating whether the current item is being saved.\r\n*/\r\nSDL.Client.Models.Base.EditableItem.prototype.isSaving = function SDL$Client$Models$Base$EditableItem$isSaving()\r\n{\r\n\treturn this.properties.saving;\r\n};\r\n\r\nSDL.Client.Models.Base.EditableItem.prototype._setSaving = function SDL$Client$Models$Base$EditableItem$_setSaving()\r\n{\r\n\tthis.properties.saving = true;\r\n\tthis.fireEvent(\"saving\");\r\n};\r\n\r\nSDL.Client.Models.Base.EditableItem.prototype._setSaved = function SDL$Client$Models$Base$EditableItem$_setSaved()\r\n{\r\n\tthis.properties.saving = false;\r\n\tthis.fireEvent(\"save\");\r\n};\r\n\r\nSDL.Client.Models.Base.EditableItem.prototype._executeSave = function SDL$Client$Models$Base$EditableItem$_executeSave()\r\n{\r\n\tthis._onLoad();\t// to be overridden\r\n};\r\n\r\nSDL.Client.Models.Base.EditableItem.prototype.afterSetLoaded = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$Base$EditableItem$afterSetLoaded()\r\n{\r\n\tif (this.isSaving())\r\n\t{\r\n\t\tthis._setSaved();\r\n\t}\r\n});\r\n\r\nSDL.Client.Models.Base.EditableItem.prototype.afterLoadFailed = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$Base$EditableItem$afterLoadFailed(error, webRequest)\r\n{\r\n\tif (this.isSaving())\r\n\t{\r\n\t\tthis.properties.saving = false;\r\n\t\tthis.fireEvent(\"savefailed\", {error: error, errorCode: webRequest ? webRequest.statusCode : null});\r\n\t}\r\n});\r\n\r\n// ------- SDL.Client.Models.MarshallableObject implementations/overrides\r\nSDL.Client.Models.Base.EditableItem.prototype.pack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$Base$EditableItem$pack()\r\n{\r\n\tvar p = this.properties;\r\n\treturn {\r\n\t\tsaving: p.saving,\r\n\t\tchanged: p.changed,\r\n\t\tvalidationException: p.validationException\r\n\t};\r\n});\r\n\r\nSDL.Client.Models.Base.EditableItem.prototype.unpack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$Base$EditableItem$unpack(data)\r\n{\r\n\tif (data)\r\n\t{\r\n\t\tvar p = this.properties;\r\n\t\tp.saving = data.saving;\r\n\t\tp.changed = data.changed;\r\n\t\tif (data.validationException)\r\n\t\t{\r\n\t\t\tp.validationException = new SDL.Client.Exception.ValidationException(data.validationException.getValidationResults());\r\n\t\t}\r\n\t}\r\n});\r\n// ------- end of SDL.Client.Models.MarshallableObject overrides\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Models/Base/EditableItem.js");
	globalEval(/*FILE-BEGIN*/"/*! @namespace {SDL.Client.Models.Base.EditableXmlBasedObject} */\r\nSDL.Client.Types.OO.createInterface(\"SDL.Client.Models.Base.EditableXmlBasedObject\");\r\n\r\n/*\r\n\tAdds an ability for an {SDL.Client.XmlBasedObject} to modify its xml data.\r\n*/\r\nSDL.Client.Models.Base.EditableXmlBasedObject.$constructor = function SDL$Client$Models$Base$EditableXmlBasedObject$constructor()\r\n{\r\n\tthis.addInterface(\"SDL.Client.Models.Base.XmlBasedObject\");\r\n\r\n\tvar p = this.properties;\r\n\tp.changeXml;\r\n\tp.changeXmlDocument;\r\n};\r\n\r\n/*\r\n\tSets a changed xml string to the object.\r\n*/\r\nSDL.Client.Models.Base.EditableXmlBasedObject.prototype.setChangeXml = function SDL$Client$Models$Base$EditableXmlBasedObject$setChangeXml(value)\r\n{\r\n\t var p = this.properties;\r\n\t p.changeXml = value;\r\n\t p.changeXmlDocument = undefined;\r\n};\r\n\r\n/*\r\n\tGets a changed xml string from the object.\r\n*/\r\nSDL.Client.Models.Base.EditableXmlBasedObject.prototype.getChangeXml = function SDL$Client$Models$Base$EditableXmlBasedObject$getChangeXml()\r\n{\r\n\tvar p = this.properties;\r\n\tif (p.changeXml === undefined \u0026\u0026 p.changeXmlDocument)\r\n\t{\r\n\t\tp.changeXml = SDL.Client.Xml.getOuterXml(p.changeXmlDocument) || null;\r\n\t}\r\n\treturn p.changeXml;\r\n};\r\n\r\n/*\r\n\tGets a changed xml from the object as an xml document.\r\n*/\r\nSDL.Client.Models.Base.EditableXmlBasedObject.prototype.getChangeXmlDocument = function SDL$Client$Models$Base$EditableXmlBasedObject$getChangeXmlDocument()\r\n{\r\n\tvar p = this.properties;\r\n\tif (!p.changeXmlDocument)\r\n\t{\r\n\t\tvar xml = this.getChangeXml();\r\n\t\tif (xml)\r\n\t\t{\r\n\t\t\tp.changeXmlDocument = SDL.Client.Xml.getNewXmlDocument(xml);\r\n\t\t}\r\n\t}\r\n\treturn this.properties.changeXmlDocument;\r\n};\r\n\r\nSDL.Client.Models.Base.EditableXmlBasedObject.prototype._createChangeXml = function SDL$Client$Models$Base$EditableXmlBasedObject$_createChangeXml()\r\n{\r\n\tvar p = this.properties;\r\n\tif (!this.getChangeXml() \u0026\u0026 this.isLoaded())\r\n\t{\r\n\t\tvar xmlDoc = SDL.Client.Xml.getNewXmlDocument(this.getXml());\r\n\t\tSDL.Client.Xml.setInnerText(xmlDoc.documentElement, \"\");\r\n\t\tp.changeXml = SDL.Client.Xml.getOuterXml(xmlDoc);\r\n\t}\r\n\treturn p.changeXml;\r\n};\r\n\r\nSDL.Client.Models.Base.EditableXmlBasedObject.prototype._ensureXmlElement = function SDL$Client$Models$Base$EditableXmlBasedObject$_ensureXmlElement(xpath, parent)\r\n{\r\n\tthis._createChangeXml();\r\n\tvar xmlDoc = this.getChangeXmlDocument();\r\n\tif (xmlDoc)\r\n\t{\r\n\t\tif (!parent)\r\n\t\t{\r\n\t\t\tparent = xmlDoc.documentElement;\r\n\t\t}\r\n\r\n\t\tvar node;\r\n\t\tif (!xpath)\r\n\t\t{\r\n\t\t\tnode = parent;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tnode = SDL.Client.Xml.selectSingleNode(parent, xpath)\r\n\t\t\tif (!node)\r\n\t\t\t{\r\n\t\t\t\tvar m = xpath.match(/^(.*)\\/([^\\/]+)$/);\r\n\t\t\t\tif (m)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar parentXpath = m[1];\r\n\t\t\t\t\tif (parentXpath)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tparent = this._ensureXmlElement(parentXpath, parent);\r\n\t\t\t\t\t\txpath = m[2];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tm = xpath.match(/^(([^\\:]+)\\:)?([^\\:]+)$/);\r\n\t\t\t\tif (m)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar prefix = m[2];\r\n\t\t\t\t\tvar name = m[3];\r\n\t\t\t\t\tvar ns = prefix ? SDL.Client.Xml.Namespaces[prefix] :\"\";\r\n\r\n\t\t\t\t\tnode = SDL.Client.Xml.createElementNS(xmlDoc, ns, name);\r\n\t\t\t\t\tparent.appendChild(node);\r\n\t\t\t\t\tthis.properties.changeXml = undefined;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn node;\r\n\t}\r\n};\r\n\r\n// ------- SDL.Client.Models.MarshallableObject implementations/overrides\r\nSDL.Client.Models.Base.EditableXmlBasedObject.prototype.pack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$Base$EditableXmlBasedObject$pack()\r\n{\r\n\tvar p = this.properties;\r\n\treturn {\r\n\t\tchangeXml: this.getChangeXml()\r\n\t};\r\n});\r\n\r\nSDL.Client.Models.Base.EditableXmlBasedObject.prototype.unpack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$Base$EditableXmlBasedObject$unpack(data)\r\n{\r\n\tvar p = this.properties;\r\n\tif (data)\r\n\t{\r\n\t\tp.changeXml = data.changeXml;\r\n\t}\r\n});\r\n// ------- end of SDL.Client.Models.MarshallableObject overrides"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Models/Base/EditableXmlBasedObject.js");
	globalEval(/*FILE-BEGIN*/"/*! @namespace {SDL.Client.Models.Base.FilteredNavigationObject} */\r\nSDL.Client.Types.OO.createInterface(\"SDL.Client.Models.Base.FilteredNavigationObject\");\r\n\r\n/*\r\n\tBase implementation of a FilteredNavigationObject used for navigation.\r\n*/\r\nSDL.Client.Models.Base.FilteredNavigationObject.$constructor = function SDL$Client$Models$Base$FilteredNavigationObject$constructor(id, parentId, filter)\r\n{\r\n\tthis.addInterface(\"SDL.Client.Models.IdentifiableObject\", [id]);\r\n\r\n\tvar p = this.properties;\r\n\tp.parentId = parentId;\r\n\tp.filterOptions = filter;\r\n\tp.filter = null;\r\n};\r\n\r\n/*\r\n\tReturns the ID of an {SDL.Client.Models.Base.ListProvider} object that created the current list using {SDL.Client.Models.Base.ListProvider:getList} method.\r\n*/\r\nSDL.Client.Models.Base.FilteredNavigationObject.prototype.getParentId = function SDL$Client$Models$Base$FilteredNavigationObject$getParentId()\r\n{\r\n\treturn this.properties.parentId;\r\n};\r\n\r\n/*\r\n\tReturns an {SDL.Client.Models.Base.ListProvider} object that created the current list using {SDL.Client.Models.Base.ListProvider:getList} method.\r\n*/\r\nSDL.Client.Models.Base.FilteredNavigationObject.prototype.getParent = function SDL$Client$Models$Base$FilteredNavigationObject$getParent()\r\n{\r\n\treturn SDL.Client.Models.getItem(this.getParentId());\r\n};\r\n\r\n/*\r\n\tReturns a value from {SDL.Client.Models.ItemType} enum that is used for creating an {SDL.Client.Models.Base.ListFilter} object\r\n*/\r\nSDL.Client.Models.Base.FilteredNavigationObject.prototype.getListFilterType = function SDL$Client$Models$Base$FilteredNavigationObject$getListFilterType()\r\n{\r\n\treturn \"SDL.Client.Models.Base.ListFilter\";\r\n};\r\n\r\n/*\r\n\tReturns a javascript object that is used for creating an {SDL.Client.Models.Base.ListFilter} object\r\n*/\r\nSDL.Client.Models.Base.FilteredNavigationObject.prototype.getListFilterOptions = function SDL$Client$Models$Base$FilteredNavigationObject$getListFilterOptions()\r\n{\r\n\treturn this.properties.filterOptions;\r\n};\r\n\r\n/*\r\n\tReturns an {SDL.Client.Models.Base.ListFilter} object\r\n*/\r\nSDL.Client.Models.Base.FilteredNavigationObject.prototype.getListFilter = function SDL$Client$Models$Base$FilteredNavigationObject$getListFilter()\r\n{\r\n\tvar p = this.properties;\r\n\tif (!p.filter)\r\n\t{\r\n\t\tvar filterType = SDL.Client.Type.resolveNamespace(this.getListFilterType());\r\n\t\tp.filter = new filterType(p.filterOptions);\r\n\t}\r\n\treturn p.filter;\r\n};\r\n\r\n/*\r\n\tReturns true if the current list object can be used for the specified filter (see {SDL.Client.Models.Base.ListProvider:getList}).\r\n*/\r\nSDL.Client.Models.Base.FilteredNavigationObject.prototype.isFilterApplied = function SDL$Client$Models$Base$FilteredNavigationObject$isFilterApplied(filter)\r\n{\r\n\treturn this.getListFilter().equals(filter);\r\n};\r\n\r\n// ------- SDL.Client.Models.MarshallableObject implementations/overrides\r\nSDL.Client.Models.Base.FilteredNavigationObject.prototype.pack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$Base$FilteredNavigationObject$pack()\r\n{\r\n\tvar p = this.properties;\r\n\treturn {\r\n\t\tparentId: p.parentId,\r\n\t\tfilter: p.filter\r\n\t};\r\n});\r\n\r\nSDL.Client.Models.Base.FilteredNavigationObject.prototype.unpack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$Base$FilteredNavigationObject$unpack(data)\r\n{\r\n\tif (data)\r\n\t{\r\n\t\tvar p = this.properties;\r\n\t\tp.parentId = data.parentId;\r\n\t\tif (data.filter)\r\n\t\t{\r\n\t\t\tp.filter = SDL.Client.Types.OO.importObject(data.filter);\r\n\t\t}\r\n\t}\r\n});\r\n// ------- end of SDL.Client.Models.MarshallableObject overrides\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Models/Base/FilteredNavigationObject.js");
	globalEval(/*FILE-BEGIN*/"/*! @namespace {SDL.Client.Models.Base.Item} */\r\nSDL.Client.Types.OO.createInterface(\"SDL.Client.Models.Base.Item\");\r\n\r\n/*\r\n\tBase implementation for a typical domain model item.\r\n*/\r\nSDL.Client.Models.Base.Item.$constructor = function SDL$Client$Models$Base$Item$constructor(id)\r\n{\r\n\tthis.addInterface(\"SDL.Client.Models.ModelObject\", [id]);\r\n\tthis.addInterface(\"SDL.Client.Models.LoadableObject\");\r\n\r\n\tvar p = this.properties;\r\n\tp.title;\r\n\tp.lastModified;\r\n};\r\n\r\nSDL.Client.Models.Base.Item.prototype.invalidateInterfaceCachedState = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$Base$Item$invalidateInterfaceCachedState()\r\n{\r\n\tvar p = this.properties;\r\n\tp.title = undefined;\r\n});\r\n\r\nSDL.Client.Models.Base.Item.prototype.getTitle = function SDL$Client$Models$Base$Item$getTitle()\r\n{\r\n\treturn this.properties.title;\r\n};\r\n\r\n/*\r\n\tReturns the last modified date of the item, presented as an ISO string.\r\n*/\r\nSDL.Client.Models.Base.Item.prototype.getLastModifiedDateString = function SDL$Client$Models$Base$Item$getLastModifiedDateString()\r\n{\r\n\treturn this.properties.lastModified;\r\n};\r\n\r\n/*\r\n\tReturns the ID of the item as stored in its managing CMS.\r\n\tExample:\r\n\t\tvar id = Cmis.Model.getModelSpecificUri(\"workspace://SpacesStore/2c5de88b-92cb-403c-ab13-43e87f9490b1\",\r\n\t\t\t\"f16674d1-a258-4d64-bafb-55eb44a4d8be\", {SDL.Client.Models.ItemType}.CMIS_DOCUMENT);\r\n\t\tvar item = {SDL.Client.Models}.getItem(id);\r\n\t\titem.getId();\t\t\t//\t\"cmis:document/f16674d1-a258-4d64-bafb-55eb44a4d8be/workspace%3A%2F%2FSpacesStore%2F2c5de88b-92cb-403c-ab13-43e87f9490b1\"\r\n\t\titem.getOriginalId();\t//\t\"workspace://SpacesStore/2c5de88b-92cb-403c-ab13-43e87f9490b1\"\r\n*/\r\nSDL.Client.Models.Base.Item.prototype.getOriginalId = function SDL$Client$Models$Base$Item$getOriginalId()\r\n{\r\n\treturn this.getModelFactory().getOriginalId(this.getId());\r\n};\r\n\r\n// ------- SDL.Client.Models.MarshallableObject implementations/overrides\r\nSDL.Client.Models.Base.Item.prototype.pack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$Base$Item$pack()\r\n{\r\n\tvar p = this.properties;\r\n\treturn {\r\n\t\ttitle: p.title,\r\n\t\tlastModified: p.lastModified\r\n\t};\r\n});\r\n\r\nSDL.Client.Models.Base.Item.prototype.unpack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$Base$Item$unpack(data)\r\n{\r\n\tif (data)\r\n\t{\r\n\t\tvar p = this.properties;\r\n\t\tp.title = data.title;\r\n\t\tp.lastModified = data.lastModified;\r\n\t}\r\n});\r\n// ------- end of SDL.Client.Models.MarshallableObject overrides"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Models/Base/Item.js");
	globalEval(/*FILE-BEGIN*/"/*! @namespace {SDL.Client.Models.Base.List} */\r\nSDL.Client.Types.OO.createInterface(\"SDL.Client.Models.Base.List\");\r\n\r\n/*\r\n\tBase implementation of a List object used for navigating.\r\n*/\r\nSDL.Client.Models.Base.List.$constructor = function SDL$Client$Models$Base$List$constructor(id, parentId, filter)\r\n{\r\n\tthis.addInterface(\"SDL.Client.Models.Base.FilteredNavigationObject\", [id, parentId, filter]);\r\n\tthis.addInterface(\"SDL.Client.Models.UpdatableListObject\", [id]);\r\n\r\n\tvar p = this.properties;\r\n\tp.items;\r\n};\r\n\r\nSDL.Client.Models.Base.List.prototype.invalidateInterfaceCachedState = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$Base$List$invalidateInterfaceCachedState()\r\n{\r\n\tthis.properties.items = undefined;\r\n});\r\n\r\nSDL.Client.Models.Base.List.prototype.isLoaded = function SDL$Client$Models$Base$List$isLoaded(checkCacheValidity)\r\n{\r\n\treturn !!this.getItems(checkCacheValidity);\r\n};\r\n\r\nSDL.Client.Models.Base.List.prototype.getItems = function SDL$Client$Models$Base$List$getItems(onlyValidCache)\r\n{\r\n\treturn (!onlyValidCache || this.isCacheValid()) \u0026\u0026 this.properties.items;\r\n};\r\n\r\nSDL.Client.Models.Base.List.prototype.getItem = function SDL$Client$Models$Base$List$getItem(id)\r\n{\r\n\t// to be overridden\r\n};\r\n\r\n// ------- SDL.Client.Models.MarshallableObject implementations/overrides\r\nSDL.Client.Models.Base.List.prototype.pack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$Base$List$pack()\r\n{\r\n\tvar p = this.properties;\r\n\treturn {\r\n\t\titems: p.items\r\n\t};\r\n});\r\n\r\nSDL.Client.Models.Base.List.prototype.unpack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$Base$List$unpack(data)\r\n{\r\n\tif (data \u0026\u0026 data.items)\r\n\t{\r\n\t\tvar items = this.properties.items = [];\r\n\t\tfor (var i = 0, len = data.items.length; i \u003c len; i++)\r\n\t\t{\r\n\t\t\titems.push(SDL.Client.Types.Object.clone(data.items[i]));\r\n\t\t}\r\n\t}\r\n});\r\n// ------- end of SDL.Client.Models.MarshallableObject overrides\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Models/Base/List.js");
	globalEval(/*FILE-BEGIN*/"/*! @namespace {SDL.Client.Models.Base.ListFilter} */\r\nSDL.Client.Types.OO.createInterface(\"SDL.Client.Models.Base.ListFilter\");\r\n\r\n/*\r\n\tBase implementation of a filter object passed as a parameter to {SDL.Client.Models.Base.ListProvider}::getList() method.\r\n\tListFilter defines the types of items to be returned/shown in a specific list.\r\n*/\r\nSDL.Client.Models.Base.ListFilter.$constructor = function SDL$Client$Models$Base$ListFilter$constructor(properties)\r\n{\r\n\tthis.addInterface(\"SDL.Client.Models.MarshallableObject\");\r\n\r\n\tif (properties)\r\n\t{\r\n\t\tvar p = this.properties;\r\n\r\n\t\tp.forTree = properties.forTree;\r\n\t\tif (properties.itemTypes)\r\n\t\t{\r\n\t\t\tp.itemTypes = SDL.Client.Types.Array.normalize(SDL.Client.Types.Array.clone(properties.itemTypes));\r\n\t\t}\r\n\t\tp.relatedItem = properties.relatedItem;\r\n\t\tp.searchText = properties.searchText;\r\n\t}\r\n};\r\n\r\nSDL.Client.Models.Base.ListFilter.prototype.setForTree = function SDL$Client$Models$Base$ListFilter$setForTree(value)\r\n{\r\n\tthis.properties.forTree = value;\r\n};\r\n\r\nSDL.Client.Models.Base.ListFilter.prototype.getForTree = function SDL$Client$Models$Base$ListFilter$getForTree()\r\n{\r\n\treturn this.properties.forTree || false;\r\n};\r\n\r\nSDL.Client.Models.Base.ListFilter.prototype.setItemTypes = function SDL$Client$Models$Base$ListFilter$setItemTypes(value)\r\n{\r\n\tthis.properties.itemTypes = value ? SDL.Client.Types.Array.normalize(SDL.Client.Types.Array.clone(value)) : undefined;\r\n};\r\n\r\nSDL.Client.Models.Base.ListFilter.prototype.getItemTypes = function SDL$Client$Models$Base$ListFilter$getItemTypes()\r\n{\r\n\treturn this.properties.itemTypes || null;\r\n};\r\n\r\nSDL.Client.Models.Base.ListFilter.prototype.setRelatedItem = function SDL$Client$Models$Base$ListFilter$setRelatedItem(value)\r\n{\r\n\tthis.properties.relatedItem = value;\r\n};\r\n\r\nSDL.Client.Models.Base.ListFilter.prototype.getRelatedItem = function SDL$Client$Models$Base$ListFilter$getRelatedItem()\r\n{\r\n\treturn this.properties.relatedItem || null;\r\n};\r\n\r\nSDL.Client.Models.Base.ListFilter.prototype.setSearchText = function SDL$Client$Models$Base$ListFilter$setSearchText(value)\r\n{\r\n\tthis.properties.searchText = value;\r\n};\r\n\r\nSDL.Client.Models.Base.ListFilter.prototype.getSearchText = function SDL$Client$Models$Base$ListFilter$getSearchText()\r\n{\r\n\treturn this.properties.searchText || null;\r\n};\r\n\r\nSDL.Client.Models.Base.ListFilter.prototype.equals = function SDL$Client$Models$Base$ListFilter$equals(filter)\r\n{\r\n\tif (filter)\r\n\t{\r\n\t\tif (SDL.Client.Types.OO.implementsInterface(filter, \"SDL.Client.Models.Base.ListFilter\"))\r\n\t\t{\r\n\t\t\treturn (this == filter) ||\r\n\t\t\t\t(\r\n\t\t\t\t\tthis.getForTree() == filter.getForTree() \u0026\u0026\r\n\t\t\t\t\tthis.getRelatedItem() == filter.getRelatedItem() \u0026\u0026\r\n\t\t\t\t\tthis.getSearchText() == filter.getSearchText() \u0026\u0026\r\n\t\t\t\t\tSDL.Client.Types.Array.areEqual(this.getItemTypes(), filter.getItemTypes())\r\n\t\t\t\t);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn (this.getForTree() == (filter.forTree || false) \u0026\u0026\r\n\t\t\t\tthis.getRelatedItem() == (filter.relatedItem || null) \u0026\u0026\r\n\t\t\t\tthis.getSearchText() == (filter.searchText || null) \u0026\u0026\r\n\t\t\t\tSDL.Client.Types.Array.areEqual(this.getItemTypes(), filter.itemTypes || null));\r\n\t\t}\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn !this.getForTree() \u0026\u0026 !this.getRelatedItem() \u0026\u0026 !this.getItemTypes();\r\n\t}\r\n};\r\n\r\n// ------- SDL.Client.Models.MarshallableObject implementations/overrides\r\nSDL.Client.Models.Base.ListFilter.prototype.pack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$Base$ListFilter$pack()\r\n{\r\n\tvar p = this.properties;\r\n\treturn {\r\n\t\tforTree: p.forTree,\r\n\t\titemTypes: p.itemTypes,\r\n\t\trelatedItem: p.relatedItem,\r\n\t\tsearchText: p.searchText\r\n\t};\r\n});\r\n\r\nSDL.Client.Models.Base.ListFilter.prototype.unpack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$Base$ListFilter$unpack(data)\r\n{\r\n\tif (data)\r\n\t{\r\n\t\tvar p = this.properties;\r\n\t\tp.forTree = data.forTree;\r\n\t\tif (data.itemTypes)\r\n\t\t{\r\n\t\t\tp.itemTypes = SDL.Client.Types.Array.clone(data.itemTypes);\r\n\t\t}\r\n\t\tp.relatedItem = data.relatedItem;\r\n\t\tp.searchText = data.searchText;\r\n\t}\r\n});\r\n// ------- end of SDL.Client.Models.MarshallableObject overrides"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Models/Base/ListFilter.js");
	globalEval(/*FILE-BEGIN*/"/*! @namespace {SDL.Client.Models.Base.ListProvider} */\r\nSDL.Client.Types.OO.createInterface(\"SDL.Client.Models.Base.ListProvider\");\r\n\r\n/*\r\n\tBase implementation of an object used for navigation\r\n*/\r\nSDL.Client.Models.Base.ListProvider.$constructor = function SDL$Client$Models$Base$ListProvider$constructor(id)\r\n{\r\n\tthis.addInterface(\"SDL.Client.Models.ModelObject\", [id]);\r\n\tvar p = this.properties;\r\n\tp.lists = [];\r\n};\r\n\r\n/*\r\n\tReturns a value from {SDL.Client.Models.ItemType} enum that is used for creating an {SDL.Client.Models.Base.List} object\r\n\treturned by {SDL.Client.Models.Base.ListProvider:getList}.\r\n*/\r\nSDL.Client.Models.Base.ListProvider.prototype.getListType = function SDL$Client$Models$Base$ListProvider$getListType(filter)\r\n{\r\n\treturn \"SDL.Client.Models.Base.List\";\r\n};\r\n\r\nSDL.Client.Models.Base.ListProvider.prototype.getList = function SDL$Client$Models$Base$ListProvider$getList(filter)\r\n{\r\n\tfilter = SDL.Client.Types.Object.clone(filter);\r\n\r\n\tvar p = this.properties;\r\n\r\n\tfor (var i = 0, len = p.lists.length; i \u003c len; i++)\r\n\t{\r\n\t\tvar list = SDL.Client.Models.getFromRepository(p.lists[i]);\r\n\t\tif (list.isFilterApplied(filter))\r\n\t\t{\r\n\t\t\treturn list;\r\n\t\t}\r\n\t}\r\n\r\n\tvar listType = this.getListType(filter);\r\n\tvar id = this.getId();\r\n\tvar model = this.getModelFactory();\r\n\tvar listId = model.getModelSpecificUri(id + \"-\" + SDL.Client.Models.getUniqueId(), model.getListType());\r\n\tp.lists.push(listId);\r\n\treturn SDL.Client.Models.createInRepository(listId, listType, listId, id, filter);\r\n};\r\n\r\n// ------- SDL.Client.Models.MarshallableObject implementations/overrides\r\nSDL.Client.Models.Base.ListProvider.prototype.pack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$Base$ListProvider$pack()\r\n{\r\n\tvar p = this.properties;\r\n\treturn {\r\n\t\tlists: p.lists\r\n\t};\r\n});\r\n\r\nSDL.Client.Models.Base.ListProvider.prototype.unpack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$Base$ListProvider$unpack(data)\r\n{\r\n\tif (data \u0026\u0026 data.lists)\r\n\t{\r\n\t\tvar p = this.properties;\r\n\t\tp.lists = SDL.Client.Types.Array.clone(data.lists);\r\n\t}\r\n});\r\n\r\n// ------- end of SDL.Client.Models.MarshallableObject overrides\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Models/Base/ListProvider.js");
	globalEval(/*FILE-BEGIN*/"/*! @namespace {SDL.Client.Models.Base.ModelFactory} */\r\nSDL.Client.Types.OO.createInterface(\"SDL.Client.Models.Base.ModelFactory\");\r\n\r\n/*\r\n\tImplements a model factory that can be used as a base for other model factories.\r\n*/\r\nSDL.Client.Models.Base.ModelFactory.$constructor = function SDL$Client$Models$Base$ModelFactory$constructor()\r\n{\r\n\tthis.addInterface(\"SDL.Client.Models.ModelFactory\");\r\n\r\n\tvar p = this.properties;\r\n\tp.idMatchRegExp;\r\n\r\n\tp.settings = {\r\n\t\t// prefix used by the current instance of domain model factory\r\n\t\tprefix: undefined\r\n\t};\r\n};\r\n\r\n/*\r\n\tReturns a string used as a prefix for item ID\u0027s managed by the current model factory.\r\n*/\r\nSDL.Client.Models.Base.ModelFactory.prototype.getPrefix = function SDL$Client$Models$Base$ModelFactory$getPrefix()\r\n{\r\n\treturn this.properties.settings.prefix;\r\n};\r\n\r\nSDL.Client.Models.Base.ModelFactory.prototype.getItemType = function SDL$Client$Models$Base$ModelFactory$getItemType(item)\r\n{\r\n\tif (item)\r\n\t{\r\n\t\tif (SDL.Client.Types.OO.implementsInterface(item, \"SDL.Client.Models.IdentifiableObject\"))\r\n\t\t{\r\n\t\t\titem = item.getId();\r\n\t\t}\r\n\r\n\t\tif (SDL.Client.Type.isString(item))\r\n\t\t{\r\n\t\t\tvar m = item.match(this.getIdMatchRegExp());\r\n\t\t\tif (m)\r\n\t\t\t{\r\n\t\t\t\treturn m[1] + m[2];\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\treturn item;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/*\r\n\tReturns the ID of the global root folder {SDL.Client.Models.Base.ModelsBrowser}.\r\n*/\r\nSDL.Client.Models.Base.ModelFactory.prototype.getSystemRootId = function SDL$Client$Models$Base$ModelFactory$getSystemRootId()\r\n{\r\n\treturn null;\r\n};\r\n\r\n/*\r\n\tReturns the title of the root folder of the system represented by the current model factory.\r\n*/\r\nSDL.Client.Models.Base.ModelFactory.prototype.getSystemRootTitle = function SDL$Client$Models$Base$ModelFactory$getSystemRootTitle()\r\n{\r\n\treturn null;\r\n};\r\n\r\n/*\r\n\tReturns the root folder {SDL.Client.Models.Base.ListProvider} of the system represented by the current model factory.\r\n*/\r\nSDL.Client.Models.Base.ModelFactory.prototype.getSystemRoot = function SDL$Client$Models$Base$ModelFactory$getSystemRoot()\r\n{\r\n\tvar id = this.getSystemRootId();\r\n\tif (id)\r\n\t{\r\n\t\treturn this.getItem(id);\r\n\t}\r\n};\r\n\r\n/*\r\n\tReturns true if the provided id is for the specific domain model factory.\r\n\tExample:\r\n\t\tSDL.Client.Models.URL.Model.isModelSpecificUri(\"url:document//schemas/schema.xsd\");\r\n\t\t\t\t// true, ID is using the domain model prefix\r\n\t\tCMIS.Model.isModelSpecificUri(\"url:document//schemas/schema.xsd\");\r\n\t\t\t\t// false, domain model prefix does not match the ID prefix\r\n\t\tSDL.Client.Models.URL.Model.isModelSpecificUri(\"/schemas/schema.xsd\");\r\n\t\t\t\t// false, ID is not using the domain model prefix\r\n*/\r\nSDL.Client.Models.Base.ModelFactory.prototype.isModelSpecificUri = function SDL$Client$Models$Base$ModelFactory$isModelSpecificUri(id)\r\n{\r\n\treturn this.getIdMatchRegExp().test(id);\r\n},\r\n\r\n/*\r\n\tReturns a model specific ID for the id and the item type specified.\r\n\tExample:\r\n\t\tSDL.Client.Models.URL.Model.getModelSpecificUri(\"/schemas/schema.xsd\", {SDL.Client.Models.ItemType}.BASE_URL_DOCUMENT);\r\n\t\t\t\t// returns \"url:document//schemas/schema.xsd\"\r\n*/\r\nSDL.Client.Models.Base.ModelFactory.prototype.getModelSpecificUri = function SDL$Client$Models$Base$ModelFactory$getModelSpecificUri(id, type)\r\n{\r\n\treturn type + \"/\" + this.getOriginalId(id);\r\n};\r\n\r\n/*\r\n\tReturns the original id. Reverse of {SDL.Client.Models.Base.ModelFactory:getModelSpecificUri}.\r\n\tExample:\r\n\t\tSDL.Client.Models.URL.Model.getOriginalId(\"url:document//schemas/schema.xsd\");\r\n\t\t\t\t// returns \"/schemas/schema.xsd\"\r\n*/\r\nSDL.Client.Models.Base.ModelFactory.prototype.getOriginalId = function SDL$Client$Models$Base$ModelFactory$getOriginalId(modelSpecificId)\r\n{\r\n\treturn modelSpecificId.replace(this.getIdMatchRegExp(), \"\");\r\n};\r\n\r\n/*\r\n\tReturns a value from {SDL.Client.Models.ItemType} enum that corresponds to the folder type.\r\n*/\r\nSDL.Client.Models.Base.ModelFactory.prototype.getFolderType = function SDL$Client$Models$Base$ModelFactory$getFolderType()\r\n{\r\n\treturn this.properties.settings.prefix + \"folder\";\r\n};\r\n\r\n/*\r\n\tReturns a value from {SDL.Client.Models.ItemType} enum that corresponds to the document type for documents.\r\n*/\r\nSDL.Client.Models.Base.ModelFactory.prototype.getDocumentType = function SDL$Client$Models$Base$ModelFactory$getDocumentType()\r\n{\r\n\treturn  this.properties.settings.prefix + \"document\";\r\n};\r\n\r\n/*\r\n\tReturns a value from {SDL.Client.Models.ItemType} enum that corresponds to the list type.\r\n*/\r\nSDL.Client.Models.Base.ModelFactory.prototype.getListType = function SDL$Client$Models$Base$ModelFactory$getListType()\r\n{\r\n\treturn  this.properties.settings.prefix + \"list\";\r\n};\r\n\r\n/*\r\n\tReturns a value from {SDL.Client.Models.ItemType} enum that corresponds to the list type.\r\n*/\r\nSDL.Client.Models.Base.ModelFactory.prototype.getTreeType = function SDL$Client$Models$Base$ModelFactory$getTreeType()\r\n{\r\n\treturn  this.properties.settings.prefix + \"tree\";\r\n};\r\n\r\n/*\r\n\tReturns a regular expression that matches ID\u0027s of items managed by the current domain model factory.\r\n*/\r\nSDL.Client.Models.Base.ModelFactory.prototype.getIdMatchRegExp = function SDL$Client$Models$Base$ModelFactory$getIdMatchRegExp()\r\n{\r\n\tvar p = this.properties;\r\n\tif (p.idMatchRegExp === undefined)\r\n\t{\r\n\t\tp.idMatchRegExp = new RegExp(\"^(\" + SDL.Client.Types.RegExp.escape(p.settings.prefix) + \")([^\\\\/]+)(\\\\/?|$)\");\r\n\t}\r\n\treturn p.idMatchRegExp;\r\n};\r\n\r\n/*\r\n\tReturns settings for the current Model Factory.The settings object defines the properties that can be overridden in child classes\r\n*/\r\nSDL.Client.Models.Base.ModelFactory.prototype.getSettings = function SDL$Client$Models$Base$ModelFactory$getSettings()\r\n{\r\n\treturn this.properties.settings;\r\n};"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Models/Base/ModelFactory.js");
	globalEval(/*FILE-BEGIN*/"/*! @namespace {SDL.Client.Models.Base.ObjectWithEditor} */\r\nSDL.Client.Types.OO.createInterface(\"SDL.Client.Models.Base.ObjectWithEditor\");\r\n\r\nSDL.Client.Models.Base.ObjectWithEditor.$constructor = function SDL$Client$Models$Base$ObjectWithEditor$constructor(id)\r\n{\r\n\tthis.addInterface(\"SDL.Client.Models.MarshallableObject\");\r\n\tthis.properties.display;\r\n};\r\n\r\nSDL.Client.Models.Base.ObjectWithEditor.prototype.openInEditor = function SDL$Client$Models$Base$ObjectWithEditor$openInEditor(url, optWindow, params, features)\r\n{\r\n\tvar display = this.getEditor();\r\n\tvar hasPopupBlocker = false;\r\n\tif (!display)\r\n\t{\r\n\t\t// fix for gecko to be able to open the popup, otherwise firefox won\u0027t open it :(\r\n\t\tvar prefix = \"\";\r\n\t\tif (SDL.jQuery.browser.mozilla)\r\n\t\t{\r\n\t\t\tvar loc = window.location;\r\n\t\t\tprefix = loc.protocol + \"//\" + loc.hostname + ((loc.port == 80) ? \"\" : (\":\" + loc.port));\r\n\t\t}\r\n\r\n\t\tthis.properties.display = display = optWindow ||\r\n\t\t\t(\r\n\t\t\t\tfeatures\r\n\t\t\t\t\t? window.open(prefix + this.expandEditorUrl(url, params), \"\", features)\r\n\t\t\t\t\t: window.open(prefix + this.expandEditorUrl(url, params))\r\n\t\t\t);\r\n\t\t\r\n\t\tif (!display)\r\n\t\t{\r\n\t\t\tthis.fireEvent(\"editoropenfailed\");\r\n\t\t} \r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.fireEvent(\"editoropen\");\r\n\t\t}\r\n\t}\r\n\telse if (display != optWindow)\r\n\t{\r\n\t\tsetTimeout(this.getDelegate(this.forceFocusToEditor), 0);\r\n\t}\r\n\r\n\tif (display)\r\n\t{\r\n\t\tdisplay.focus();\r\n\t}\r\n\r\n\treturn display;\r\n};\r\n\r\nSDL.Client.Models.Base.ObjectWithEditor.prototype.forceFocusToEditor = function SDL$Client$Models$Base$ObjectWithEditor$forceFocusToEditor()\r\n{\r\n\tvar display = this.getEditor();\r\n\tif (display)\r\n\t{\r\n\t\tdisplay.alert(this.getMessageAlreadyOpen());\r\n\t}\r\n};\r\n\r\nSDL.Client.Models.Base.ObjectWithEditor.prototype.getMessageItemAlreadyOpen = function SDL$Client$Models$Base$ObjectWithEditor$getMessageItemAlreadyOpen()\r\n{\r\n\treturn \"Item is already open.\";\r\n};\r\n\r\nSDL.Client.Models.Base.ObjectWithEditor.prototype.closeEditor = function SDL$Client$Models$Base$ObjectWithEditor$closeEditor()\r\n{\r\n\tvar display = this.getEditor();\r\n\tif (display)\r\n\t{\r\n\t\tdisplay.close();\r\n\t}\r\n\treturn display;\r\n};\r\n\r\n/*\r\n\tItem editor implementation should call item.onEditorUnload when the editor window gets closed\r\n*/\r\nSDL.Client.Models.Base.ObjectWithEditor.prototype.onEditorUnload = function SDL$Client$Models$Base$ObjectWithEditor$onEditorUnload()\r\n{\r\n\tthis.properties.display = undefined;\r\n\tthis.fireEvent(\"editorclose\");\r\n};\r\n\r\nSDL.Client.Models.Base.ObjectWithEditor.prototype.getEditor = function SDL$Client$Models$Base$ObjectWithEditor$getEditor()\r\n{\r\n\tvar display = this.properties.display;\r\n\tif (display \u0026\u0026 !display.closed)\r\n\t{\r\n\t\ttry\r\n\t\t{\r\n\t\t\t//if (!!(display.SDL))\t// \u003c- commented out because it causes a memory leak in IE\r\n\t\t\t{\r\n\t\t\t\treturn display;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (err)\r\n\t\t{\r\n\t\t\t// the window appears to have been reloaded, can\u0027t access\r\n\t\t}\r\n\t}\r\n};\r\n\r\nSDL.Client.Models.Base.ObjectWithEditor.prototype.expandEditorUrl = function SDL$Client$Models$Base$ObjectWithEditor$expandEditorUrl(url, params)\r\n{\r\n\tSDL.Client.Diagnostics.Assert.raiseError(\"Editor URL is undefined for this item.\");\r\n};\r\n\r\nSDL.Client.Models.Base.ObjectWithEditor.prototype.getShortcutUrl = function SDL$Client$Models$Base$ObjectWithEditor$getShortcutUrl(url)\r\n{\r\n\tSDL.Client.Diagnostics.Assert.raiseError(\"Shortcut URL is undefined for this item.\");\r\n};\r\n\r\n// ------- SDL.Client.Models.MarshallableObject implementations/overrides\r\nSDL.Client.Models.Base.ObjectWithEditor.prototype.pack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$Base$ObjectWithEditor$pack()\r\n{\r\n\tvar display = this.getEditor();\r\n\treturn !display || ((display == window) \u0026\u0026 SDL.Client.Event.EventRegister.isUnloading()) ? null : {\"display\": display};\r\n});\r\n\r\nSDL.Client.Models.Base.ObjectWithEditor.prototype.unpack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$Base$ObjectWithEditor$unpack(data)\r\n{\r\n\tif (data)\r\n\t{\r\n\t\tthis.properties.display = data.display;\r\n\t}\r\n});\r\n\r\n// ------- end of SDL.Client.Models.MarshallableObject overrides\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Models/Base/ObjectWithEditor.js");
	globalEval(/*FILE-BEGIN*/"/*! @namespace {SDL.Client.Models.Base.TreeProvider} */\r\nSDL.Client.Types.OO.createInterface(\"SDL.Client.Models.Base.TreeProvider\");\r\n\r\n/*\r\n\tBase implementation of an object used for tree navigation\r\n*/\r\nSDL.Client.Models.Base.TreeProvider.$constructor = function SDL$Client$Models$Base$TreeProvider$constructor(id)\r\n{\r\n\tthis.addInterface(\"SDL.Client.Models.Base.ListProvider\", [id]);\r\n\tvar p = this.properties;\r\n\tp.trees = [];\r\n};\r\n\r\n/*\r\n\tReturns a value from {SDL.Client.Models.ItemType} enum that is used for creating an {SDL.Client.Models.Base.Tree} object\r\n\treturned by {SDL.Client.Models.Base.TreeProvider:getTree}.\r\n*/\r\nSDL.Client.Models.Base.TreeProvider.prototype.getTreeType = function SDL$Client$Models$Base$TreeProvider$getTreeType(filter)\r\n{\r\n\treturn \"SDL.Client.Models.Base.Tree\";\r\n};\r\n\r\nSDL.Client.Models.Base.TreeProvider.prototype.getTree = function SDL$Client$Models$Base$TreeProvider$getTree(filter)\r\n{\r\n\tfilter = SDL.Client.Types.Object.clone(filter);\r\n\r\n\tvar p = this.properties;\r\n\r\n\tfor (var i = 0, len = p.trees.length; i \u003c len; i++)\r\n\t{\r\n\t\tvar tree = SDL.Client.Models.getFromRepository(p.trees[i]);\r\n\t\tif (tree.isFilterApplied(filter))\r\n\t\t{\r\n\t\t\treturn tree;\r\n\t\t}\r\n\t}\r\n\r\n\tvar treeType = this.getTreeType(filter);\r\n\tvar id = this.getId();\r\n\tvar model = this.getModelFactory();\r\n\tvar treeId = model.getModelSpecificUri(id + \"-\" + SDL.Client.Models.getUniqueId(), model.getTreeType());\r\n\tp.trees.push(treeId);\r\n\treturn SDL.Client.Models.createInRepository(treeId, treeType, treeId, id, filter);\r\n};\r\n\r\n// ------- SDL.Client.Models.MarshallableObject implementations/overrides\r\nSDL.Client.Models.Base.TreeProvider.prototype.pack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$Base$TreeProvider$pack()\r\n{\r\n\tvar p = this.properties;\r\n\treturn {\r\n\t\ttrees: p.trees\r\n\t};\r\n});\r\n\r\nSDL.Client.Models.Base.TreeProvider.prototype.unpack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$Base$TreeProvider$unpack(data)\r\n{\r\n\tif (data \u0026\u0026 data.trees)\r\n\t{\r\n\t\tvar p = this.properties;\r\n\t\tp.trees = SDL.Client.Types.Array.clone(data.trees);\r\n\t}\r\n});\r\n\r\n// ------- end of SDL.Client.Models.MarshallableObject overrides\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Models/Base/TreeProvider.js");
	globalEval(/*FILE-BEGIN*/"/*! @namespace {SDL.Client.Models.Base.Tree} */\r\nSDL.Client.Types.OO.createInterface(\"SDL.Client.Models.Base.Tree\");\r\n\r\nSDL.Client.Models.Base.Tree.$constructor = function SDL$Client$Models$Base$Tree$constructor(id, parentId, filter)\r\n{\r\n\tthis.addInterface(\"SDL.Client.Models.Base.FilteredNavigationObject\", [id, parentId, filter]);\r\n\r\n\tvar p = this.properties;\r\n\r\n\tvar item = SDL.Client.Models.getItem(parentId);\r\n\tif (SDL.Client.Types.OO.implementsInterface(item, \"SDL.Client.Models.Base.Item\"))\r\n\t{\r\n\t\tSDL.Client.Event.EventRegister.addEventHandler(item, \"staticload\", this.getDelegate(this.processItemUpdated));\r\n\t}\r\n\t\r\n\tp.lists = {};\t\t// ListProvider id -\u003e list id\r\n\tp.paths = {};\t\t// child -\u003e parent relationships\r\n\tp.searching = {};\r\n\tp.loadingTrees = {};\r\n};\r\n\r\nSDL.Client.Models.Base.Tree.prototype.getListIdForItem = function SDL$Client$Models$Base$Tree$getListIdForItem(item)\r\n{\r\n\tif (SDL.Client.Types.OO.implementsInterface(item, \"SDL.Client.Models.IdentifiableObject\"))\r\n\t{\r\n\t\treturn this.properties.lists[item.getId()];\r\n\t}\r\n};\r\n\r\nSDL.Client.Models.Base.Tree.prototype.getList = function SDL$Client$Models$Base$Tree$getList(item)\r\n{\r\n\tvar listId = this.tryGetListById(item) || this.addList(item);\r\n\treturn listId ? SDL.Client.Models.getItem(listId) : null;\r\n};\r\n\r\nSDL.Client.Models.Base.Tree.prototype.addList = function SDL$Client$Models$Base$Tree$addList(item, list)\r\n{\r\n\tvar p = this.properties;\r\n\tvar itemId;\r\n\r\n\tif (SDL.Client.Type.isString(item))\r\n\t{\r\n\t\titemId = item;\r\n\t\titem = SDL.Client.Models.getItem(itemId);\r\n\t}\r\n\r\n\tif (!list)\r\n\t{\r\n\t\tif (SDL.Client.Types.OO.implementsInterface(item, \"SDL.Client.Models.Base.ListProvider\"))\r\n\t\t{\r\n\t\t\tlist = item.getList(this.getListFilterOptions());\r\n\t\t}\r\n\t}\r\n\telse if (SDL.Client.Type.isString(list))\r\n\t{\r\n\t\tlist = SDL.Client.Models.getItem(list);\r\n\t}\r\n\t\r\n\tif (SDL.Client.Types.OO.implementsInterface(list, \"SDL.Client.Models.Base.List\"))\r\n\t{\r\n\t\tif (!itemId \u0026\u0026 SDL.Client.Types.OO.implementsInterface(item, \"SDL.Client.Models.IdentifiableObject\"))\r\n\t\t{\r\n\t\t\titemId = item.getId();\r\n\t\t}\r\n\r\n\t\tvar listId = p.lists[itemId] = list.getId();\r\n\r\n\t\tSDL.Client.Event.EventRegister.addEventHandler(item, \"delete\", this.getDelegate(this.processItemDeleted));\r\n\t\tSDL.Client.Event.EventRegister.addEventHandler(list, \"*\", this.getDelegate(this.listEventHandler));\r\n\t\treturn listId;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn null;\r\n\t}\r\n};\r\n\r\nSDL.Client.Models.Base.Tree.prototype.removeList = function SDL$Client$Models$Base$Tree$removeList(item)\r\n{\r\n\tvar itemId;\r\n\tif (SDL.Client.Types.OO.implementsInterface(item, \"SDL.Client.Models.IdentifiableObject\"))\r\n\t{\r\n\t\titemId = item.getId();\r\n\t}\r\n\r\n\tvar lists = this.properties.lists;\r\n\tvar list = SDL.Client.Models.getItem(lists[itemId]);\r\n\tif (list)\r\n\t{\r\n\t\tif (SDL.Client.Type.isString(item))\r\n\t\t{\r\n\t\t\titem = SDL.Client.Models.getItem(item);\r\n\t\t}\r\n\t\tSDL.Client.Event.EventRegister.removeEventHandler(item, \"delete\", this.getDelegate(this.processItemDeleted));\r\n\t\tSDL.Client.Event.EventRegister.removeEventHandler(list, \"*\", this.getDelegate(this.listEventHandler));\r\n\r\n\t\tdelete lists[itemId];\r\n\t}\r\n\treturn list;\r\n};\r\n\r\nSDL.Client.Models.Base.Tree.prototype.processItemUpdated = function SDL$Client$Models$Base$Tree$processItemUpdated(event)\r\n{\r\n\tthis.fireEvent(\"itemupdate\", {itemId: event.target.getId()});\r\n};\r\n\r\nSDL.Client.Models.Base.Tree.prototype.listEventHandler = function SDL$Client$Models$Base$Tree$listEventHandler(event)\r\n{\r\n\tswitch (event.type)\r\n\t{\r\n\t\tcase \"load\":\r\n\t\t\tthis.processListLoaded(event);\r\n\t\t\tbreak;\r\n\t\tcase \"loadfailed\":\r\n\t\t\tthis.processListLoaded(event);\r\n\t\t\tbreak;\r\n\t\tcase \"unload\":\r\n\t\t\tthis.fireEvent(\"unload\", {id: SDL.Client.Types.Object.find(this.properties.lists, event.target.getId())});\r\n\t\t\tbreak;\r\n\t\tcase \"dispose\":\r\n\t\t\tthis.removeList(event.target.getParentId());\r\n\t\t\tbreak;\r\n\t\tcase \"itemadd\":\r\n\t\tcase \"itemupdate\":\r\n\t\tcase \"itemremove\":\r\n\t\t\tthis.fireEvent(event.type, {id: SDL.Client.Types.Object.find(this.properties.lists, event.target.getId()), itemId: event.data.itemId});\r\n\t\t\tbreak;\r\n\t}\r\n}\r\n\r\n/*\r\n\tReturns an \u0027array of arrays\u0027 - hierarchical structure of the tree, built from the lists included in the tree\r\n*/\r\nSDL.Client.Models.Base.Tree.prototype.getItems = function SDL$Client$Models$Base$Tree$getItems(item, toIds, onlyValidCache)\r\n{\r\n\tvar p = this.properties;\r\n\tvar itemId;\r\n\tif (!item)\r\n\t{\r\n\t\titemId = p.parentId;\r\n\t\titem = SDL.Client.Models.getItem(p.parentId);\r\n\t}\r\n\telse if (SDL.Client.Type.isString(item))\r\n\t{\r\n\t\titemId = item;\r\n\t\titem = SDL.Client.Models.getItem(itemId);\r\n\t}\r\n\telse if (SDL.Client.Types.OO.implementsInterface(item, \"SDL.Client.Models.IdentifiableObject\"))\r\n\t{\r\n\t\titemId = item.getId();\r\n\t}\r\n\r\n\tvar listRootEntry = {item: item, id: itemId};\r\n\r\n\tif (item)\r\n\t{\r\n\t\tvar list = this.getList(item);\r\n\t\tif (list)\r\n\t\t{\r\n\t\t\tlistRootEntry.canHaveChildren = true;\r\n\r\n\t\t\tvar items = list.getItems(onlyValidCache);\r\n\t\t\tif (items)\r\n\t\t\t{\r\n\t\t\t\t// list loaded\r\n\t\t\t\tlistRootEntry.items = SDL.jQuery.map(items, function (item) { return SDL.Client.Types.Object.clone(item); });\r\n\r\n\t\t\t\tif (toIds \u0026\u0026 toIds.length)\r\n\t\t\t\t{\r\n\t\t\t\t\tfor (var i = 0, len = toIds.length; i \u003c len; i++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar path = this.getPath(toIds[i], itemId);\r\n\t\t\t\t\t\tif (path \u0026\u0026 path.length \u003e 1 \u0026\u0026 path[0] == itemId)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar parentList = listRootEntry.items;\r\n\t\t\t\t\t\t\tfor (var j = 1, lenj = path.length - 1; j \u003c lenj \u0026\u0026 parentList; j++)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tvar id = path[j];\r\n\t\t\t\t\t\t\t\tvar child;\r\n\t\t\t\t\t\t\t\tfor (var k = 0, lenk = parentList.length; k \u003c lenk; k++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif (parentList[k].id == id)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tchild = parentList[k];\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (child)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif (child.canHaveChildren == undefined)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t// child\u0027s list is not \u0027loaded\u0027\r\n\t\t\t\t\t\t\t\t\t\tlist = this.getList(id);\r\n\t\t\t\t\t\t\t\t\t\tif (list)\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tchild.canHaveChildren = true;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\titems = list.getItems(onlyValidCache);\r\n\t\t\t\t\t\t\t\t\t\t\tif (items)\r\n\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\tchild.items = SDL.jQuery.map(items, function (item) { return SDL.Client.Types.Object.clone(item); });\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tchild.canHaveChildren = false;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tparentList = child.items;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t// the ancestor is not in the available structure -\u003e cannot expand to the item\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tlistRootEntry.canHaveChildren = false;\r\n\t\t}\r\n\t}\r\n\treturn listRootEntry;\r\n};\r\n\r\nSDL.Client.Models.Base.Tree.prototype.isLoaded = function SDL$Client$Models$Base$Tree$isLoaded(item, toIds, checkCacheValidity)\r\n{\r\n\tvar p = this.properties;\r\n\tvar itemId;\r\n\tif (!item)\r\n\t{\r\n\t\titemId = p.parentId;\r\n\t\titem = SDL.Client.Models.getItem(p.parentId);\r\n\t}\r\n\telse if (SDL.Client.Type.isString(item))\r\n\t{\r\n\t\titemId = item;\r\n\t\titem = SDL.Client.Models.getItem(itemId);\r\n\t}\r\n\telse if (SDL.Client.Types.OO.implementsInterface(item, \"SDL.Client.Models.IdentifiableObject\"))\r\n\t{\r\n\t\titemId = item.getId();\r\n\t}\r\n\r\n\tvar list = this.getList(item);\r\n\tif (list)\r\n\t{\r\n\t\tvar items = list.getItems(onlyValidCache);\r\n\t\tif (!items)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (toIds \u0026\u0026 toIds.length)\r\n\t\t{\r\n\t\t\tfor (var i = 0, len = toIds.length; i \u003c len; i++)\r\n\t\t\t{\r\n\t\t\t\tvar path = this.getPath(toIds[i], itemId);\r\n\t\t\t\tif (!path)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (path \u0026\u0026 path.length \u003e 1 \u0026\u0026 path[0] == itemId)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar parentList = items;\r\n\t\t\t\t\tfor (var j = 1, lenj = path.length - 1; j \u003c lenj \u0026\u0026 parentList; j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar id = path[j];\r\n\t\t\t\t\t\tvar child;\r\n\t\t\t\t\t\tfor (var k = 0, lenk = parentList.length; k \u003c lenk; k++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif (parentList[k].id == id)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tchild = parentList[k];\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tparentList = null;\r\n\r\n\t\t\t\t\t\tif (child)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlist = this.getList(id);\r\n\t\t\t\t\t\t\tif (list)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tparentList = list.getItems(onlyValidCache);\r\n\t\t\t\t\t\t\t\tif (!parentList)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn true;\r\n};\r\n\r\nSDL.Client.Models.Base.Tree.prototype.invalidateCache = function SDL$Client$Models$Base$Tree$invalidateCache()\r\n{\r\n\tvar lists = this.properties.lists;\r\n\tfor (var id in lists)\r\n\t{\r\n\t\tvar list = SDL.Client.Models.getItem(lists[id]);\r\n\t\tif (list)\r\n\t\t{\r\n\t\t\tlist.invalidateCache();\r\n\t\t}\r\n\t}\r\n};\r\n\r\nSDL.Client.Models.Base.Tree.prototype.unload = function SDL$Client$Models$Base$Tree$unload(item)\r\n{\r\n\tvar itemId;\r\n\tif (!item)\r\n\t{\r\n\t\titemId = p.parentId;\r\n\t}\r\n\telse if (SDL.Client.Type.isString(item))\r\n\t{\r\n\t\titemId = item;\r\n\t\titem = SDL.Client.Models.getItem(itemId);\r\n\t}\r\n\telse if (SDL.Client.Types.OO.implementsInterface(item, \"SDL.Client.Models.IdentifiableObject\"))\r\n\t{\r\n\t\titemId = item.getId();\r\n\t}\r\n\r\n\tthis._unload(item);\r\n\tthis.fireEvent(\"unload\", {id: itemId, deep: true});\r\n};\r\n\r\nSDL.Client.Models.Base.Tree.prototype._unload = function SDL$Client$Models$Base$Tree$_unload(item)\r\n{\r\n\tvar list = this.removeList(item);\r\n\t\r\n\tvar paths = this.properties.paths;\r\n\tvar children = [];\r\n\r\n\t// collect all known child nodes\r\n\tfor (var id in paths)\r\n\t{\r\n\t\tif (paths[id] == item)\r\n\t\t{\r\n\t\t\tchildren.push(id);\r\n\t\t}\r\n\t}\r\n\r\n\t// remove child-\u003eparent information\r\n\tvar i;\r\n\tvar len = children.length;\r\n\tfor (i = 0; i \u003c len; i++)\r\n\t{\r\n\t\tvar child = children[i];\r\n\t\tdelete paths[child];\r\n\t}\r\n\r\n\t// unload the current list\r\n\tif (list)\r\n\t{\r\n\t\tlist.unload();\r\n\t}\r\n\t\r\n\t//unload all cached sub nodes\r\n\tfor (i = 0; i \u003c len; i++)\r\n\t{\r\n\t\tthis._unload(children[i]);\r\n\t}\r\n};\r\n\r\nSDL.Client.Models.Base.Tree.prototype.load = function SDL$Client$Models$Base$Tree$load(item, toIds, refresh)\r\n{\r\n\tif (refresh || !this.isLoaded(item, toIds, true))\r\n\t{\r\n\t\tvar p = this.properties;\r\n\r\n\t\tvar itemId;\r\n\t\tif (!item)\r\n\t\t{\r\n\t\t\titemId = p.parentId;\r\n\t\t}\r\n\t\telse if (SDL.Client.Type.isString(item))\r\n\t\t{\r\n\t\t\titemId = item;\r\n\t\t\titem = SDL.Client.Models.getItem(itemId);\r\n\t\t}\r\n\t\telse if (SDL.Client.Types.OO.implementsInterface(item, \"SDL.Client.Models.IdentifiableObject\"))\r\n\t\t{\r\n\t\t\titemId = item.getId();\r\n\t\t}\r\n\r\n\t\tvar loadingTree = p.loadingTrees[itemId];\r\n\r\n\t\tif (toIds \u0026\u0026 toIds.length \u003e 0)\r\n\t\t{\r\n\t\t\tvar i, len;\r\n\r\n\t\t\tif (!loadingTree)\r\n\t\t\t{\r\n\t\t\t\tloadingTree = p.loadingTrees[itemId] = {refresh: refresh};\r\n\t\t\t}\r\n\t\t\telse if (!loadingTree.refresh \u0026\u0026 refresh)\r\n\t\t\t{\r\n\t\t\t\tloadingTree.refresh = true;\r\n\t\t\t}\r\n\r\n\t\t\tif (!SDL.jQuery.isEmptyObject(loadingTree.toIds))\r\n\t\t\t{\r\n\t\t\t\tvar localToIds = [];\r\n\t\t\t\tfor (i = 0, len = toIds.length; i \u003c len; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar toId = toIds[i];\r\n\t\t\t\t\tif (!(toId in loadingTree.toIds))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tloadingTree.toIds[toId] = false;\r\n\t\t\t\t\t\tlocalToIds.push(toId);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor (i = 0, len = localToIds.length; i \u003c len; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.findItem(localToIds[i], refresh);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tloadingTree.toIds = {};\r\n\t\t\t\tlen = toIds.length;\r\n\r\n\t\t\t\tfor (i = 0; i \u003c len; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tloadingTree.toIds[toIds[i]] = false;\r\n\t\t\t\t}\r\n\t\t\t\tfor (i = 0; i \u003c len; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.findItem(toIds[i], refresh);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (!loadingTree)\r\n\t\t{\r\n\t\t\tp.loadingTrees[itemId] = {refresh: refresh};\r\n\t\t\tthis.loadLists(itemId);\r\n\t\t}\r\n\t}\r\n};\r\n\r\nSDL.Client.Models.Base.Tree.prototype.processFindItem = function SDL$Client$Models$Base$Tree$processFindItem(id)\r\n{\r\n\tvar loadingTrees = this.properties.loadingTrees;\r\n\tfor (var itemId in loadingTrees)\r\n\t{\r\n\t\tvar toIds = loadingTrees[itemId].toIds;\r\n\t\tif (toIds \u0026\u0026 toIds[id] === false)\r\n\t\t{\r\n\t\t\ttoIds[id] = true;\r\n\t\t\tfor (var i in toIds)\r\n\t\t\t{\r\n\t\t\t\tif (toIds[i] === false)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// when all items are found -\u003e load all needed lists for the item\r\n\t\t\tthis.loadLists(itemId);\r\n\t\t}\r\n\t}\r\n};\r\n\r\nSDL.Client.Models.Base.Tree.prototype.loadLists = function SDL$Client$Models$Base$Tree$loadLists(item)\r\n{\r\n\tvar itemId;\r\n\tif (SDL.Client.Type.isString(item))\r\n\t{\r\n\t\titemId = item;\r\n\t\titem = SDL.Client.Models.getItem(itemId);\r\n\t}\r\n\telse if (SDL.Client.Types.OO.implementsInterface(item, \"SDL.Client.Models.IdentifiableObject\"))\r\n\t{\r\n\t\titemId = item.getId();\r\n\t}\r\n\r\n\tvar loadingTree = this.properties.loadingTrees[itemId];\r\n\tvar lists = loadingTree.lists;\r\n\tif (!lists)\r\n\t{\r\n\t\tlists = loadingTree.lists = {};\r\n\t}\r\n\r\n\tvar list = this.getList(item);\r\n\tvar listId = list.getId();\r\n\r\n\tif (loadingTree.refresh || !list.isLoaded(true))\r\n\t{\r\n\t\tlists[listId] = false;\r\n\t\tlist.load(loadingTree.refresh);\r\n\t}\r\n\r\n\tvar toIds = loadingTree.toIds;\r\n\tif (toIds)\r\n\t{\r\n\t\tfor (var id in toIds)\r\n\t\t{\r\n\t\t\tvar path = this.getPath(id, item);\r\n\t\t\tif (path \u0026\u0026 path.length \u003e 1 \u0026\u0026 path[0] == itemId)\r\n\t\t\t{\r\n\t\t\t\tfor (var j = 1, lenj = path.length - 1; j \u003c lenj; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tlist = this.getList(path[j]);\r\n\t\t\t\t\tlistId = list.getId();\r\n\t\t\t\t\tif (!(listId in lists) \u0026\u0026 (loadingTree.refresh || !list.isLoaded(true)))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlists[listId] = false;\r\n\t\t\t\t\t\tlist.load(loadingTree.refresh);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tthis.processTreeLoaded(itemId);\t// see if everything is loaded\r\n};\r\n\r\nSDL.Client.Models.Base.Tree.prototype.processTreeLoaded = function SDL$Client$Models$Base$Tree$processTreeLoaded(item)\r\n{\r\n\tvar itemId;\r\n\tif (SDL.Client.Type.isString(item))\r\n\t{\r\n\t\titemId = item;\r\n\t}\r\n\telse if (SDL.Client.Types.OO.implementsInterface(item, \"SDL.Client.Models.IdentifiableObject\"))\r\n\t{\r\n\t\titemId = item.getId();\r\n\t}\r\n\r\n\tvar loadingTrees = this.properties.loadingTrees;\r\n\tvar loadingTree = loadingTrees[itemId];\r\n\tvar lists = loadingTree.lists;\r\n\tfor (var list in lists)\r\n\t{\r\n\t\tif (!lists[list])\r\n\t\t{\r\n\t\t\t// not everything is loaded yet\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\r\n\tvar toIds = loadingTree.toIds;\r\n\tfor (var id in toIds)\r\n\t{\r\n\t\tif (!toIds[id])\r\n\t\t{\r\n\t\t\t// not all paths are resolved yet\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\r\n\t// all lists are loaded\r\n\tvar toIds = SDL.jQuery.map(toIds, function(item, id) { return id; } );\r\n\tdelete loadingTrees[itemId];\r\n\tthis.fireEvent(\"load\", {id: itemId, toIds: toIds});\r\n};\r\n\r\nSDL.Client.Models.Base.Tree.prototype.processListLoaded = function SDL$Client$Models$Base$Tree$processListLoaded(event)\r\n{\r\n\tvar id = event.target.getId();\r\n\tvar loadingTrees = this.properties.loadingTrees;\r\n\r\n\tvar fireEvent = true;\r\n\tvar allLists = this.properties.lists;\r\n\tfor (var item in loadingTrees)\r\n\t{\r\n\t\tif (allLists[item] == id)\r\n\t\t{\r\n\t\t\tfireEvent = false;\r\n\t\t}\r\n\t}\r\n\tif (fireEvent)\r\n\t{\r\n\t\t// if there is no subtree being loaded for this list -\u003e fire the list\u0027s event, otherwise the subtree will fire its own event when loaded\r\n\t\tthis.fireEvent(\"load\", {id: SDL.Client.Types.Object.find(allLists, id)});\r\n\t}\r\n\t\r\n\tfor (var item in loadingTrees)\r\n\t{\r\n\t\tvar lists = loadingTrees[item].lists;\r\n\t\tif (lists \u0026\u0026 lists[id] === false)\r\n\t\t{\r\n\t\t\tlists[id] = true;\r\n\t\t\tthis.processTreeLoaded(item);\r\n\t\t}\r\n\t}\r\n\r\n};\r\n\r\nSDL.Client.Models.Base.Tree.prototype.processItemDeleted = function SDL$Client$Models$Base$Tree$processItemDeleted(event)\r\n{\r\n\tvar item = event.target;\r\n\tif (item)\r\n\t{\r\n\t\tvar list = this.removeList(item);\r\n\t\tvar paths = this.properties.paths;\r\n\t\tvar children = [];\r\n\r\n\t\titem = item.getId();\r\n\t\t// collect all known child nodes\r\n\t\tfor (var id in paths)\r\n\t\t{\r\n\t\t\tif (paths[id] == item)\r\n\t\t\t{\r\n\t\t\t\tchildren.push(id);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// remove child-\u003eparent information\r\n\t\tvar i;\r\n\t\tvar len = children.length;\r\n\t\tfor (i = 0; i \u003c len; i++)\r\n\t\t{\r\n\t\t\tvar child = children[i];\r\n\t\t\tdelete paths[child];\r\n\t\t\tvar childItem = SDL.Client.Models.getItem(child);\r\n\t\t\tif (SDL.Client.Types.OO.implementsInterface(childItem, \"SDL.Client.Models.LoadableObject\"))\r\n\t\t\t{\r\n\t\t\t\tchildItem._invalidateCachedState();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\nSDL.Client.Models.Base.Tree.prototype.isSearchingItem = function SDL$Client$Models$Base$Tree$isSearchingItem(item)\r\n{\r\n\tvar itemId;\r\n\tif (SDL.Client.Type.isString(item))\r\n\t{\r\n\t\titemId = item;\r\n\t}\r\n\telse if (SDL.Client.Types.OO.implementsInterface(item, \"SDL.Client.Models.IdentifiableObject\"))\r\n\t{\r\n\t\titemId = item.getId();\r\n\t}\r\n\r\n\treturn this.properties.searching[itemId] || false;\r\n};\r\n\r\nSDL.Client.Models.Base.Tree.prototype.findItem = function SDL$Client$Models$Base$Tree$findItem(item, refresh)\r\n{\r\n\tvar itemId;\r\n\tif (SDL.Client.Type.isString(item))\r\n\t{\r\n\t\titemId = item;\r\n\t\titem = SDL.Client.Models.getItem(itemId);\r\n\t}\r\n\telse if (SDL.Client.Types.OO.implementsInterface(item, \"SDL.Client.Models.IdentifiableObject\"))\r\n\t{\r\n\t\titemId = item.getId();\r\n\t}\r\n\r\n\tif (itemId \u0026\u0026 !this.isSearchingItem(itemId))\r\n\t{\r\n\t\tvar p = this.properties;\r\n\t\tp.searching[itemId] = true;\r\n\r\n\t\tvar path;\r\n\t\tif (!refresh \u0026\u0026 (path = this.getPath(item)) \u0026\u0026 path.length \u003e 0 \u0026\u0026 (path[0] == p.parentId))\t// no need to go to the server, the data is available on the client\r\n\t\t{\r\n\t\t\tdelete p.searching[itemId];\r\n\t\t\tthis.processFindItem(itemId);\r\n\t\t\tthis.fireEvent(\"finditem\", { id: itemId, path: path });\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tvar self = this;\r\n\t\t\tthis.executeFindItem(itemId, p.parentId, function SDL$Client$Models$Base$Tree$findItem$onSuccess(path)\r\n\t\t\t{\r\n\t\t\t\tdelete p.searching[itemId];\r\n\t\t\t\tself.processFindItem(itemId);\r\n\t\t\t\tself.fireEvent(\"finditem\", { id: itemId, path: path });\r\n\t\t\t},\r\n\t\t\tfunction SDL$Client$Models$Base$Tree$findItem$onError(error)\r\n\t\t\t{\r\n\t\t\t\tdelete p.searching[itemId];\r\n\t\t\t\tp.paths[itemId] = null;\r\n\t\t\t\tthis.registerError(error);\r\n\t\t\t\tself.processFindItem(itemId);\r\n\t\t\t\tself.fireEvent(\"finditemfailed\", { id: itemId, error: error });\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n};\r\n\r\nSDL.Client.Models.Base.Tree.prototype.getPath = function SDL$Client$Models$Base$Tree$getPath(item, fromItem)\r\n{\r\n\tvar paths = this.properties.paths;\r\n\r\n\tvar itemId;\r\n\tif (SDL.Client.Type.isString(item))\r\n\t{\r\n\t\titemId = item;\r\n\t}\r\n\telse if (SDL.Client.Types.OO.implementsInterface(item, \"SDL.Client.Models.IdentifiableObject\"))\r\n\t{\r\n\t\titemId = item.getId();\r\n\t}\r\n\r\n\tvar parentId = this.properties.parentId;\r\n\tvar fromItemId;\r\n\tif (!fromItem)\r\n\t{\r\n\t\tfromItemId = parentId;\r\n\t}\r\n\telse if (SDL.Client.Type.isString(fromItem))\r\n\t{\r\n\t\tfromItemId = fromItem;\r\n\t}\r\n\telse if (SDL.Client.Types.OO.implementsInterface(fromItem, \"SDL.Client.Models.IdentifiableObject\"))\r\n\t{\r\n\t\tfromItemId = fromItem.getId();\r\n\t}\r\n\r\n\tvar path = [itemId];\r\n\twhile (itemId \u0026\u0026 itemId != fromItemId \u0026\u0026 itemId != parentId)\r\n\t{\r\n\t\tvar modelItem = SDL.Client.Models.getItem(itemId);\r\n\t\tvar parent = undefined;\r\n\t\tif (modelItem)\r\n\t\t{\r\n\t\t\t// TODO: get parent item from modelItem, need an interface for that\r\n\t\t\t//parent = modelItem.getParentItem();\r\n\t\t}\r\n\r\n\t\tif (parent !== null)\r\n\t\t{\r\n\t\t\tpaths[item] = parent;\r\n\t\t\tpath.push(parent);\r\n\t\t}\r\n\r\n\t\titemId = parent;\r\n\t}\r\n\treturn path.reverse();\r\n};\r\n\r\nSDL.Client.Models.Base.Tree.prototype.registerError = function SDL$Client$Models$Base$Tree$registerError(error)\r\n{\r\n\tSDL.Client.MessageCenter.registerError(error);\r\n};\r\n\r\nSDL.Client.Models.Base.Tree.prototype.executeFindItem = function SDL$Client$Models$Base$Tree$executeFindItem(id, parentId, success, failure)\r\n{\r\n\tthrow Error(\"SDL.Client.Models.Base.Tree does not implement executeFindItem() method.\");\r\n};\r\n// ------- SDL.Client.Models.MarshallableObject implementations/overrides\r\nSDL.Client.Models.Base.Tree.prototype.pack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$Base$Tree$pack()\r\n{\r\n\tvar p = this.properties;\r\n\treturn {\r\n\t\t\t\tsearching: p.searching,\r\n\t\t\t\tlists: p.lists,\r\n\t\t\t\tpaths: p.paths,\r\n\t\t\t\tloadingTrees: p.loadingTrees\r\n\t\t\t};\r\n});\r\n\r\nSDL.Client.Models.Base.Tree.prototype.unpack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$Base$Tree$unpack(data)\r\n{\r\n\tif (data)\r\n\t{\r\n\t\tvar p = this.properties;\r\n\t\tp.searching = SDL.Client.Types.Object.clone(data.searching);\r\n\t\tp.paths = SDL.Client.Types.Object.clone(data.paths);\r\n\t\tfor (var item in data.loadingTrees)\r\n\t\t{\r\n\t\t\tvar treeData = data.loadingTrees[item];\r\n\t\t\tp.loadingTrees[item] =\r\n\t\t\t{\r\n\t\t\t\ttoIds: SDL.Client.Types.Object.clone(treeData.toIds),\r\n\t\t\t\tlists: SDL.Client.Types.Object.clone(treeData.lists),\r\n\t\t\t\trefresh: treeData.refresh\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (var item in data.lists)\r\n\t\t{\r\n\t\t\tthis.addList(item, data.lists[item]);\r\n\t\t}\r\n\t}\r\n});\r\n\r\nSDL.Client.Models.Base.Tree.prototype.afterInitializeMarshalledObject = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$Base$Tree$afterInitializeMarshalledObject(object)\r\n{\r\n\tvar searching = this.properties.searching;\r\n\tthis.properties.searching = {};\r\n\tfor (var id in searching)\r\n\t{\r\n\t\t//the tree was searching for the item before marshalling -\u003e make sure the operation is finished\r\n\t\tthis.findItem(id);\r\n\t}\r\n});\r\n// ------- end of SDL.Client.Models.MarshallableObject overrides\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Models/Base/Tree.js");
	globalEval(/*FILE-BEGIN*/"/*! @namespace {SDL.Client.Models.Base.VersionableItem} */\r\nSDL.Client.Types.OO.createInterface(\"SDL.Client.Models.Base.VersionableItem\");\r\n\r\n/*\r\n\tBase implementation of an item with versioning (can check-out, check-in and undo check-out).\r\n*/\r\nSDL.Client.Models.Base.VersionableItem.$constructor = function SDL$Client$Models$Base$VersionableItem$constructor(id)\r\n{\r\n\tthis.addInterface(\"SDL.Client.Models.Base.EditableItem\", [id]);\r\n\r\n\tvar p = this.properties;\r\n\tp.checkingOut;\r\n\tp.cancelingCheckOut;\r\n\tp.checkingIn;\r\n\r\n\tp.canCheckOut;\r\n\tp.canCheckIn;\r\n\tp.canCancelCheckOut;\r\n};\r\n\r\nSDL.Client.Models.Base.VersionableItem.prototype.invalidateInterfaceCachedState = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$Base$VersionableItem$invalidateInterfaceCachedState()\r\n{\r\n\tvar p = this.properties;\r\n\tp.canCheckOut =\r\n\tp.canCheckIn =\r\n\tp.canCancelCheckOut = undefined;\r\n});\r\n\r\nSDL.Client.Models.Base.VersionableItem.prototype.canCheckOut = function SDL$Client$Models$Base$VersionableItem$canCheckOut()\r\n{\r\n\treturn this.properties.canCheckOut;\r\n};\r\n\r\nSDL.Client.Models.Base.VersionableItem.prototype.canCheckIn = function SDL$Client$Models$Base$VersionableItem$canCheckIn()\r\n{\r\n\treturn this.properties.canCheckIn;\r\n};\r\n\r\nSDL.Client.Models.Base.VersionableItem.prototype.canCancelCheckOut = function SDL$Client$Models$Base$VersionableItem$canCancelCheckOut()\r\n{\r\n\treturn this.properties.canCancelCheckOut;\r\n};\r\n\r\nSDL.Client.Models.Base.VersionableItem.prototype.save = function SDL$Client$Models$Base$VersionableItem$save(doneEditing)\r\n{\r\n\tif (doneEditing \u0026\u0026 !this.isCheckingIn())\r\n\t{\r\n\t\tif (this.canSave())\r\n\t\t{\r\n\t\t\tthis._setCheckingIn();\r\n\t\t\treturn this.callBase(\"SDL.Client.Models.Base.EditableItem\", \"save\");\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn this.checkIn();\r\n\t\t}\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn this.callBase(\"SDL.Client.Models.Base.EditableItem\", \"save\");\r\n\t}\r\n};\r\n\r\nSDL.Client.Models.Base.VersionableItem.prototype.isCheckedOut = function SDL$Client$Models$Base$VersionableItem$isCheckedOut()\r\n{\r\n\treturn (this.isLoaded() || undefined) \u0026\u0026 !this.canCheckOut() \u0026\u0026 (this.canCheckIn() || this.canCancelCheckOut());\r\n};\r\n\r\nSDL.Client.Models.Base.VersionableItem.prototype.isCheckingOut = function SDL$Client$Models$Base$VersionableItem$isCheckingOut()\r\n{\r\n\treturn this.properties.checkingOut;\r\n};\r\n\r\nSDL.Client.Models.Base.VersionableItem.prototype._setCheckingOut = function SDL$Client$Models$Base$VersionableItem$_setCheckingOut()\r\n{\r\n\tthis.properties.checkingOut = true;\r\n\tthis.fireEvent(\"checkingout\");\r\n};\r\n\r\nSDL.Client.Models.Base.VersionableItem.prototype._setCheckedOut = function SDL$Client$Models$Base$VersionableItem$_setCheckedOut()\r\n{\r\n\tthis.properties.checkingOut = false;\r\n\tthis.fireEvent(\"checkout\");\r\n};\r\n\r\nSDL.Client.Models.Base.VersionableItem.prototype._setCheckOutFailed = function SDL$Client$Models$Base$VersionableItem$_setCheckOutFailed(error, webRequest)\r\n{\r\n\tthis.properties.checkingOut = false;\r\n\tthis.fireEvent(\"checkoutfailed\", {error: error, errorCode: webRequest ? webRequest.statusCode : null});\r\n};\r\n\r\nSDL.Client.Models.Base.VersionableItem.prototype.checkOut = function SDL$Client$Models$Base$VersionableItem$checkOut()\r\n{\r\n\tif (!this.isCheckedOut())\r\n\t{\r\n\t\tif (!this.isCheckingOut())\r\n\t\t{\r\n\t\t\tthis._setCheckingOut();\r\n\t\t\tthis._setLoading();\r\n\t\t\tthis._executeCheckOut();\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n};\r\n\r\nSDL.Client.Models.Base.VersionableItem.prototype._executeCheckOut = function SDL$Client$Models$Base$VersionableItem$_executeCheckOut()\r\n{\r\n\tthis._onLoad();\t// to be overridden\r\n};\r\n\r\nSDL.Client.Models.Base.VersionableItem.prototype.isCancelingCheckOut = function SDL$Client$Models$Base$VersionableItem$isCancelingCheckOut()\r\n{\r\n\treturn this.properties.cancelingCheckOut;\r\n};\r\n\r\nSDL.Client.Models.Base.VersionableItem.prototype._setCancelingCheckOut = function SDL$Client$Models$Base$VersionableItem$_setCancelingCheckOut()\r\n{\r\n\tthis.properties.cancelingCheckOut = true;\r\n\tthis.fireEvent(\"cancelingcheckout\");\r\n};\r\n\r\nSDL.Client.Models.Base.VersionableItem.prototype._setCanceledCheckOut = function SDL$Client$Models$Base$VersionableItem$_setCanceledCheckOut()\r\n{\r\n\tthis.properties.cancelingCheckOut = false;\r\n\tthis.fireEvent(\"cancelcheckout\");\r\n};\r\n\r\nSDL.Client.Models.Base.VersionableItem.prototype._setCancelCheckOutFailed = function SDL$Client$Models$Base$VersionableItem$_setCancelCheckOutFailed(error, webRequest)\r\n{\r\n\tthis.properties.cancelingCheckOut = false;\r\n\tthis.fireEvent(\"cancelcheckoutfailed\", {error: error, errorCode: webRequest ? webRequest.statusCode : null});\r\n};\r\n\r\n\r\nSDL.Client.Models.Base.VersionableItem.prototype.cancelCheckOut = function SDL$Client$Models$Base$VersionableItem$cancelCheckOut()\r\n{\r\n\tif (!this.isCheckingIn() \u0026\u0026 this.canCancelCheckOut() != false)\r\n\t{\r\n\t\tif (!this.isCancelingCheckOut())\r\n\t\t{\r\n\t\t\tthis._setCancelingCheckOut();\r\n\t\t\tif (this.properties.cancelingCheckOut) {\r\n\t\t\t  this._setLoading();\r\n\t\t\t  this._executeCancelCheckOut();\r\n\t\t\t} else {\r\n\t\t\t  return false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n};\r\n\r\nSDL.Client.Models.Base.VersionableItem.prototype._executeCancelCheckOut = function SDL$Client$Models$Base$VersionableItem$_executeCancelCheckOut()\r\n{\r\n\tthis._onLoad();\t// to be overridden\r\n};\r\n\r\nSDL.Client.Models.Base.VersionableItem.prototype.isCheckingIn = function SDL$Client$Models$Base$VersionableItem$isCheckingIn()\r\n{\r\n\treturn this.properties.checkingIn;\r\n};\r\n\r\nSDL.Client.Models.Base.VersionableItem.prototype._setCheckingIn = function SDL$Client$Models$Base$VersionableItem$_setCheckingIn()\r\n{\r\n\tthis.properties.checkingIn = true;\r\n\tthis.fireEvent(\"checkingin\");\r\n};\r\n\r\nSDL.Client.Models.Base.VersionableItem.prototype._setCheckedIn = function SDL$Client$Models$Base$VersionableItem$_setCheckedIn()\r\n{\r\n\tthis.properties.checkingIn = false;\r\n\tthis.fireEvent(\"checkin\");\r\n};\r\n\r\nSDL.Client.Models.Base.VersionableItem.prototype._setCheckInFailed = function SDL$Client$Models$Base$VersionableItem$_setCheckInFailed(error, webRequest)\r\n{\r\n\tthis.properties.checkingIn = false;\r\n\tthis.fireEvent(\"checkinfailed\", {error: error, errorCode: webRequest ? webRequest.statusCode : null});\r\n};\r\n\r\n\r\nSDL.Client.Models.Base.VersionableItem.prototype.checkIn = function SDL$Client$Models$Base$VersionableItem$checkIn()\r\n{\r\n\tif (!this.isCancelingCheckOut() \u0026\u0026 this.canCheckIn() != false)\r\n\t{\r\n\t\tif (!this.isCheckingIn())\r\n\t\t{\r\n\t\t\tthis._setCheckingIn();\r\n\t\t\tthis._setLoading();\r\n\t\t\tthis._executeCheckIn();\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n};\r\n\r\nSDL.Client.Models.Base.VersionableItem.prototype._executeCheckIn = function SDL$Client$Models$Base$VersionableItem$_executeCheckIn()\r\n{\r\n\tthis._onLoad();\t// to be overridden\r\n};\r\n\r\nSDL.Client.Models.Base.VersionableItem.prototype.afterSetLoaded = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$Base$VersionableItem$afterSetLoaded()\r\n{\r\n\tif (this.isCheckingOut())\r\n\t{\r\n\t\tthis._setCheckedOut();\r\n\t}\r\n\tif (this.isCancelingCheckOut())\r\n\t{\r\n\t\tthis._setCanceledCheckOut();\r\n\t}\r\n\tif (this.isCheckingIn())\r\n\t{\r\n\t\tthis._setCheckedIn();\r\n\t}\r\n});\r\n\r\nSDL.Client.Models.Base.VersionableItem.prototype.afterLoadFailed = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$Base$VersionableItem$afterLoadFailed(error, webRequest)\r\n{\r\n\tif (this.isCheckingOut())\r\n\t{\r\n\t\tthis._setCheckOutFailed(error, webRequest);\r\n\t}\r\n\tif (this.isCancelingCheckOut())\r\n\t{\r\n\t\tthis._setCancelCheckOutFailed(error, webRequest);\r\n\t}\r\n\tif (this.isCheckingIn())\r\n\t{\r\n\t\tthis._setCheckInFailed(error, webRequest);\r\n\t}\r\n});\r\n\r\n// ------- SDL.Client.Models.MarshallableObject implementations/overrides\r\nSDL.Client.Models.Base.VersionableItem.prototype.pack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$Base$VersionableItem$pack()\r\n{\r\n\tvar p = this.properties;\r\n\treturn {\r\n\t\tcheckingOut: p.checkingOut,\r\n\t\tcancelingCheckOut: p.cancelingCheckOut,\r\n\t\tcheckingOut: p.checkingOut,\r\n\t\tcanCheckOut: p.canCheckOut,\r\n\t\tcanCheckIn: p.canCheckIn,\r\n\t\tcanCancelCheckOut: p.canCancelCheckOut\r\n\t};\r\n});\r\n\r\nSDL.Client.Models.Base.VersionableItem.prototype.unpack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$Base$VersionableItem$unpack(data)\r\n{\r\n\tif (data)\r\n\t{\r\n\t\tvar p = this.properties;\r\n\t\tp.checkingOut = data.checkingOut;\r\n\t\tp.cancelingCheckOut = data.cancelingCheckOut;\r\n\t\tp.checkingOut = data.checkingOut;\r\n\t\tp.canCheckOut = data.canCheckOut;\r\n\t\tp.canCheckIn = data.canCheckIn;\r\n\t\tp.canCancelCheckOut = data.canCancelCheckOut;\r\n\t}\r\n});\r\n\r\nSDL.Client.Models.Base.VersionableItem.prototype._initializeMarshalledObject = function SDL$Client$Models$Base$VersionableItem$_initializeMarshalledObject(object)\r\n{\r\n\tvar p = this.properties;\r\n\tif (p.checkingOut || p.cancelingCheckOut || p.checkingIn)\r\n\t{\r\n\t\tp.loading = false;\t// this is to prevent SDL.LoadableObject to load data, checkOut() will load data too\r\n\t}\r\n\r\n\tif (this.callBase(\"SDL.Client.Models.Base.EditableItem\", \"_initializeMarshalledObject\", [object]))\r\n\t{\r\n\t\tif (p.checkingOut)\r\n\t\t{\r\n\t\t\tp.checkingOut = false;\r\n\t\t\tthis.checkOut();\r\n\t\t}\r\n\t\telse if (p.cancelingCheckOut)\r\n\t\t{\r\n\t\t\tp.cancelingCheckOut = false;\r\n\t\t\tthis.cancelCheckOut();\r\n\t\t}\r\n\t\telse if (p.checkingIn)\r\n\t\t{\r\n\t\t\tp.checkingIn = false;\r\n\t\t\tthis.checkIn();\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n};\r\n\r\n// ------- end of SDL.Client.Models.MarshallableObject overrides\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Models/Base/VersionableItem.js");
	globalEval(/*FILE-BEGIN*/"/*! @namespace {SDL.Client.Models.Base.XmlBasedObject} */\r\nSDL.Client.Types.OO.createInterface(\"SDL.Client.Models.Base.XmlBasedObject\");\r\n\r\n/*\r\n\tAdds methods for managing object\u0027s xml data.\r\n*/\r\nSDL.Client.Models.Base.XmlBasedObject.$constructor = function SDL$Client$Models$Base$XmlBasedObject$constructor()\r\n{\r\n\tthis.addInterface(\"SDL.Client.Models.MarshallableObject\");\r\n\r\n\tvar p = this.properties;\r\n\tp.xml;\r\n\tp.xmlDocument;\r\n};\r\n\r\n/*\r\n\tAssigns an xml string to the object.\r\n*/\r\nSDL.Client.Models.Base.XmlBasedObject.prototype.setXml = function SDL$Client$Models$Base$XmlBasedObject$setXml(value)\r\n{\r\n\t var p = this.properties;\r\n\t p.xml = value;\r\n\t p.xmlDocument = undefined;\r\n};\r\n\r\n/*\r\n\tGets an xml string assigned to the object.\r\n*/\r\nSDL.Client.Models.Base.XmlBasedObject.prototype.getXml = function SDL$Client$Models$Base$XmlBasedObject$getXml()\r\n{\r\n\tvar p = this.properties;\r\n\tif (p.xml === undefined \u0026\u0026 p.xmlDocument)\r\n\t{\r\n\t\tp.xml = SDL.Client.Xml.getOuterXml(p.xmlDocument) || null;\r\n\t}\r\n\treturn p.xml;\r\n};\r\n\r\n/*\r\n\tGets xml assigned to the object as an xml document.\r\n*/\r\nSDL.Client.Models.Base.XmlBasedObject.prototype.getXmlDocument = function SDL$Client$Models$Base$XmlBasedObject$getXmlDocument()\r\n{\r\n\tvar p = this.properties;\r\n\tif (!p.xmlDocument)\r\n\t{\r\n\t\tvar xml = this.getXml();\r\n\t\tif (xml)\r\n\t\t{\r\n\t\t\tp.xmlDocument = SDL.Client.Xml.getNewXmlDocument(xml);\r\n\t\t}\r\n\t}\r\n\treturn p.xmlDocument;\r\n};\r\n\r\n// ------- SDL.Client.Models.MarshallableObject implementations/overrides\r\nSDL.Client.Models.Base.XmlBasedObject.prototype.pack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$Base$XmlBasedObject$pack()\r\n{\r\n\tvar p = this.properties;\r\n\treturn {\r\n\t\txml: p.xml\r\n\t};\r\n});\r\n\r\nSDL.Client.Models.Base.XmlBasedObject.prototype.unpack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$Base$XmlBasedObject$unpack(data)\r\n{\r\n\tvar p = this.properties;\r\n\tif (data)\r\n\t{\r\n\t\tp.xml = data.xml;\r\n\t}\r\n});\r\n// ------- end of SDL.Client.Models.MarshallableObject overrides"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Models/Base/XmlBasedObject.js");
	globalEval(/*FILE-BEGIN*/"SDL.Client.Types.OO.createInterface(\"SDL.Client.Models.System.ModelsList\");\r\n\r\n/*\r\n\tImplements navigating through all registered navigatable domain models (models that expose a getSystemRoot() object).\r\n\tgetItems() method returns the list of root folders, one root for each system.\r\n*/\r\nSDL.Client.Models.System.ModelsList.$constructor = function SDL$Client$Models$System$ModelsList$constructor(id, parentId)\r\n{\r\n\tthis.addInterface(\"SDL.Client.Models.Base.List\", [id, parentId]);\r\n\tvar p = this.properties;\r\n\tp.parentId = parentId;\r\n\tp.items;\r\n};\r\n\r\nSDL.Client.Models.System.ModelsList.prototype.isLoaded = function SDL$Client$Models$System$ModelsList$isLoaded()\r\n{\r\n\treturn true;\r\n};\r\n\r\nSDL.Client.Models.System.ModelsList.prototype.isFilterApplied = function SDL$Client$Models$System$ModelsList$isFilterApplied(filter)\r\n{\r\n\treturn true;\r\n};\r\n\r\nSDL.Client.Models.System.ModelsList.prototype.getItems = function SDL$Client$Models$System$ModelsList$getItems()\r\n{\r\n\tvar p = this.properties;\r\n\tif (!p.items)\r\n\t{\r\n\t\tvar parentId = p.parentId;\r\n\t\tp.items = [];\r\n\t\tvar factories = SDL.Client.Models.getModelFactories();\r\n\t\tfor (var i = 0, len = factories.length; i \u003c len; i++)\r\n\t\t{\r\n\t\t\tvar factory = factories[i];\r\n\t\t\tif (SDL.Client.Type.isFunction(factory.getSystemRootId))\r\n\t\t\t{\r\n\t\t\t\tvar id = factory.getSystemRootId();\r\n\t\t\t\tif (id \u0026\u0026 id != parentId)\r\n\t\t\t\t{\r\n\t\t\t\t\tp.items.push({id: id, title: factory.getSystemRootTitle()});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn p.items;\r\n};"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Models/System/ModelsList.js");
	globalEval(/*FILE-BEGIN*/"SDL.Client.Types.OO.createInterface(\"SDL.Client.Models.System.ModelsListProvider\");\r\n\r\n/*\r\n\tFolder object for navigating through all registered models that have getSystemRootId() method.\r\n*/\r\nSDL.Client.Models.System.ModelsListProvider.$constructor = function SDL$Client$Models$System$ModelsListProvider$constructor(id)\r\n{\r\n\tthis.addInterface(\"SDL.Client.Models.Base.ListProvider\", [id]);\r\n};\r\n\r\nSDL.Client.Models.System.ModelsListProvider.prototype.getListType = function SDL$Client$Models$System$ModelsListProvider$getListType(filter)\r\n{\r\n\treturn \"SDL.Client.Models.System.ModelsList\";\r\n};"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Models/System/ModelsListProvider.js");
	globalEval(/*FILE-BEGIN*/"SDL.Client.Type.registerNamespace(\"SDL.Client.Models.System\");\r\n\r\n(function()\r\n{\r\n\tvar model = SDL.Client.Models.System.Model = new SDL.Client.Models.Base.ModelFactory();\r\n\r\n\tmodel.getSettings().prefix = \"system:\";\r\n\r\n\tmodel.getSystemRootId = function SDL$Client$Models$System$Model$getSystemRootId()\r\n\t{\r\n\t\treturn this.getModelSpecificUri(\"models-list-provider\", model.getFolderType());\r\n\t};\r\n\r\n\tmodel.getSystemRootTitle = function SDL$Client$Models$System$Model$getSystemRootTitle()\r\n\t{\r\n\t\treturn this.properties.settings.prefix + \"system\";\r\n\t};\r\n\r\n\tSDL.Client.Models.registerModelFactory(\r\n\t\tmodel.getIdMatchRegExp(),\r\n\t\tmodel,\r\n\t\t[\r\n\t\t\t{\r\n\t\t\t\tid: model.getFolderType(),\r\n\t\t\t\talias: \"SDL_SYSTEM_MODELSLISTPROVIDER\",\r\n\t\t\t\timplementation: \"SDL.Client.Models.System.ModelsListProvider\"\r\n\t\t\t}\r\n\t\t]\r\n\t)\r\n})();"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Models/System/Model.js");
	globalEval(/*FILE-BEGIN*/"/*! @namespace {SDL.Client.Models.URL.Document} */\r\nSDL.Client.Types.OO.createInterface(\"SDL.Client.Models.URL.Document\");\r\n\r\n/*\r\n* Represents a base for documents loaded from a URL.\r\n*/\r\nSDL.Client.Models.URL.Document.$constructor = function SDL$Client$Models$URL$Document$constructor(id)\r\n{\r\n\tthis.addInterface(\"SDL.Client.Models.Base.Item\", [id]);\r\n\r\n\tvar p = this.properties;\r\n\tp.content;\r\n\tp.contentUrl;\r\n\tp.mimeType;\r\n};\r\n\r\nSDL.Client.Models.URL.Document.prototype.invalidateInterfaceCachedState = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$URL$Document$invalidateInterfaceCachedState()\r\n{\r\n\tthis.properties.content = undefined;\r\n});\r\n\r\nSDL.Client.Models.URL.Document.prototype.getTitle = function SDL$Client$Models$URL$Document$getTitle()\r\n{\r\n\tvar m = this.getId().match(/([^\\/\\\\]*)\\/?$/);\r\n\treturn m ? m[1] : null;\r\n};\r\n\r\nSDL.Client.Models.URL.Document.prototype.getContentUrl = function SDL$Client$Models$URL$Document$getContentUrl()\r\n{\r\n\tvar p = this.properties;\r\n\tif (p.contentUrl === undefined)\r\n\t{\r\n\t\tvar id = this.getOriginalId() || \"\";\r\n\t\tif (/^\\//.test(id))\r\n\t\t{\r\n\t\t\tp.contentUrl = SDL.Client.Types.Url.getAbsoluteUrl(id);\r\n\t\t}\r\n\t\telse if (/\\:/.test(id))\r\n\t\t{\r\n\t\t\tp.contentUrl = id;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tvar s = this.getModelFactory().getSettings();\r\n\t\t\tp.contentUrl = SDL.Client.Types.Url.getAbsoluteUrl(SDL.Client.Types.Url.combinePath(s.root, id));\r\n\t\t}\r\n\t}\r\n\treturn p.contentUrl;\r\n};\r\n\r\nSDL.Client.Models.URL.Document.prototype.getContent = function SDL$Client$Models$URL$Document$getContent()\r\n{\r\n\treturn this.properties.content;\r\n};\r\n\r\nSDL.Client.Models.URL.Document.prototype.getMimeType = function SDL$Client$Models$URL$Document$getMimeType()\r\n{\r\n\treturn this.properties.mimeType;\r\n};\r\n\r\nSDL.Client.Models.URL.Document.prototype.isLoaded = function SDL$Client$Models$URL$Document$isLoaded()\r\n{\r\n\treturn this.properties.content != undefined;\r\n};\r\n\r\nSDL.Client.Models.URL.Document.prototype._executeLoad = function SDL$Client$Models$URL$Document$_executeLoad(reload)\r\n{\r\n\tSDL.Client.Net.getRequest(this.getContentUrl(), this.getDelegate(this._onLoad), this.getDelegate(this._onLoadFailed));\r\n};\r\n\r\nSDL.Client.Models.URL.Document.prototype._processLoadResult = function SDL$Client$Models$URL$Document$_processLoadResult(result, webRequest)\r\n{\r\n\tthis.callBase(\"SDL.Client.Models.Base.Item\", \"_processLoadResult\", [result, webRequest]);\r\n\r\n\tvar p = this.properties;\r\n\tp.content = result;\r\n\r\n\tp.mimeType = webRequest ? webRequest.responseContentType : null;\r\n};\r\n\r\n// ------- SDL.Client.Models.MarshallableObject implementations/overrides\r\nSDL.Client.Models.URL.Document.prototype.pack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$URL$Document$pack()\r\n{\r\n\tvar p = this.properties;\r\n\treturn {\r\n\t\tcontent: p.content,\r\n\t\tmimeType: p.mimeType\r\n\t};\r\n});\r\n\r\nSDL.Client.Models.URL.Document.prototype.unpack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$URL$Document$unpack(data)\r\n{\r\n\tif (data)\r\n\t{\r\n\t\tvar p = this.properties;\r\n\t\tp.content = data.content;\r\n\t\tp.mimeType = data.mimeType;\r\n\t}\r\n});\r\n// ------- end of SDL.Client.Models.MarshallableObject overrides"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Models/URL/Document.js");
	globalEval(/*FILE-BEGIN*/"/*! @namespace {SDL.Client.Models.URL.ModelFactory} */\r\nSDL.Client.Types.OO.createInterface(\"SDL.Client.Models.URL.ModelFactory\");\r\n\r\n/*\r\n\tImplements a model factory used for managing documents loaded from a URL.\r\n*/\r\nSDL.Client.Models.URL.ModelFactory.$constructor = function SDL$Client$Models$URL$ModelFactory$constructor()\r\n{\r\n\tthis.addInterface(\"SDL.Client.Models.Base.ModelFactory\");\r\n\r\n\tvar s = this.properties.settings;\r\n\ts.prefix = \"url:\";\r\n\ts.root = \"/\";\t// root URL is used to resolve relative URL\u0027s\r\n}\r\n\r\nSDL.Client.Models.URL.ModelFactory.prototype.getItemType = function SDL$Client$Models$URL$ModelFactory$getItemType(item)\r\n{\r\n\tif (item)\r\n\t{\r\n\t\treturn this.getDocumentType();\r\n\t}\r\n};"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Models/URL/ModelFactory.js");
	globalEval(/*FILE-BEGIN*/"/*! @namespace {SDL.Client.Models.URL} */\r\nSDL.Client.Type.registerNamespace(\"SDL.Client.Models.URL\");\r\n\r\n(function()\r\n{\r\n\tvar model = SDL.Client.Models.URL.Model = new SDL.Client.Models.URL.ModelFactory();\r\n\r\n\tSDL.Client.Models.registerModelFactory(\r\n\t\tmodel.getIdMatchRegExp(),\r\n\t\tmodel,\r\n\t\t[\r\n\t\t\t{\r\n\t\t\t\tid: model.getDocumentType(),\r\n\t\t\t\talias: \"SDL_URL_DOCUMENT\",\r\n\t\t\t\timplementation: \"SDL.Client.Models.URL.Document\"\r\n\t\t\t}\r\n\t\t]);\r\n\r\n\tSDL.Client.Models.registerModelFactory(\"\", model);\t// matches all unrecognized id\u0027s\r\n})();"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Models/URL/Model.js");
	globalEval(/*FILE-BEGIN*/"SDL.Client.Types.OO.createInterface(\"SDL.Client.Models.Clipboard\");\r\n\r\nSDL.Client.Models.Clipboard.$execute = function SDL$Client$Models$Base$Clipboard$constructor()\r\n{\r\n\treturn SDL.Client.Models.getFromRepository(\"sdl-base-clipboard\") ||\r\n\t\tSDL.Client.Models.createInRepository(\"sdl-base-clipboard\", \"SDL.Client.Models.Clipboard\");\r\n}\r\n\r\nSDL.Client.Models.Clipboard.$constructor = function SDL$Client$Models$Base$Clipboard$constructor()\r\n{\r\n\tthis.addInterface(\"SDL.Client.Models.MarshallableObject\");\r\n\r\n\tvar clipboardData; \t// a simple type variable or an array of simple types\r\n\tvar clipboardAction; // enum SDL.Client.Models.Clipboard.PasteAction\r\n\tvar itemTypes;\r\n\r\n\tthis.setData = function SDL$Client$Models$Base$Clipboard$setData(data, action)\r\n\t{\r\n\t\tif (clipboardAction !== action || clipboardData !== data)\r\n\t\t{\r\n\t\t\tif (SDL.Client.Type.isArray(data))\r\n\t\t\t{\r\n\t\t\t\tclipboardData = SDL.Client.Types.Array.clone(data);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tclipboardData = data;\r\n\t\t\t}\r\n\t\t\tclipboardAction = action;\r\n\t\t\titemTypes = undefined;\r\n\t\t\tthis.fireEvent(\"change\");\r\n\t\t}\r\n\t};\r\n\r\n\tthis.getData = function SDL$Client$Models$Base$Clipboard$getData()\r\n\t{\r\n\t\treturn clipboardData;\r\n\t};\r\n\r\n\tthis.getAction = function SDL$Client$Models$Base$Clipboard$getAction()\r\n\t{\r\n\t\treturn clipboardAction;\r\n\t};\r\n\r\n\tthis.getDataTypes = function SDL$Client$Models$Base$Clipboard$getDataTypes()\r\n\t{\r\n\t\tif (itemTypes === undefined \u0026\u0026 clipboardData)\r\n\t\t{\r\n\t\t\tif (SDL.Client.Type.isArray(clipboardData))\r\n\t\t\t{\r\n\t\t\t\titemTypes = [];\r\n\t\t\t\tvar itemTypesCache = {};\r\n\t\t\t\tfor (var i = 0, len = clipboardData.length; i \u003c len; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar type = SDL.Client.Models.getItemType(clipboardData[i]) || \"\";\r\n\r\n\t\t\t\t\tif (!(type in itemTypesCache))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\titemTypes.push(type);\r\n\t\t\t\t\t\titemTypesCache[type] = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\treturn [SDL.Client.Models.getItemType(clipboardData) || \"\"];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn itemTypes;\r\n\t};\r\n\r\n\tthis.clearData = function SDL$Client$Models$Base$Clipboard$clearData()\r\n\t{\r\n\t\tif (clipboardAction !== undefined || clipboardData !== undefined)\r\n\t\t{\r\n\t\t\tclipboardAction = clipboardData = itemTypes = undefined;\r\n\t\t\tthis.fireEvent(\"change\");\r\n\t\t}\r\n\t};\r\n\r\n\t// implement pack for marshalling\r\n\tthis.pack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$Base$Clipboard$pack()\r\n\t{\r\n\t\treturn { data: clipboardData, action: clipboardAction };\r\n\t});\r\n\r\n\t// implement unpack for marshalling\r\n\tthis.unpack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$Base$Clipboard$unpack(data)\r\n\t{\r\n\t\tclipboardAction = data.action;\r\n\r\n\t\tif (SDL.Client.Type.isArray(data.data))\r\n\t\t{\r\n\t\t\tclipboardData = SDL.Client.Types.Array.clone(data.data);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tclipboardData = data.data;\r\n\t\t}\r\n\t});\r\n};\r\n\r\n/**\r\n * Returns the singleton instance of Clipboard object.\r\n * @return {SDL.Client.Models.Clipboard} The Clipboard Instance.\r\n */\r\nSDL.Client.Models.Clipboard.getInstance = function SDL$Client$Models$Base$Clipboard$getInstance()\r\n{\r\n\treturn SDL.Client.Models.Clipboard();\r\n};\r\n\r\n/**\r\n * Sets the clipboard data title\r\n * @param {Object} data The clipboard data.\r\n * @param {String} action The clipboard action.\r\n */\r\nSDL.Client.Models.Clipboard.setData = function SDL$Client$Models$Base$Clipboard$setData(data, action)\r\n{\r\n\tthis.getInstance().setData(data, action);\r\n};\r\n\r\n/**\r\n * Gets the clipboard data\r\n * @returns {Object} data The clipboard data.\r\n */\r\nSDL.Client.Models.Clipboard.getData = function SDL$Client$Models$Base$Clipboard$getData()\r\n{\r\n\treturn this.getInstance().getData();\r\n};\r\n\r\n/**\r\n * Gets the array of the clipboard data item types\r\n * @returns {Array} The array of item types\r\n */\r\nSDL.Client.Models.Clipboard.getDataTypes = function SDL$Client$Models$Base$Clipboard$getDataTypes()\r\n{\r\n\treturn this.getInstance().getDataTypes();\r\n};\r\n\r\n/**\r\n * Gets the clipboard stored action\r\n * @returns {String} The clipboard action.\r\n */\r\nSDL.Client.Models.Clipboard.getAction = function SDL$Client$Models$Base$Clipboard$getAction()\r\n{\r\n\treturn this.getInstance().getAction();\r\n};\r\n\r\n/**\r\n * Clears the clipboard data.\r\n */\r\nSDL.Client.Models.Clipboard.clearData = function SDL$Client$Models$Base$Clipboard$clearData()\r\n{\r\n\tthis.getInstance().clearData();\r\n};\r\n\r\nSDL.Client.Models.Clipboard.PasteAction = {\r\n\tCOPY: 0,\r\n\tCUT: 1\r\n};"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Models/Clipboard/Clipboard.js");
	globalEval(/*FILE-BEGIN*/"/*! @namespace {SDL.Client.Models.MessageCenter.MessageCenter} */\r\nSDL.Client.Types.OO.createInterface(\"SDL.Client.Models.MessageCenter.MessageCenter\");\r\n\r\nSDL.Client.Models.MessageCenter.MessageCenter.$constructor = function SDL$Client$Models$SDL$Client$Models$MessageCenter$MessageCenter$MessageCenter$constructor()\r\n{\r\n\tthis.addInterface(\"SDL.Client.Models.MarshallableObject\");\r\n\tvar p = this.properties;\r\n\tp.messages = {};\r\n};\r\n\r\nSDL.Client.Models.MessageCenter.MessageCenter.$execute = function SDL$Client$Models$SDL$Client$Models$MessageCenter$MessageCenter$MessageCenter$execute()\r\n{\r\n\treturn SDL.Client.Models.getFromRepository(\"sdl-message-center\") ||\r\n\t\t\tSDL.Client.Models.createInRepository(\"sdl-message-center\", \"SDL.Client.Models.MessageCenter.MessageCenter\");\r\n};\r\n\r\nSDL.Client.Models.MessageCenter.MessageCenter.prototype.createMessage = function SDL$Client$Models$MessageCenter$MessageCenter$createMessage(messageType, title, description, options)\r\n{\r\n\tvar implementation = SDL.Client.MessageCenter.MessageTypesRegistry[messageType];\r\n\tif (SDL.Client.Type.isString(implementation))\r\n\t{\r\n\t\tvar resolved = SDL.Client.Type.resolveNamespace(implementation);\r\n\t\tvar msg = new (resolved)(title, description, options);\r\n\t\treturn msg;\r\n\t}\r\n};\r\n\r\nSDL.Client.Models.MessageCenter.MessageCenter.prototype.registerMessage = function SDL$Client$Models$MessageCenter$MessageCenter$registerMessage(msg)\r\n{\r\n\tif (msg \u0026\u0026 SDL.Client.Types.OO.implementsInterface(msg, \"SDL.Client.Models.MessageCenter.Message\"))\r\n\t{\r\n\t\tthis.properties.messages[msg.getId()] = msg;\r\n\t\tthis.fireEvent(\"newmessage\", { messageID: msg.getId() });\r\n\t}\r\n};\r\n\r\nSDL.Client.Models.MessageCenter.MessageCenter.prototype.getMessages = function SDL$Client$Models$MessageCenter$MessageCenter$getMessages()\r\n{\r\n\treturn this.properties.messages;\r\n};\r\n\r\nSDL.Client.Models.MessageCenter.MessageCenter.prototype.getActiveMessages = function SDL$Client$Models$MessageCenter$MessageCenter$getActiveMessages()\r\n{\r\n\tvar messages = this.properties.messages;\r\n\tvar result = [];\r\n\tfor (var i in messages)\r\n\t{\r\n\t\tvar msg = messages[i];\r\n\t\tif (msg.isActive())\r\n\t\t{\r\n\t\t\tresult.push(msg);\r\n\t\t}\r\n\t}\r\n\treturn result;\r\n};\r\n\r\nSDL.Client.Models.MessageCenter.MessageCenter.prototype.getMessageByID = function SDL$Client$Models$MessageCenter$MessageCenter$getMessageByID(id)\r\n{\r\n\tif (SDL.Client.Type.isString(id))\r\n\t{\r\n\t\treturn this.properties.messages[id];\r\n\t}\r\n};\r\n\r\nSDL.Client.Models.MessageCenter.MessageCenter.prototype.executeAction = function SDL$Client$Models$MessageCenter$MessageCenter$executeAction(messageID, action, params)\r\n{\r\n\tvar msg = this.getMessageByID(messageID);\r\n\tif (msg)\r\n\t{\r\n\t\tif (SDL.Client.Type.isFunction(msg[action]))\r\n\t\t{\r\n\t\t\tmsg[action](params);\r\n\t\t}\r\n\t\tthis.fireEvent(action, { messageID: messageID });\r\n\t}\r\n};\r\n\r\n// ------- marshallableObject methods implementations/overrides\r\nSDL.Client.Models.MessageCenter.MessageCenter.prototype.pack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$MessageCenter$MessageCenter$pack()\r\n{\r\n\tvar p = this.properties;\r\n\treturn {\r\n\t\t\tmessages: p.messages\r\n\t\t};\r\n});\r\n\r\nSDL.Client.Models.MessageCenter.MessageCenter.prototype.unpack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$MessageCenter$MessageCenter$unpack(data)\r\n{\r\n\tif (data \u0026\u0026 data.messages)\r\n\t{\r\n\t\tvar msgs = data.messages;\r\n\t\tvar p = this.properties;\r\n\t\tfor (var id in msgs)\r\n\t\t{\r\n\t\t\tif (SDL.Client.Types.OO.implementsInterface(msgs[id], \"SDL.Client.Models.MarshallableObject\"))\r\n\t\t\t{\r\n\t\t\t\tp.messages[id] = SDL.Client.Types.OO.importObject(msgs[id]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n});\r\n// ------- end of SDL.Client.Models.MarshallableObject overrides\r\n\r\nSDL.Client.MessageCenter.getInstance = function SDL$Client$Models$MessageCenter$MessageCenter$getInstance()\r\n{\r\n\treturn SDL.Client.Models.MessageCenter.MessageCenter();\r\n};"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Models/MessageCenter/MessageCenter.js");
	globalEval(/*FILE-BEGIN*/"/*! @namespace {SDL.Client.Models.MessageCenter.Message} */\r\nSDL.Client.Types.OO.createInterface(\"SDL.Client.Models.MessageCenter.Message\");\r\n\r\nSDL.Client.Models.MessageCenter.Message.$constructor = function SDL$Client$Models$MessageCenter$Message$constructor(title, description, options)\r\n{\r\n\tthis.addInterface(\"SDL.Client.Models.MarshallableObject\");\r\n\r\n\tvar p = this.properties;\r\n\r\n\tp.id;\r\n\tp.messageType;\r\n\tp.title = title;\r\n\tp.description = description;\r\n\tp.active = true;\r\n\r\n\tp.actions = [];\r\n\tp.options = SDL.Client.Types.Object.clone(options) || {};\r\n\r\n\tp.date = new Date();\r\n\tp.maxAge;\t// don\u0027t archive the message by default\r\n\tp.expireTimeout;\r\n};\r\n\r\nSDL.Client.Models.MessageCenter.Message.prototype.$initialize = function SDL$Client$Models$MessageCenter$Message$initialize()\r\n{\r\n\tvar p = this.properties;\r\n\r\n\tp.id = SDL.Client.Models.getUniqueId();\r\n\r\n\tthis.populateActions();\r\n\r\n\tvar maxAge = p.maxAge;\r\n\tif (SDL.Client.Type.isNumber(maxAge))\r\n\t{\r\n\t\tp.expireTimeout = setTimeout(this.getDelegate(this.expire), maxAge \u003e 1000 ? maxAge : 1000);\t// keep it active for a minimum of 1 second\r\n\t}\r\n};\r\n\r\nSDL.Client.Models.MessageCenter.Message.prototype.getId = function SDL$Client$Models$MessageCenter$Message$getId()\r\n{\r\n\treturn this.properties.id;\r\n};\r\n\r\nSDL.Client.Models.MessageCenter.Message.prototype.getMessageType = function SDL$Client$Models$MessageCenter$Message$getMessageType()\r\n{\r\n\treturn this.properties.messageType;\r\n};\r\n\r\nSDL.Client.Models.MessageCenter.Message.prototype.getTitle = function SDL$Client$Models$MessageCenter$Message$getTitle()\r\n{\r\n\treturn this.properties.title;\r\n};\r\n\r\nSDL.Client.Models.MessageCenter.Message.prototype.getDescription = function SDL$Client$Models$MessageCenter$Message$getDescription()\r\n{\r\n\treturn this.properties.description;\r\n};\r\n\r\nSDL.Client.Models.MessageCenter.Message.prototype.getCreationDate = function SDL$Client$Models$MessageCenter$Message$getCreationDate()\r\n{\r\n\treturn this.properties.date;\r\n};\r\n\r\nSDL.Client.Models.MessageCenter.Message.prototype.isActive = function SDL$Client$Models$MessageCenter$Message$isActive()\r\n{\r\n\treturn this.properties.active;\r\n};\r\n\r\nSDL.Client.Models.MessageCenter.Message.prototype.getTargetWindow = function SDL$Client$Models$MessageCenter$Message$getTargetWindow()\r\n{\r\n\treturn this.properties.options.localToWindow;\r\n};\r\n\r\nSDL.Client.Models.MessageCenter.Message.prototype.getModalForWindow = function SDL$Client$Models$MessageCenter$Message$getModalForWindow()\r\n{\r\n\treturn this.properties.options.modalForWindow;\r\n};\r\n\r\nSDL.Client.Models.MessageCenter.Message.prototype.expire = function SDL$Client$Models$MessageCenter$Message$expire()\r\n{\r\n\tvar p = this.properties;\r\n\tp.timeoutObj = null;\r\n\tSDL.Client.MessageCenter.executeAction(p.id, \"archive\");\r\n};\r\n\r\nSDL.Client.Models.MessageCenter.Message.prototype.archive = function SDL$Client$Models$MessageCenter$Message$archive()\r\n{\r\n\tvar p = this.properties;\r\n\tif (this.isActive())\r\n\t{\r\n\t\tp.active = false;\r\n\t\tp.options.targetWindow = undefined;\r\n\t\tif (p.timeoutObj)\r\n\t\t{\r\n\t\t\tclearTimeout(p.timeoutObj);\r\n\t\t\tp.timeoutObj = null;\r\n\t\t}\r\n\t\tthis.fireEvent(\"archive\");\r\n\t}\r\n};\r\n\r\nSDL.Client.Models.MessageCenter.Message.prototype.getActions = function SDL$Client$Models$MessageCenter$Message$getActions()\r\n{\r\n\treturn this.properties.actions;\r\n};\r\n\r\nSDL.Client.Models.MessageCenter.Message.prototype.addAction = function SDL$Client$Models$MessageCenter$Message$addAction(action, name, options, position)\r\n{\r\n\tSDL.Client.Types.Array.insert(this.properties.actions, {\r\n\t\t\taction: action,\r\n\t\t\tname: name,\r\n\t\t\toptions: SDL.Client.Types.Object.clone(options)\r\n\t\t}, position);\r\n};\r\n\r\nSDL.Client.Models.MessageCenter.Message.prototype.populateActions = function SDL$Client$Models$MessageCenter$Message$populateActions()\r\n{\r\n\t// Add needed actions in derived class\r\n};\r\n\r\nSDL.Client.Models.MessageCenter.Message.prototype.clearActions = function SDL$Client$Models$MessageCenter$Message$clearActions()\r\n{\r\n\tthis.properties.actions = [];\r\n};\r\n\r\nSDL.Client.Models.MessageCenter.Message.prototype.setOption = function SDL$Client$Models$MessageCenter$Message$setOption(name, value)\r\n{\r\n\tif (name \u0026\u0026 (value == null || SDL.Client.Type.isString(value) || SDL.Client.Type.isNumber(value) || SDL.Client.Type.isBoolean(value)))\r\n\t{\r\n\t\tthis.properties.options[name] = value;\r\n\t}\r\n};\r\n\r\nSDL.Client.Models.MessageCenter.Message.prototype.getOption = function SDL$Client$Models$MessageCenter$Message$getOption(name)\r\n{\r\n\treturn this.properties.options[name];\r\n};\r\n\r\n//------- SDL.Client.Models.MarshallableObject methods implementations/overrides\r\nSDL.Client.Models.MessageCenter.Message.prototype.pack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$MessageCenter$Message$pack()\r\n{\r\n\tvar p = this.properties;\r\n\treturn {\r\n\t\tid: p.id,\r\n\t\ttitle: p.title, \r\n\t\tdescription: p.description,\r\n\t\tactive: p.inactive,\r\n\t\tactions: p.actions,\r\n\t\tmaxAge: p.maxAge,\r\n\t\tdate: p.date.getTime(),\r\n\t\toptions: p.options\r\n\t};\r\n});\r\n\r\nSDL.Client.Models.MessageCenter.Message.prototype.unpack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$MessageCenter$Message$unpack(data)\r\n{\r\n\tvar p = this.properties;\r\n\tif (data)\r\n\t{\r\n\t\tp.id = data.id;\r\n\t\tp.title = data.title;\r\n\t\tp.description = data.description;\r\n\t\tp.active = data.active;\r\n\t\tp.maxAge = data.maxAge;\r\n\t\tp.date = new Date(data.date);\r\n\t\tp.options = SDL.Client.Types.Object.clone(data.options);\r\n\r\n\t\tvar actions = data.actions;\r\n\t\tfor (var i = 0, len = actions.length; i \u003c len; i++)\r\n\t\t{\r\n\t\t\tvar action = actions[i];\r\n\t\t\tp.actions[i] =\r\n\t\t\t{\r\n\t\t\t\taction: action.action,\r\n\t\t\t\tdescription: action.description,\r\n\t\t\t\toptions: SDL.Client.Types.Object.clone(data.options)\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n});\r\n\r\nSDL.Client.Models.MessageCenter.Message.prototype.afterInitializeMarshalledObject = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$MessageCenter$Message$afterInitializeMarshalledObject(object)\r\n{\r\n\tvar p = this.properties;\r\n\tif (p.active \u0026\u0026 SDL.Client.Type.isNumber(p.maxAge))\r\n\t{\r\n\t\tvar date = new Date();\r\n\r\n\t\tp.maxAge = p.maxAge - (date.getTime() - p.date.getTime());\r\n\t\tp.date = date;\r\n\t\tp.expireTimeout = setTimeout(this.getDelegate(this.expire), p.maxAge \u003e 1000 ? p.maxAge : 1000);\r\n\t}\r\n});\r\n//------- end of SDL.Client.Models.MarshallableObject overrides"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Models/MessageCenter/Message.js");
	globalEval(/*FILE-BEGIN*/"/*! @namespace {SDL.Client.Models.MessageCenter.NotificationMessage} */\r\nSDL.Client.Types.OO.createInterface(\"SDL.Client.Models.MessageCenter.NotificationMessage\");\r\n\r\nSDL.Client.Models.MessageCenter.NotificationMessage.$constructor = function SDL$Client$Models$MessageCenter$NotificationMessage$constructor(title, description, options)\r\n{\r\n\tthis.addInterface(\"SDL.Client.Models.MessageCenter.Message\", [title, description, options]);\r\n\tthis.properties.messageType = SDL.Client.MessageCenter.MessageType.NOTIFICATION;\r\n\r\n\tthis.properties.maxAge = 3000;\t// archive the message by default in 3 seconds\r\n};\r\n\r\nSDL.Client.MessageCenter.MessageTypesRegistry[SDL.Client.MessageCenter.MessageType.NOTIFICATION] = \"SDL.Client.Models.MessageCenter.NotificationMessage\";"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Models/MessageCenter/NotificationMessage.js");
	globalEval(/*FILE-BEGIN*/"/*! @namespace {SDL.Client.Models.MessageCenter.WarningMessage} */\r\nSDL.Client.Types.OO.createInterface(\"SDL.Client.Models.MessageCenter.WarningMessage\");\r\n\r\nSDL.Client.Models.MessageCenter.WarningMessage.$constructor = function SDL$Client$Models$MessageCenter$WarningMessage$constructor(title, description, options)\r\n{\r\n\tthis.addInterface(\"SDL.Client.Models.MessageCenter.Message\", [title, description, options]);\r\n\tthis.properties.messageType = SDL.Client.MessageCenter.MessageType.WARNING;\r\n\r\n\tthis.properties.maxAge = 10000;\t// archive the message by default in 10 seconds\r\n};\r\n\r\nSDL.Client.MessageCenter.MessageTypesRegistry[SDL.Client.MessageCenter.MessageType.WARNING] = \"SDL.Client.Models.MessageCenter.WarningMessage\";"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Models/MessageCenter/WarningMessage.js");
	globalEval(/*FILE-BEGIN*/"/*! @namespace {SDL.Client.Models.MessageCenter.ErrorMessage} */\r\nSDL.Client.Types.OO.createInterface(\"SDL.Client.Models.MessageCenter.ErrorMessage\");\r\n\r\nSDL.Client.Models.MessageCenter.ErrorMessage.$constructor = function SDL$Client$Models$MessageCenter$ErrorMessage$constructor(title, description, options)\r\n{\r\n\tthis.addInterface(\"SDL.Client.Models.MessageCenter.Message\", [title, description, options]);\r\n\tthis.properties.messageType = SDL.Client.MessageCenter.MessageType.ERROR;\r\n\r\n\tthis.properties.maxAge = 60000;\t// archive the message by default in 1 minute\r\n};\r\n\r\nSDL.Client.Models.MessageCenter.ErrorMessage.prototype.getDetails = function SDL$Client$Models$MessageCenter$ErrorMessage$getDetails()\r\n{\r\n\treturn this.properties.options.details;\r\n};\r\n\r\nSDL.Client.MessageCenter.MessageTypesRegistry[SDL.Client.MessageCenter.MessageType.ERROR] = \"SDL.Client.Models.MessageCenter.ErrorMessage\";"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Models/MessageCenter/ErrorMessage.js");
	globalEval(/*FILE-BEGIN*/"/*! @namespace {SDL.Client.Models.MessageCenter.QuestionMessage} */\r\nSDL.Client.Types.OO.createInterface(\"SDL.Client.Models.MessageCenter.QuestionMessage\");\r\n\r\nSDL.Client.Models.MessageCenter.QuestionMessage.$constructor = function SDL$Client$Models$MessageCenter$QuestionMessage$constructor(title, description, options)\r\n{\r\n\tthis.addInterface(\"SDL.Client.Models.MessageCenter.Message\", [title, description, options]);\r\n\tthis.properties.messageType = SDL.Client.MessageCenter.MessageType.QUESTION;\r\n};\r\n\r\nSDL.Client.Models.MessageCenter.QuestionMessage.prototype.populateActions = function SDL$Client$Models$MessageCenter$QuestionMessage$populateActions()\r\n{\r\n\tthis.callBase(\"SDL.Client.Models.MessageCenter.Message\", \"populateActions\");\r\n\t\r\n\tvar actionNames = this.properties.options.actionNames || {};\r\n\r\n\tthis.addAction(\"confirm\", actionNames[\"confirm\"] || \"Yes\");\r\n\tthis.addAction(\"cancel\", actionNames[\"cancel\"] || \"No\");\r\n};\r\n\r\nSDL.Client.Models.MessageCenter.QuestionMessage.prototype.confirm = function SDL$Client$Models$MessageCenter$QuestionMessage$confirm()\r\n{\r\n\tif (this.isActive())\r\n\t{\r\n\t\tthis.fireEvent(\"confirm\");\r\n\t\tSDL.Client.MessageCenter.executeAction(this.getId(), \"archive\");\r\n\t}\r\n};\r\n\r\nSDL.Client.Models.MessageCenter.QuestionMessage.prototype.cancel = function SDL$Client$Models$MessageCenter$QuestionMessage$cancel()\r\n{\r\n\tif (this.isActive())\r\n\t{\r\n\t\tthis.fireEvent(\"cancel\");\r\n\t\tSDL.Client.MessageCenter.executeAction(this.getId(), \"archive\");\r\n\t}\r\n};\r\n\r\nSDL.Client.MessageCenter.MessageTypesRegistry[SDL.Client.MessageCenter.MessageType.QUESTION] = \"SDL.Client.Models.MessageCenter.QuestionMessage\";"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Models/MessageCenter/QuestionMessage.js");
	globalEval(/*FILE-BEGIN*/"/*! @namespace {SDL.Client.Models.MessageCenter.GoalMessage} */\r\nSDL.Client.Types.OO.createInterface(\"SDL.Client.Models.MessageCenter.GoalMessage\");\r\n\r\nSDL.Client.Models.MessageCenter.GoalMessage.$constructor = function SDL$Client$Models$MessageCenter$GoalMessage$constructor(title, description, options)\r\n{\r\n\tthis.addInterface(\"SDL.Client.Models.MessageCenter.Message\", [title, description, options]);\r\n\tthis.properties.messageType = SDL.Client.MessageCenter.MessageType.GOAL;\r\n\r\n\tthis.properties.maxAge = 3000;\t// archive the message by default in 3 seconds\r\n};\r\n\r\nSDL.Client.MessageCenter.MessageTypesRegistry[SDL.Client.MessageCenter.MessageType.GOAL] = \"SDL.Client.Models.MessageCenter.GoalMessage\";"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Models/MessageCenter/GoalMessage.js");
	globalEval(/*FILE-BEGIN*/"/*! @namespace {SDL.Client.Models.MessageCenter.ProgressMessage} */\r\nSDL.Client.Types.OO.createInterface(\"SDL.Client.Models.MessageCenter.ProgressMessage\");\r\n\r\nSDL.Client.Models.MessageCenter.ProgressMessage.$constructor = function SDL$Client$Models$MessageCenter$ProgressMessage$constructor(title, description, options)\r\n{\r\n\tthis.addInterface(\"SDL.Client.Models.MessageCenter.Message\", [title, description, options]);\r\n\tthis.properties.messageType = SDL.Client.MessageCenter.MessageType.PROGRESS;\r\n\r\n\tvar p = this.properties;\r\n\tp.operationStopped;\r\n};\r\n\r\nSDL.Client.Models.MessageCenter.ProgressMessage.prototype.setTitle = function SDL$Client$Models$MessageCenter$ProgressMessage$setTitle(title)\r\n{\r\n\tvar p = this.properties;\r\n\tif (title != p.title)\r\n\t{\r\n\t\tthis.properties.title = title;\r\n\t\tthis.fireEvent(\"updatetitle\", { title: title });\r\n\t}\r\n};\r\n\r\nSDL.Client.Models.MessageCenter.ProgressMessage.prototype.populateActions = function SDL$Client$Models$MessageCenter$ProgressMessage$populateActions()\r\n{\r\n\tthis.callBase(\"SDL.Client.Models.MessageCenter.Message\", \"populateActions\");\r\n\t\r\n\tvar options = this.properties.options;\r\n\tif (options.canCancel)\r\n\t{\r\n\t\tvar actionNames = options.actionNames || {};\r\n\t\tthis.addAction(\"cancel\", actionNames[\"cancel\"] || \"Cancel\");\r\n\t}\r\n};\r\n\r\nSDL.Client.Models.MessageCenter.ProgressMessage.prototype.setContinuousIterationObject = function SDL$Client$Models$MessageCenter$ProgressMessage$setContinuousIterationObject(id)\r\n{\r\n    var $evt = SDL.Client.Event.EventRegister;\r\n\tvar item = SDL.Client.Models.getItem(id);\r\n\tif (item \u0026\u0026 SDL.Client.Types.OO.implementsInterface(item, \"SDL.Client.Models.Base.ContinuousIterationObject\"))\r\n\t{\r\n\t\tthis.properties.options.continuousObjectId = id;\r\n\r\n\t\t$evt.addEventHandler(item, \"update\", this.getDelegate(this._onUpdate));\r\n\t\t$evt.addEventHandler(item, \"error\", this.getDelegate(this._onError));\r\n\t}\r\n};\r\n\r\nSDL.Client.Models.MessageCenter.ProgressMessage.prototype.collectCounts = function SDL$Client$Models$MessageCenter$ProgressMessage$collectCounts(item)\r\n{\r\n\tvar options = this.properties.options;\r\n\tif (options.continuousObjectId)\r\n\t{\r\n\t\titem = item || SDL.Client.Models.getItem(options.continuousObjectId);\r\n\t\toptions.itemsCount = item.getItemsCount() || 0;\r\n\t\toptions.itemsDoneCount = item.getItemsDoneCount() || 0;\r\n\t\toptions.itemsFailedCount = item.getErrorsCount() || 0;\r\n\t}\r\n};\r\n\r\nSDL.Client.Models.MessageCenter.ProgressMessage.prototype.getItems = function SDL$Client$Models$MessageCenter$ProgressMessage$getItems()\r\n{\r\n\treturn this.properties.options.items;\r\n};\r\n\r\nSDL.Client.Models.MessageCenter.ProgressMessage.prototype.getItemsCount = function SDL$Client$Models$MessageCenter$ProgressMessage$getItemsCount()\r\n{\r\n\tvar options = this.properties.options;\r\n\tif (options.itemsCount != null)\r\n\t{\r\n\t\treturn options.itemsCount;\r\n\t}\r\n\telse if (options.continuousObjectId)\r\n\t{\r\n\t\tthis.collectCounts();\r\n\t\treturn options.itemsCount;\r\n\t}\r\n\telse if (options.items)\r\n\t{\r\n\t\treturn options.items.length;\r\n\t}\r\n};\r\n\r\nSDL.Client.Models.MessageCenter.ProgressMessage.prototype.getItemsDone = function SDL$Client$Models$MessageCenter$ProgressMessage$getItemsDone()\r\n{\r\n\treturn this.properties.options.itemsDone;\r\n};\r\n\r\nSDL.Client.Models.MessageCenter.ProgressMessage.prototype.getItemsDoneCount = function SDL$Client$Models$MessageCenter$ProgressMessage$getItemsDoneCount()\r\n{\r\n\tvar options = this.properties.options;\r\n\tif (options.itemsDoneCount != null)\r\n\t{\r\n\t\treturn options.itemsDoneCount;\r\n\t}\r\n\telse if (options.continuousObjectId)\r\n\t{\r\n\t\tthis.collectCounts();\r\n\t\treturn options.itemsDoneCount;\r\n\t}\r\n\telse if (options.itemsDone)\r\n\t{\r\n\t\treturn options.itemsDone.length;\r\n\t}\r\n};\r\n\r\nSDL.Client.Models.MessageCenter.ProgressMessage.prototype.getItemsFailed = function SDL$Client$Models$MessageCenter$ProgressMessage$getItemsFailed()\r\n{\r\n\treturn this.properties.options.itemsFailed;\r\n};\r\n\r\nSDL.Client.Models.MessageCenter.ProgressMessage.prototype.getItemsFailedCount = function SDL$Client$Models$MessageCenter$ProgressMessage$getItemsFailedCount()\r\n{\r\n\tvar options = this.properties.options;\r\n\tif (options.itemsFailedCount != null)\r\n\t{\r\n\t\treturn options.itemsFailedCount;\r\n\t}\r\n\telse if (options.continuousObjectId)\r\n\t{\r\n\t\tthis.collectCounts();\r\n\t\treturn options.itemsFailedCount;\r\n\t}\r\n\telse if (options.itemsFailed)\r\n\t{\r\n\t\treturn options.itemsFailed.length;\r\n\t}\r\n};\r\n\r\nSDL.Client.Models.MessageCenter.ProgressMessage.prototype.archive = function SDL$Client$Models$MessageCenter$ProgressMessage$archive()\r\n{\r\n    var $evt = SDL.Client.Event.EventRegister;\r\n\tthis.callBase(\"SDL.Client.Models.MessageCenter.Message\", \"archive\");\r\n\r\n\tvar id = this.properties.options.continuousObjectId;\r\n\tif (id)\r\n\t{\r\n\t\tvar obj = SDL.Client.Models.getItem(id);\r\n\t\tif (obj)\r\n\t\t{\r\n\t\t\t$evt.removeEventHandler(obj, \"update\", this.getDelegate(this._onUpdate));\r\n\t\t\t$evt.removeEventHandler(obj, \"error\", this.getDelegate(this._onError));\r\n\t\t}\r\n\t\tdelete p.processObjectId;\r\n\t}\r\n};\r\n\r\nSDL.Client.Models.MessageCenter.ProgressMessage.prototype.finish = function SDL$Client$Models$MessageCenter$ProgressMessage$finish(error)\r\n{\r\n\tif (this.isActive())\r\n\t{\r\n\t\tthis.fireEvent(success ? \"success\" : \"fail\");\r\n\t\tSDL.Client.MessageCenter.executeAction(this.getId(), \"archive\");\r\n\r\n\t\tif (!error)\r\n\t\t{\r\n\t\t\tvar options = this.properties.options;\r\n\t\t\tSDL.Client.MessageCenter.registerGoal(options.successMessageName || \"\", options.successMessageDescription || \"\",\r\n\t\t\t\t{\r\n\t\t\t\t\tlocalToWindow: options.localToWindow,\r\n\t\t\t\t\tactionNames: options.successActionNames\r\n\t\t\t\t});\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// error is passed\r\n\t\t}\r\n\t}\r\n};\r\n\r\nSDL.Client.Models.MessageCenter.ProgressMessage.prototype.cancel = function SDL$Client$Models$MessageCenter$ProgressMessage$cancel()\r\n{\r\n\tvar p = this.properties;\r\n\tvar options = p.options;\r\n\tif (options.canCancel \u0026\u0026 this.isActive())\r\n\t{\r\n\t\toptions.canCancel = false;\r\n\r\n\t\tif (!p.operationStopped)\r\n\t\t{\r\n\t\t\tthis.fireEvent(\"cancel\");\r\n\t\t\tif (options.continuousObjectId)\r\n\t\t\t{\r\n\t\t\t\tvar item = SDL.Client.Models.getItem(options.continuousObjectId);\r\n\t\t\t\tif (item \u0026\u0026 item.isActive())\r\n\t\t\t\t{\r\n\t\t\t\t\titem.stop();\r\n\t\t\t\t\tp.operationStopped = true;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.canceled();\r\n\t}\r\n};\r\n\r\nSDL.Client.Models.MessageCenter.ProgressMessage.prototype.canceled = function SDL$Client$Models$MessageCenter$ProgressMessage$canceled()\r\n{\r\n\tif (this.isActive())\r\n\t{\r\n\t\tvar p = this.properties;\r\n\t\tif (!p.operationStopped)\r\n\t\t{\r\n\t\t\tthis.fireEvent(\"cancel\");\r\n\t\t}\r\n\r\n\t\tSDL.Client.MessageCenter.executeAction(this.getId(), \"archive\");\r\n\r\n\t\tvar options = p.options;\r\n\r\n\t\tSDL.Client.MessageCenter.registerGoal(options.cancelMessageName || \"\", options.cancelMessageDescription || \"\",\r\n\t\t\t{\r\n\t\t\t\tlocalToWindow: options.localToWindow,\r\n\t\t\t\tactionNames: options.cancelActionNames\r\n\t\t\t});\r\n\t}\r\n};\r\n\r\nSDL.Client.Models.MessageCenter.ProgressMessage.prototype._onUpdate = function SDL$Client$Models$MessageCenter$ProgressMessage$_onUpdate(event)\r\n{\r\n\tvar item = event.target;\r\n\tif (item)\r\n\t{\r\n\t\tvar options = this.properties.options;\r\n\t\toptions.itemsCount = options.itemsDoneCount = options.itemsFailedCount = null;\r\n\r\n\t\tif (item.isActive())\r\n\t\t{\r\n\t\t\tthis.fireEvent(\"update\");\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.collectCounts(item);\r\n\t\t\tif (options.itemsDoneCount != options.itemsCount)\r\n\t\t\t{\r\n\t\t\t\tthis.canceled();\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tSDL.Client.MessageCenter.executeAction(this.getId(), \"finish\", item.getErrorDetails());\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n\r\nSDL.Client.Models.MessageCenter.ProgressMessage.prototype._onError = function ProgressMessage$_onError(event)\r\n{\r\n\tSDL.Client.MessageCenter.executeAction(this.getId(), \"finish\", event.data.error);\r\n};\r\n\r\n//------- SDL.Client.Models.MarshallableObject methods implementations/overrides\r\nSDL.Client.Models.MessageCenter.ProgressMessage.prototype.pack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$MessageCenter$ProgressMessage$pack()\r\n{\r\n\tvar p = this.properties;\r\n\treturn {\r\n\t\toperationStopped: p.operationStopped\r\n\t};\r\n});\r\n\r\nSDL.Client.Models.MessageCenter.ProgressMessage.prototype.unpack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$MessageCenter$ProgressMessage$unpack(data)\r\n{\r\n\tvar p = this.properties;\r\n\tif (data)\r\n\t{\r\n\t\tp.operationStopped = data.operationStopped;\r\n\t}\r\n});\r\n\r\nSDL.Client.Models.MessageCenter.ProgressMessage.prototype.afterInitializeMarshalledObject = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$MessageCenter$ProgressMessage$afterInitializeMarshalledObject(object)\r\n{\r\n\tvar p = this.properties;\r\n\tif (p.options)\r\n\t{\r\n\t\tp.options.item = SDL.Client.Types.Object.clone(p.options.item);\r\n\t\tp.options.itemsDone = SDL.Client.Types.Object.clone(p.options.itemsDone);\r\n\t\tp.options.itemsFailed = SDL.Client.Types.Object.clone(p.options.itemsFailed);\r\n\t\tp.options.actionNames = SDL.Client.Types.Object.clone(p.options.actionNames);\r\n\t\tp.options.successActionNames = SDL.Client.Types.Object.clone(p.options.successActionNames);\r\n\t\tp.options.cancelActionNames = SDL.Client.Types.Object.clone(p.options.cancelActionNames);\r\n\t}\r\n});\r\n//------- end of SDL.Client.Models.MarshallableObject overrides\r\n\r\nSDL.Client.MessageCenter.MessageTypesRegistry[SDL.Client.MessageCenter.MessageType.PROGRESS] = \"SDL.Client.Models.MessageCenter.ProgressMessage\";"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl.replace(/([^\/]+\/){1}$/, '') : defaultLocation) + "Models/MessageCenter/ProgressMessage.js");
})();