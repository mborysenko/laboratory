/*SDL-PACKAGE*/
var SDL;
(function()
{
	var packageContextUrl;
	var defaultLocation = location.protocol + '//' + location.host + '/';
	if (SDL && SDL.Client && SDL.Client.Resources && SDL.Client.Resources.executingPackageUrl)
	{
		packageContextUrl = SDL.Client.Resources.executingPackageUrl.replace(/[^\/]*$/, '');
		SDL.Client.Resources.executingPackageUrl = null;
	}
	else
	{
		var scripts = document.getElementsByTagName('script');
		for (var i = 0, len = scripts.length; i < len; i++)
		{
			var script = scripts[i];
			var src = script.src;
			if (src)
			{
				if (script.getAttribute('data-package-name') == 'application')
				{
					packageContextUrl = src.replace(/[^\/]*$/, '');
					break;
				}
				else if (!packageContextUrl &&
					src.slice(-15).toLowerCase() == '/application.js')
				{
					packageContextUrl = src.slice(0, -14);
				}
			}
		}
	}

	var globalEval = eval;
	globalEval(/*FILE-BEGIN*/"var SDL;\r\n(function (SDL) {\r\n    (function (Client) {\r\n        (function (Types) {\r\n            /**\r\n            *\timplemented in SDL.Client.HostedApplication, copied to SDL.Client.Core\r\n            **/\r\n            (function (Url) {\r\n                function isSameDomain(url1, url2) {\r\n                    if (url1 \u0026\u0026 url2) {\r\n                        var m1 = url1.toLowerCase().match(/^(https?):\\/{2,}([^\\/:]+)(:(\\d+))?/);\r\n                        var m2 = url2.toLowerCase().match(/^(https?):\\/{2,}([^\\/:]+)(:(\\d+))?/);\r\n                        if (m1 \u0026\u0026 m2) {\r\n                            return (m1[1] == m2[1] \u0026\u0026 m1[2] == m2[2] \u0026\u0026 (m1[4] == m2[4] || (m1[4] == null \u0026\u0026 m2[4] == (m2[1] == \"http\" ? \"80\" : \"443\")) || (m2[4] == null \u0026\u0026 m1[4] == (m1[1] == \"http\" ? \"80\" : \"443\"))));\r\n                        }\r\n                    }\r\n                    return false;\r\n                }\r\n                Url.isSameDomain = isSameDomain;\r\n\r\n                function getDomain(url) {\r\n                    if (url != null) {\r\n                        var m = url.toString().match(/^[\\w]+:\\/{2,}[^\\/?#]*/);\r\n                        return m ? m[0] : \"\";\r\n                    }\r\n                }\r\n                Url.getDomain = getDomain;\r\n                ;\r\n            })(Types.Url || (Types.Url = {}));\r\n            var Url = Types.Url;\r\n        })(Client.Types || (Client.Types = {}));\r\n        var Types = Client.Types;\r\n    })(SDL.Client || (SDL.Client = {}));\r\n    var Client = SDL.Client;\r\n})(SDL || (SDL = {}));\r\n//# sourceMappingURL=Url1.js.map\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl : defaultLocation) + "Types/Url1.js");
	globalEval(/*FILE-BEGIN*/"/// \u003creference path=\"../Types/Url1.ts\" /\u003e\r\nvar SDL;\r\n(function (SDL) {\r\n    (function (Client) {\r\n        /**\r\n        *\timplemented in SDL.Client.HostedApplication, copied to SDL.Client.Core\r\n        **/\r\n        (function (CrossDomainMessaging) {\r\n            var reqId = new Date().getTime();\r\n            var callbacks = {};\r\n            var trustedDomains = [Client.Types.Url.getDomain(window.location.href)];\r\n            var allowedHandlerBases;\r\n            var parentXdm = undefined;\r\n\r\n            function addTrustedDomain(url) {\r\n                if (trustedDomains[0] != \"*\") {\r\n                    if (url == \"*\") {\r\n                        trustedDomains = [\"*\"];\r\n                    } else {\r\n                        for (var i = 0, len = trustedDomains.length; i \u003c len; i++) {\r\n                            if (Client.Types.Url.isSameDomain(trustedDomains[i], url)) {\r\n                                return;\r\n                            }\r\n                        }\r\n                        trustedDomains.push(url);\r\n                    }\r\n                }\r\n            }\r\n            CrossDomainMessaging.addTrustedDomain = addTrustedDomain;\r\n\r\n            function clearTrustedDomains() {\r\n                trustedDomains = [];\r\n            }\r\n            CrossDomainMessaging.clearTrustedDomains = clearTrustedDomains;\r\n\r\n            function addAllowedHandlerBase(handler) {\r\n                if (!allowedHandlerBases) {\r\n                    allowedHandlerBases = [handler];\r\n                } else {\r\n                    allowedHandlerBases.push(handler);\r\n                }\r\n            }\r\n            CrossDomainMessaging.addAllowedHandlerBase = addAllowedHandlerBase;\r\n\r\n            function call(target, method, args, callback) {\r\n                if (args) {\r\n                    for (var i = 0, len = args.length; i \u003c len; i++) {\r\n                        if (typeof (args[i]) == \"function\") {\r\n                            var callbackId = (++reqId);\r\n                            callbacks[callbackId.toString()] = args[i];\r\n                            args[i] = {\r\n                                __callbackId: callbackId\r\n                            };\r\n                        }\r\n                    }\r\n                }\r\n\r\n                var obj = {\r\n                    method: method,\r\n                    args: args\r\n                };\r\n\r\n                if (callback) {\r\n                    obj.reqId = (++reqId);\r\n                    callbacks[obj.reqId.toString()] = callback;\r\n                }\r\n\r\n                _postMessage(target, obj);\r\n            }\r\n            CrossDomainMessaging.call = call;\r\n            function executeMessage(message, source, origin) {\r\n                if (message) {\r\n                    var execute;\r\n                    if (message.method) {\r\n                        var parts = message.method.split(\".\");\r\n                        var lastIdx = parts.length - 1;\r\n                        var base = window;\r\n                        for (var i = 0; (i \u003c lastIdx) \u0026\u0026 base; i++) {\r\n                            base = base[parts[i]];\r\n                        }\r\n\r\n                        if (!base) {\r\n                            throw Error(\"XDM: Unable to evaluate \" + message.method);\r\n                        } else if (!base[parts[lastIdx]]) {\r\n                            throw Error(\"XDM: Unable to evaluate \" + message.method + \". Method \u0027\" + parts[lastIdx] + \"\u0027 is not defined.\");\r\n                        } else if (!allowedHandlerBases || allowedHandlerBases.indexOf(base) == -1) {\r\n                            throw Error(\"XDM: Access denied to \" + message.method);\r\n                        } else {\r\n                            var result;\r\n                            var args = message.args;\r\n\r\n                            if (args) {\r\n                                for (var i = 0, len = args.length; i \u003c len; i++) {\r\n                                    if (args[i] \u0026\u0026 args[i].__callbackId) {\r\n                                        args[i] = _createCallback(source, origin, args[i].__callbackId);\r\n                                    }\r\n                                }\r\n\r\n                                execute = function () {\r\n                                    return base[parts[lastIdx]].apply(base, message.args);\r\n                                };\r\n                            } else {\r\n                                execute = function () {\r\n                                    return base[parts[lastIdx]]();\r\n                                };\r\n                            }\r\n\r\n                            execute.sourceWindow = source;\r\n                            execute.sourceDomain = Client.Types.Url.getDomain(origin);\r\n\r\n                            result = execute();\r\n\r\n                            if (message.reqId) {\r\n                                _postMessage(source, {\r\n                                    respId: message.reqId,\r\n                                    args: [result] }, origin);\r\n                            }\r\n                        }\r\n                    } else if (message.respId) {\r\n                        var callback = callbacks[message.respId.toString()];\r\n                        if (callback) {\r\n                            if (message.retire != false) {\r\n                                delete callbacks[message.respId.toString()];\r\n                            }\r\n                            if (message.execute != false) {\r\n                                execute = function () {\r\n                                    callback.apply(window, message.args || []);\r\n                                };\r\n                                execute.sourceWindow = source;\r\n                                execute.sourceDomain = Client.Types.Url.getDomain(origin);\r\n                                execute();\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            CrossDomainMessaging.executeMessage = executeMessage;\r\n\r\n            function _postMessage(target, message, origin) {\r\n                if (!origin) {\r\n                    origin = trustedDomains.length == 1 ? trustedDomains[0] : \"*\";\r\n                }\r\n\r\n                var remoteXdm;\r\n\r\n                if (origin == \"*\") {\r\n                    if (target == window.parent) {\r\n                        if (parentXdm === undefined) {\r\n                            try  {\r\n                                parentXdm = target.SDL.Client.CrossDomainMessaging;\r\n                            } catch (err) {\r\n                                parentXdm = null;\r\n                            }\r\n                        }\r\n\r\n                        remoteXdm = parentXdm;\r\n                    }\r\n                } else if (Client.Types.Url.isSameDomain(origin, window.location.href)) {\r\n                    try  {\r\n                        remoteXdm = target.SDL.Client.CrossDomainMessaging;\r\n                    } catch (err) {\r\n                    }\r\n                }\r\n\r\n                if (remoteXdm) {\r\n                    remoteXdm.executeMessage(message, window, window.location.href);\r\n                } else {\r\n                    target.postMessage(\"sdl:\" + window.JSON.stringify(message), origin);\r\n                }\r\n            }\r\n\r\n            function _createCallback(target, domain, callbackId) {\r\n                var fnc = function () {\r\n                    _postMessage(target, {\r\n                        respId: callbackId,\r\n                        retire: !fnc.reoccuring,\r\n                        args: [].slice.call(arguments) }, domain);\r\n                };\r\n                fnc.retire = function () {\r\n                    _postMessage(target, {\r\n                        respId: callbackId,\r\n                        execute: false,\r\n                        retire: true }, domain);\r\n                };\r\n                return fnc;\r\n            }\r\n\r\n            function _messageHandler(e) {\r\n                if (e \u0026\u0026 e.data \u0026\u0026 e.data.length \u003e 4 \u0026\u0026 e.data.indexOf(\"sdl:\") == 0) {\r\n                    var allowed = trustedDomains[0] == \"*\";\r\n                    if (!allowed) {\r\n                        for (var i = 0, len = trustedDomains.length; i \u003c len; i++) {\r\n                            if (Client.Types.Url.isSameDomain(trustedDomains[i], e.origin)) {\r\n                                allowed = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (allowed) {\r\n                        executeMessage(window.JSON.parse(e.data.slice(4)), e.source, e.origin);\r\n                    }\r\n                }\r\n            }\r\n\r\n            window.addEventListener(\"message\", _messageHandler);\r\n        })(Client.CrossDomainMessaging || (Client.CrossDomainMessaging = {}));\r\n        var CrossDomainMessaging = Client.CrossDomainMessaging;\r\n    })(SDL.Client || (SDL.Client = {}));\r\n    var Client = SDL.Client;\r\n})(SDL || (SDL = {}));\r\n//# sourceMappingURL=CrossDomainMessaging.js.map\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl : defaultLocation) + "CrossDomainMessaging/CrossDomainMessaging.js");
	globalEval(/*FILE-BEGIN*/"/// \u003creference path=\"../../SDL.Client.Core/Resources/Resources.d.ts\" /\u003e\r\n/// \u003creference path=\"../Types/Url1.ts\" /\u003e\r\n/// \u003creference path=\"../CrossDomainMessaging/CrossDomainMessaging.ts\" /\u003e\r\n/// \u003creference path=\"Application.ts\" /\u003e\r\nvar SDL;\r\n(function (SDL) {\r\n    (function (Client) {\r\n        /**\r\n        *\timplemented in SDL.Client.HostedApplication, copied to SDL.Client.Core\r\n        **/\r\n        (function (Application) {\r\n            ;\r\n\r\n            ;\r\n\r\n            ;\r\n\r\n            ;\r\n\r\n            var ApplicationHostProxyClass = (function () {\r\n                function ApplicationHostProxyClass() {\r\n                    this.handlers = {};\r\n                    this.supportedMethods = {\r\n                        // overwritten if ApplicationHost provides a different list\r\n                        applicationEntryPointLoaded: true,\r\n                        exposeApplicationFacade: true,\r\n                        applicationEntryPointUnloaded: true,\r\n                        setCulture: true,\r\n                        setActiveApplicationEntryPoint: true,\r\n                        setApplicationEntryPointUrl: true,\r\n                        callApplicationFacade: true,\r\n                        initializeApplicationSuite: true,\r\n                        resetApplicationSuite: true,\r\n                        resolveCommonLibraryResources: true,\r\n                        getCommonLibraryResources: true,\r\n                        getCommonLibraryResource: true\r\n                    };\r\n                }\r\n                ApplicationHostProxyClass.prototype.setCulture = function (culture) {\r\n                    this.call(\"setCulture\", [culture]);\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.applicationEntryPointLoaded = function (coreVersion, callback) {\r\n                    var _this = this;\r\n                    var _callback = function (data) {\r\n                        if (data) {\r\n                            _this.version = data.version;\r\n                            _this.libraryVersionSupported = data.libraryVersionSupported;\r\n                            _this.activeApplicationEntryPointId = data.activeApplicationEntryPointId;\r\n                            _this.activeApplicationId = data.activeApplicationId;\r\n                            _this.culture = data.culture;\r\n                            if (data.supportedMethods) {\r\n                                _this.supportedMethods = data.supportedMethods;\r\n                            }\r\n\r\n                            if (callback) {\r\n                                _callback.sourceDomain = arguments.callee.caller.sourceDomain;\r\n                                _callback.sourceWindow = arguments.callee.caller.sourceWindow;\r\n                                callback(data);\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                    this.call(\"applicationEntryPointLoaded\", [coreVersion, function (e) {\r\n                            _this.onHostEvent(e);\r\n                        }, _callback], _callback); // pass both result callback and the callback for asynchronous handling\r\n                    // async callback will not be triggered if the synchronous result data is returned\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.startCaptureDomEvents = function (events) {\r\n                    this.call(\"startCaptureDomEvents\", [events]);\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.stopCaptureDomEvents = function (events) {\r\n                    this.call(\"stopCaptureDomEvents\", [events]);\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.exposeApplicationFacade = function (applicationEntryPointId) {\r\n                    if (!this.isTrusted) {\r\n                        throw Error(\"Unable to expose application facade: application host is untrusted.\");\r\n                    }\r\n\r\n                    if (Application.isApplicationFacadeSecure === undefined) {\r\n                        Application.isApplicationFacadeSecure = true;\r\n                        this.call(\"exposeApplicationFacade\", [applicationEntryPointId]);\r\n                    } else if (!Application.isApplicationFacadeSecure) {\r\n                        throw Error(\"Application facade is already exposed as unsecure.\");\r\n                    }\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.exposeApplicationFacadeUnsecure = function (applicationEntryPointId) {\r\n                    if (Application.isApplicationFacadeSecure === undefined) {\r\n                        Application.isApplicationFacadeSecure = false;\r\n                        this.call(\"exposeApplicationFacade\", [applicationEntryPointId]);\r\n                    } else if (Application.isApplicationFacadeSecure) {\r\n                        throw Error(\"Application facade is already exposed as secure.\");\r\n                    }\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.applicationEntryPointUnloaded = function () {\r\n                    this.call(\"applicationEntryPointUnloaded\");\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.resolveCommonLibraryResources = function (resourceGroupName, callback) {\r\n                    if (this.isSupported(\"resolveCommonLibraryResourcesAsync\")) {\r\n                        this.call(\"resolveCommonLibraryResourcesAsync\", [resourceGroupName, callback]);\r\n                    } else {\r\n                        this.call(\"resolveCommonLibraryResources\", [resourceGroupName], callback);\r\n                    }\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.getCommonLibraryResources = function (files, version, onFileLoad, onFailure) {\r\n                    this.call(\"getCommonLibraryResources\", [files, version, onFileLoad, onFailure]);\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.getCommonLibraryResource = function (file, version, onSuccess, onFailure) {\r\n                    this.call(\"getCommonLibraryResource\", [file, version, onSuccess, onFailure]);\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.setActiveApplicationEntryPoint = function (applicationEntryPointId, applicationSuiteId) {\r\n                    this.call(\"setActiveApplicationEntryPoint\", [applicationEntryPointId, applicationSuiteId]);\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.setApplicationEntryPointUrl = function (applicationEntryPointId, url, applicationSuiteId) {\r\n                    if (!Application.ApplicationHost.isTrusted) {\r\n                        throw Error(\"Unable to set application entry point Url: application host is untrusted.\");\r\n                    }\r\n\r\n                    if (applicationSuiteId \u0026\u0026 applicationSuiteId != Application.applicationSuiteId \u0026\u0026 (Application.trustedApplications ? (applicationSuiteId != Application.applicationSuiteId \u0026\u0026 Application.trustedApplications.indexOf(applicationSuiteId) == -1) : !Application.trustedApplicationDomains)) {\r\n                        throw Error(\"Unable to set application entry point Url: application \\\"\" + applicationSuiteId + \"\\\" is untrusted.\");\r\n                    }\r\n\r\n                    this.call(\"setApplicationEntryPointUrl\", [\r\n                        applicationEntryPointId, url, applicationSuiteId,\r\n                        Application.trustedApplicationDomains ? this.getWithLocalDomain(Application.trustedApplicationDomains) : null]);\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.setApplicationEntryPointUrlUnsecure = function (applicationEntryPointId, url, applicationSuiteId) {\r\n                    this.call(\"setApplicationEntryPointUrl\", [applicationEntryPointId, url, applicationSuiteId]);\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.updateTargetDisplayUrlUnsecure = function (url) {\r\n                    this.call(\"updateTargetDisplayUrl\", [url]);\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.callApplicationFacade = function (applicationEntryPointId, method, args, callback, applicationSuiteId) {\r\n                    if (!Application.ApplicationHost.isTrusted) {\r\n                        throw Error(\"Unable to call application facade: application host is untrusted.\");\r\n                    }\r\n\r\n                    if (applicationSuiteId \u0026\u0026 applicationSuiteId != Application.applicationSuiteId \u0026\u0026 (Application.trustedApplications ? (applicationSuiteId != Application.applicationSuiteId \u0026\u0026 Application.trustedApplications.indexOf(applicationSuiteId) == -1) : !Application.trustedApplicationDomains)) {\r\n                        throw Error(\"Unable to call application facade: application \\\"\" + applicationSuiteId + \"\\\" is untrusted.\");\r\n                    }\r\n\r\n                    this.call(\"callApplicationFacade\", [\r\n                        applicationEntryPointId, method, args, callback, applicationSuiteId,\r\n                        Application.trustedApplicationDomains ? this.getWithLocalDomain(Application.trustedApplicationDomains) : null]);\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.callApplicationFacadeUnsecure = function (applicationEntryPointId, method, args, callback, applicationSuiteId) {\r\n                    this.call(\"callApplicationFacade\", [applicationEntryPointId, method, args, callback, applicationSuiteId]);\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.initializeApplicationSuite = function (includeApplicationEntryPointIds, excludeApplicationEntryPointIds, domainDefinitions) {\r\n                    this.call(\"initializeApplicationSuite\", [includeApplicationEntryPointIds, excludeApplicationEntryPointIds, domainDefinitions]);\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.resetApplicationSuite = function () {\r\n                    this.call(\"resetApplicationSuite\");\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.storeApplicationData = function (key, data) {\r\n                    if (!Application.ApplicationHost.isTrusted) {\r\n                        throw Error(\"Unable to store application data: application host is untrusted.\");\r\n                    }\r\n                    this.call(\"storeApplicationData\", [key, data]);\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.storeApplicationSessionData = function (key, data) {\r\n                    if (!Application.ApplicationHost.isTrusted) {\r\n                        throw Error(\"Unable to store application session data: application host is untrusted.\");\r\n                    }\r\n                    this.call(\"storeApplicationSessionData\", [key, data]);\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.getApplicationData = function (key, callback) {\r\n                    if (!Application.ApplicationHost.isTrusted) {\r\n                        throw Error(\"Unable to get application data: application host is untrusted.\");\r\n                    }\r\n\r\n                    if (this.isSupported(\"getApplicationDataAsync\")) {\r\n                        this.call(\"getApplicationDataAsync\", [key, callback]);\r\n                    } else {\r\n                        this.call(\"getApplicationData\", [key], callback);\r\n                    }\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.getApplicationSessionData = function (key, callback) {\r\n                    if (!Application.ApplicationHost.isTrusted) {\r\n                        throw Error(\"Unable to get application session data: application host is untrusted.\");\r\n                    }\r\n\r\n                    if (this.isSupported(\"getApplicationSessionDataAsync\")) {\r\n                        this.call(\"getApplicationSessionDataAsync\", [key, callback]);\r\n                    } else {\r\n                        this.call(\"getApplicationSessionData\", [key], callback);\r\n                    }\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.clearApplicationData = function () {\r\n                    if (!Application.ApplicationHost.isTrusted) {\r\n                        throw Error(\"Unable to clear application data: application host is untrusted.\");\r\n                    }\r\n                    this.call(\"clearApplicationData\");\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.clearApplicationSessionData = function () {\r\n                    if (!Application.ApplicationHost.isTrusted) {\r\n                        throw Error(\"Unable to clear application session data: application host is untrusted.\");\r\n                    }\r\n                    this.call(\"clearApplicationSessionData\");\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.removeApplicationData = function (key) {\r\n                    if (!Application.ApplicationHost.isTrusted) {\r\n                        throw Error(\"Unable to remove application data: application host is untrusted.\");\r\n                    }\r\n                    this.call(\"removeApplicationData\", [key]);\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.removeApplicationSessionData = function (key) {\r\n                    if (!Application.ApplicationHost.isTrusted) {\r\n                        throw Error(\"Unable to remove application session data: application host is untrusted.\");\r\n                    }\r\n                    this.call(\"removeApplicationSessionData\", [key]);\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.triggerAnalyticsEvent = function (event, object) {\r\n                    if (this.isSupported(\"triggerAnalyticsEvent\")) {\r\n                        this.call(\"triggerAnalyticsEvent\", [event, object]);\r\n                    }\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.showTopBar = function () {\r\n                    this.call(\"showTopBar\");\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.setTopBarOptions = function (options) {\r\n                    this.call(\"setTopBarOptions\", [options]);\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.addEventListener = function (event, handler) {\r\n                    if (this.handlers) {\r\n                        var e = this.handlers[event];\r\n                        if (!e) {\r\n                            e = this.handlers[event] = [];\r\n                        }\r\n                        e.push({ fnc: handler });\r\n                    }\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.removeEventListener = function (event, handler) {\r\n                    if (this.handlers) {\r\n                        var e = this.handlers[event];\r\n                        if (e) {\r\n                            var len = e.length;\r\n                            for (var i = 0; i \u003c len; i++) {\r\n                                if (e[i].fnc == handler) {\r\n                                    if (len == 1) {\r\n                                        delete this.handlers[event];\r\n                                    } else {\r\n                                        for (var j = i + 1; j \u003c len; j++) {\r\n                                            e[j - 1] = e[j];\r\n                                        }\r\n                                        e.pop();\r\n                                    }\r\n                                    return;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.fireEvent = function (eventType, eventData) {\r\n                    if (this.handlers) {\r\n                        var eventObj = {\r\n                            type: eventType,\r\n                            target: this,\r\n                            data: eventData\r\n                        };\r\n\r\n                        this._processHandlers(eventObj, eventType);\r\n                        this._processHandlers(eventObj, \"*\");\r\n                    }\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.isSupported = function (method) {\r\n                    return this.supportedMethods[method] || false;\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.call = function (method, args, callback) {\r\n                    if (this.isSupported(method)) {\r\n                        Client.CrossDomainMessaging.call(window.parent, \"SDL.Client.ApplicationHost.ApplicationHostFacade.\" + method, args, callback);\r\n                    } else {\r\n                        throw Error(\"ApplicationHost (ver. \" + this.version + \") does not support method \\\"\" + method + \"\\\".\");\r\n                    }\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.onHostEvent = function (e) {\r\n                    switch (e.type) {\r\n                        case \"culturechange\":\r\n                            this.culture = e.data.culture;\r\n                            break;\r\n                        case \"applicationentrypointactivate\":\r\n                            this.activeApplicationEntryPointId = e.data.applicationEntryPointId;\r\n                            this.activeApplicationId = e.data.applicationId;\r\n                            break;\r\n                    }\r\n                    this.fireEvent(e.type, e.data);\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype.getWithLocalDomain = function (domains) {\r\n                    var localDomain = Client.Types.Url.getDomain(window.location.href);\r\n                    if (!domains) {\r\n                        return [localDomain];\r\n                    } else {\r\n                        for (var i = 0, len = domains.length; i \u003c len; i++) {\r\n                            if (Client.Types.Url.isSameDomain(domains[i], localDomain)) {\r\n                                return domains;\r\n                            }\r\n                        }\r\n                        return domains.concat(localDomain);\r\n                    }\r\n                };\r\n\r\n                ApplicationHostProxyClass.prototype._processHandlers = function (eventObj, handlersCollectionName) {\r\n                    var handlers = this.handlers \u0026\u0026 this.handlers[handlersCollectionName];\r\n                    if (handlers) {\r\n                        var handlersClone = handlers.concat();\r\n                        for (var i = 0, len = handlersClone.length; i \u003c len \u0026\u0026 handlers; i++) {\r\n                            var handler = handlersClone[i];\r\n                            if (handlers.indexOf(handler) != -1) {\r\n                                handler.fnc.call(this, eventObj); // cannot cancel ApplicationHost events -\u003e ignore the return value\r\n                                handlers = this.handlers \u0026\u0026 this.handlers[handlersCollectionName];\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n                return ApplicationHostProxyClass;\r\n            })();\r\n            Application.ApplicationHostProxyClass = ApplicationHostProxyClass;\r\n        })(Client.Application || (Client.Application = {}));\r\n        var Application = Client.Application;\r\n    })(SDL.Client || (SDL.Client = {}));\r\n    var Client = SDL.Client;\r\n})(SDL || (SDL = {}));\r\n//# sourceMappingURL=ApplicationHost.js.map\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl : defaultLocation) + "Application/ApplicationHost.js");
	globalEval(/*FILE-BEGIN*/"/// \u003creference path=\"../../SDL.Client.Core/Resources/Resources.d.ts\" /\u003e\r\n/// \u003creference path=\"../../SDL.Client.Core/Libraries/jQuery/jQuery.d.ts\" /\u003e\r\n/// \u003creference path=\"../../SDL.Client.UI.Core.Knockout/Libraries/Knockout/knockout.d.ts\" /\u003e\r\n/// \u003creference path=\"../Types/Url1.ts\" /\u003e\r\n/// \u003creference path=\"../CrossDomainMessaging/CrossDomainMessaging.ts\" /\u003e\r\n/// \u003creference path=\"ApplicationHost.ts\" /\u003e\r\n/// \u003creference path=\"ApplicationFacade.ts\" /\u003e\r\nvar SDL;\r\n(function (SDL) {\r\n    (function (Client) {\r\n        /**\r\n        *\timplemented in SDL.Client.HostedApplication, copied to SDL.Client.Core\r\n        **/\r\n        (function (Application) {\r\n            Application.defaultApplicationEntryPointId;\r\n            Application.defaultApplicationSuiteId;\r\n            Application.isHosted;\r\n            Application.applicationSuiteId;\r\n            Application.isReloading;\r\n            Application.applicationHostUrl;\r\n            Application.applicationHostCorePath;\r\n            Application.defaultApplicationHostUrl;\r\n            Application.trustedApplicationHostDomains;\r\n            Application.trustedApplications;\r\n            Application.trustedApplicationDomains;\r\n            Application.ApplicationHost;\r\n            Application.useHostedLibraryResources = true;\r\n            Application.libraryVersion;\r\n            Application.sharedSettings;\r\n            Application.isInitialized = false;\r\n\r\n            var _isInitialized = false;\r\n            var isReady = false;\r\n\r\n            Application.initCallbacks;\r\n            Application.readyCallbacks;\r\n\r\n            var _initCallbacks = Application.initCallbacks ? Application.initCallbacks.concat() : null;\r\n            var _readyCallbacks = Application.readyCallbacks ? Application.readyCallbacks.concat() : null;\r\n\r\n            var filesToRender = [];\r\n            var allResources = [];\r\n            var renderedResources = [];\r\n            var resolveResourcesCallbacks = {};\r\n\r\n            function initialize(callback) {\r\n                addInitializeCallback(callback);\r\n\r\n                if (_isInitialized === false) {\r\n                    _isInitialized = undefined;\r\n                    initializeApplication();\r\n                }\r\n            }\r\n            Application.initialize = initialize;\r\n            ;\r\n\r\n            function addInitializeCallback(callback) {\r\n                if (callback) {\r\n                    if (_isInitialized) {\r\n                        callback();\r\n                    } else if (!Application.isReloading) {\r\n                        if (_initCallbacks) {\r\n                            _initCallbacks.push(callback);\r\n                        } else {\r\n                            _initCallbacks = [callback];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Application.addInitializeCallback = addInitializeCallback;\r\n            ;\r\n\r\n            function addReadyCallback(callback) {\r\n                if (callback) {\r\n                    if (isReady) {\r\n                        callback();\r\n                    } else if (!Application.isReloading) {\r\n                        if (_readyCallbacks) {\r\n                            _readyCallbacks.push(callback);\r\n                        } else {\r\n                            _readyCallbacks = [callback];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            Application.addReadyCallback = addReadyCallback;\r\n            ;\r\n\r\n            function setApplicationReady() {\r\n                if (!isReady) {\r\n                    isReady = true;\r\n                    if (_readyCallbacks) {\r\n                        for (var i = 0, len = _readyCallbacks.length; i \u003c len; i++) {\r\n                            _readyCallbacks[i]();\r\n                        }\r\n                        _readyCallbacks = null;\r\n                    }\r\n                }\r\n            }\r\n            Application.setApplicationReady = setApplicationReady;\r\n            ;\r\n\r\n            function exposeApplicationFacade() {\r\n                if (!Application.isHosted) {\r\n                    throw Error(\"Cannot expose Application facade: application is not hosted.\");\r\n                }\r\n                Application.ApplicationHost.exposeApplicationFacade(Application.defaultApplicationEntryPointId);\r\n            }\r\n            Application.exposeApplicationFacade = exposeApplicationFacade;\r\n            ;\r\n\r\n            function exposeApplicationFacadeUnsecure() {\r\n                if (!Application.isHosted) {\r\n                    throw Error(\"Cannot expose Application facade: application is not hosted.\");\r\n                }\r\n                Application.ApplicationHost.exposeApplicationFacadeUnsecure(Application.defaultApplicationEntryPointId);\r\n            }\r\n            Application.exposeApplicationFacadeUnsecure = exposeApplicationFacadeUnsecure;\r\n            ;\r\n\r\n            function registerResourceGroupRendered(resourceGroupName) {\r\n                if (renderedResources.indexOf(resourceGroupName) == -1) {\r\n                    if (allResources.indexOf(resourceGroupName) == -1) {\r\n                        allResources.push(resourceGroupName);\r\n                    }\r\n\r\n                    renderedResources.push(resourceGroupName);\r\n                }\r\n            }\r\n            Application.registerResourceGroupRendered = registerResourceGroupRendered;\r\n            ;\r\n\r\n            function loadLibraryResourceGroup(resourceGroupName, jQuery, knockout, callback) {\r\n                if (Client.Configuration) {\r\n                    Application.addReadyCallback(function () {\r\n                        Client.Resources.ResourceManager.load(resourceGroupName, callback);\r\n                    });\r\n                } else {\r\n                    if (!Application.isHosted) {\r\n                        throw Error(\"Unable to load library resources, application is not hosted.\");\r\n                    }\r\n\r\n                    if (!Application.ApplicationHost.isTrusted) {\r\n                        throw Error(\"Unable to load library resources, application host is not trusted.\");\r\n                    }\r\n\r\n                    registerResourceGroupRendered(\"SDL.Client.Types.Url1\");\r\n                    registerResourceGroupRendered(\"SDL.Client.CrossDomainMessaging\");\r\n                    registerResourceGroupRendered(\"SDL.Client.Application\");\r\n                    if (jQuery) {\r\n                        SDL.jQuery = jQuery;\r\n                        registerResourceGroupRendered(\"SDL.Client.Libraries.JQuery\");\r\n                    }\r\n\r\n                    if (knockout) {\r\n                        registerResourceGroupRendered(\"SDL.UI.Core.Knockout.Libraries.Knockout\");\r\n                    }\r\n\r\n                    Application.ApplicationHost.resolveCommonLibraryResources(resourceGroupName, function (resources) {\r\n                        if (resources \u0026\u0026 resources.length) {\r\n                            var filesToLoad = [];\r\n                            var resourceForCallback;\r\n\r\n                            for (var i = 0, len = resources.length; i \u003c len; i++) {\r\n                                var resourceName = resources[i].name;\r\n                                if (allResources.indexOf(resourceName) == -1) {\r\n                                    allResources.push(resourceName);\r\n                                    var files = resources[i].files;\r\n                                    if (files \u0026\u0026 files.length) {\r\n                                        var count = files.length;\r\n                                        for (var j = 0; j \u003c count; j++) {\r\n                                            filesToRender[filesToRender.length] = filesToLoad[filesToLoad.length] = { url: files[j] };\r\n                                        }\r\n                                        filesToRender[filesToRender.length - 1].resourceName = resourceName; // adding the name of the group to the last file of the resource group\r\n                                        resourceForCallback = resourceName;\r\n                                    } else {\r\n                                        // no files to render, mark group as rendered right away\r\n                                        renderedResources.push(resourceName);\r\n                                    }\r\n                                } else if (renderedResources.indexOf(resourceName) == -1) {\r\n                                    resourceForCallback = resourceName;\r\n                                }\r\n                            }\r\n\r\n                            if (resourceForCallback) {\r\n                                if (!resolveResourcesCallbacks[resourceForCallback]) {\r\n                                    resolveResourcesCallbacks[resourceForCallback] = [callback];\r\n                                } else {\r\n                                    resolveResourcesCallbacks[resourceForCallback].push(callback);\r\n                                }\r\n\r\n                                if (filesToLoad.length \u003e 0) {\r\n                                    Application.ApplicationHost.getCommonLibraryResources(filesToLoad, null, onFileLoaded, function (error) {\r\n                                        throw Error(error);\r\n                                    });\r\n                                }\r\n                                return;\r\n                            }\r\n                        }\r\n\r\n                        if (callback) {\r\n                            callback();\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            Application.loadLibraryResourceGroup = loadLibraryResourceGroup;\r\n\r\n            var fileToRenderIndex = 0;\r\n            function onFileLoaded(resource) {\r\n                var nextFile = filesToRender[fileToRenderIndex];\r\n                var url = resource.url;\r\n                if (nextFile \u0026\u0026 nextFile.url == url) {\r\n                    renderFile(url, resource.data, resource.context, nextFile.resourceName);\r\n                    fileToRenderIndex++;\r\n\r\n                    while (fileToRenderIndex \u003c filesToRender.length) {\r\n                        var fileToRender = filesToRender[fileToRenderIndex];\r\n                        var data = fileToRender.data;\r\n                        if (data != null) {\r\n                            renderFile(fileToRender.url, data, fileToRender.context, fileToRender.resourceName);\r\n                            filesToRender[fileToRenderIndex] = null;\r\n                            fileToRenderIndex++;\r\n                        } else {\r\n                            return;\r\n                        }\r\n                    }\r\n                } else {\r\n                    for (var i = fileToRenderIndex + 1; i \u003c filesToRender.length; i++) {\r\n                        var fileToRender = filesToRender[i];\r\n                        if (fileToRender.url == url) {\r\n                            fileToRender.data = resource.data || \"\";\r\n                            fileToRender.context = resource.context;\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            ;\r\n\r\n            var globalEval = eval;\r\n            function renderFile(url, data, context, resourceName) {\r\n                if (data) {\r\n                    if (url.slice(-3).toLowerCase() == \".js\") {\r\n                        data += (\"\\n//@ sourceURL=\" + Application.applicationHostCorePath + url.slice(2));\r\n                        if (context) {\r\n                            (function () {\r\n                                globalEval(arguments[0]);\r\n                            }).apply(globalEval(context), [data]);\r\n                        } else {\r\n                            globalEval(data);\r\n                        }\r\n                    } else if (url.slice(-4).toLowerCase() == \".css\") {\r\n                        var style = document.getElementById(\"sdl-styles\");\r\n                        if (!style) {\r\n                            style = document.createElement(\"style\");\r\n                            style.id = \"sdl-styles\";\r\n                            var head = document.getElementsByTagName(\"head\");\r\n                            (head[0] || document.body).appendChild(style);\r\n                        }\r\n                        var text = document.createTextNode(data);\r\n                        style.appendChild(text);\r\n                    }\r\n                }\r\n\r\n                if (resourceName) {\r\n                    renderedResources.push(resourceName);\r\n                    var calls = resolveResourcesCallbacks[resourceName];\r\n                    if (calls) {\r\n                        for (var i = 0, len = calls.length; i \u003c len; i++) {\r\n                            calls[i]();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            ;\r\n\r\n            function initializeApplication() {\r\n                var callbacks = function () {\r\n                    if (_initCallbacks) {\r\n                        for (var i = 0, len = _initCallbacks.length; i \u003c len; i++) {\r\n                            _initCallbacks[i]();\r\n                        }\r\n                        _initCallbacks = null;\r\n                    }\r\n                };\r\n\r\n                var hosted = (window.top != window);\r\n\r\n                if (hosted) {\r\n                    Client.CrossDomainMessaging.addTrustedDomain(\"*\");\r\n\r\n                    // notify the host the app is loaded, and see if the library version can be served by the host\r\n                    var timeout = window.setTimeout(function () {\r\n                        timeout = null;\r\n\r\n                        if (window.console) {\r\n                            console.log(\"No reply from application host after 1 second -\u003e setting isHosted = false\");\r\n                        }\r\n\r\n                        Application.isHosted = false;\r\n                        Application.useHostedLibraryResources = false;\r\n                        Application.isInitialized = _isInitialized = true;\r\n                        callbacks();\r\n                    }, 1000);\r\n\r\n                    var host = new Application.ApplicationHostProxyClass();\r\n                    var onUnload = function () {\r\n                        host.applicationEntryPointUnloaded();\r\n                        window.removeEventListener(\"unload\", onUnload);\r\n                        window.removeEventListener(\"hashchange\", updateTargetDisplayUrl);\r\n                    };\r\n                    window.addEventListener(\"unload\", onUnload);\r\n\r\n                    host.applicationEntryPointLoaded(Application.libraryVersion, function (data) {\r\n                        if (timeout) {\r\n                            window.clearTimeout(timeout);\r\n                            timeout = null;\r\n                        }\r\n\r\n                        Application.applicationHostUrl = sessionStorage[\"appHost-url\"] = data.applicationHostUrl;\r\n                        Application.applicationHostCorePath = data.applicationHostCorePath;\r\n                        Application.applicationSuiteId = data.applicationSuiteId;\r\n\r\n                        var applicationHostDomain = arguments.callee.caller.sourceDomain;\r\n                        host.isTrusted = Client.Types.Url.isSameDomain(window.location.href, applicationHostDomain);\r\n                        if (!host.isTrusted) {\r\n                            var domains = Application.trustedApplicationHostDomains || [];\r\n                            for (var i = 0, len = domains.length; i \u003c len; i++) {\r\n                                if (Client.Types.Url.isSameDomain(domains[i], applicationHostDomain)) {\r\n                                    host.isTrusted = !data.isApplicationHostProxy || data.isApplicationHostTrusted;\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        Client.CrossDomainMessaging.clearTrustedDomains();\r\n                        Client.CrossDomainMessaging.addTrustedDomain(applicationHostDomain);\r\n                        Client.CrossDomainMessaging.addAllowedHandlerBase(Application.ApplicationFacadeStub);\r\n\r\n                        Application.ApplicationHost = host;\r\n                        Application.isHosted = true;\r\n\r\n                        if (host.isTrusted) {\r\n                            Application.sharedSettings = data.sharedSettings;\r\n                        }\r\n\r\n                        if (!host.isTrusted || !data.libraryVersionSupported) {\r\n                            Application.useHostedLibraryResources = false;\r\n                        }\r\n\r\n                        updateTargetDisplayUrl();\r\n\r\n                        if (!Application.isInitialized) {\r\n                            Application.isInitialized = _isInitialized = true;\r\n                            callbacks();\r\n                        }\r\n                    });\r\n                } else if (Application.defaultApplicationHostUrl) {\r\n                    Application.applicationHostUrl = sessionStorage[\"appHost-url\"] || Application.defaultApplicationHostUrl; // use sessionStorage value if specified\r\n                    _initCallbacks = null;\r\n                    Application.isReloading = true;\r\n                    window.location.replace(Application.applicationHostUrl + (Application.defaultApplicationSuiteId ? (\"#app=\" + encodeURIComponent(Application.defaultApplicationSuiteId) + (Application.defaultApplicationEntryPointId ? \"\u0026entry=\" + encodeURIComponent(Application.defaultApplicationEntryPointId) + \"\u0026url=\" + encodeURIComponent(location.href) : \"\")) : \"\"));\r\n                } else {\r\n                    Application.isHosted = false;\r\n                    Application.useHostedLibraryResources = false;\r\n                    Application.isInitialized = _isInitialized = true;\r\n                    callbacks();\r\n                }\r\n            }\r\n            ;\r\n\r\n            var updateTargetDisplayUrl = function () {\r\n                if (Application.isHosted \u0026\u0026 Application.ApplicationHost.isTrusted \u0026\u0026 Application.ApplicationHost.isSupported(\"updateTargetDisplayUrl\")) {\r\n                    Application.ApplicationHost.updateTargetDisplayUrlUnsecure(window.location.href);\r\n                }\r\n            };\r\n            window.addEventListener(\"hashchange\", updateTargetDisplayUrl);\r\n        })(Client.Application || (Client.Application = {}));\r\n        var Application = Client.Application;\r\n    })(SDL.Client || (SDL.Client = {}));\r\n    var Client = SDL.Client;\r\n})(SDL || (SDL = {}));\r\n//# sourceMappingURL=Application.js.map\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl : defaultLocation) + "Application/Application.js");
	globalEval(/*FILE-BEGIN*/"/// \u003creference path=\"Application.ts\" /\u003e\r\nvar SDL;\r\n(function (SDL) {\r\n    (function (Client) {\r\n        /**\r\n        *\timplemented in SDL.Client.HostedApplication, copied to SDL.Client.Core\r\n        **/\r\n        (function (Application) {\r\n            Application.ApplicationFacade = {};\r\n            Application.isApplicationFacadeSecure = undefined;\r\n\r\n            (function (ApplicationFacadeStub) {\r\n                function callApplicationFacade(method, arguments, caller) {\r\n                    if (!Application.isHosted) {\r\n                        throw Error(\"Attempt to call Application facade failed: application is not hosted.\");\r\n                    } else if (!Application.ApplicationFacade[method]) {\r\n                        throw Error(\"Attempt to call Application facade failed: method \u0027\" + method + \"\u0027 is not defined.\");\r\n                    } else if (Application.isApplicationFacadeSecure == undefined) {\r\n                        throw Error(\"Attempt to call Application facade failed: unable to determine security level of the Application facade.\");\r\n                    } else {\r\n                        if (Application.isApplicationFacadeSecure) {\r\n                            if (!Application.ApplicationHost.isTrusted) {\r\n                                throw Error(\"Attempt to call secured Application facade failed: appliction host is untrusted.\");\r\n                            } else if (!caller.applicationId || !caller.applicationDomain) {\r\n                                throw Error(\"Attempt to call secured Application facade failed: unable to determine the caller.\");\r\n                            } else if (caller.applicationId != Application.applicationSuiteId || !Client.Types.Url.isSameDomain(window.location.href, caller.applicationDomain)) {\r\n                                if (!Application.trustedApplications \u0026\u0026 !Application.trustedApplicationDomains) {\r\n                                    throw Error(\"Attempt to call secured Application facade failed: caller untrusted (\" + caller.applicationId + \", \" + caller.applicationDomain + \")\");\r\n                                } else {\r\n                                    var allowed;\r\n                                    var i, len;\r\n                                    if (Application.trustedApplications \u0026\u0026 caller.applicationId != Application.applicationSuiteId \u0026\u0026 Application.trustedApplications.indexOf(caller.applicationId) == -1) {\r\n                                        throw Error(\"Attempt to call secured Application facade failed: caller untrusted (\" + caller.applicationId + \")\");\r\n                                    }\r\n\r\n                                    if (Application.trustedApplicationDomains \u0026\u0026 !Client.Types.Url.isSameDomain(window.location.href, caller.applicationDomain) \u0026\u0026 !Client.Types.Url.isSameDomain(window.location.href, caller.applicationDomain)) {\r\n                                        allowed = false;\r\n                                        for (i = 0, len = Application.trustedApplicationDomains.length; i \u003c len; i++) {\r\n                                            if (Client.Types.Url.isSameDomain(Application.trustedApplicationDomains[i], caller.applicationDomain)) {\r\n                                                allowed = true;\r\n                                                break;\r\n                                            }\r\n                                        }\r\n\r\n                                        if (!allowed) {\r\n                                            throw Error(\"Attempt to call secured Application facade failed: caller untrusted (\" + caller.applicationDomain + \")\");\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        var execute = function (args) {\r\n                            return Application.ApplicationFacade[method].apply(Application.ApplicationFacade, args);\r\n                        };\r\n                        execute.applicationDomain = caller.applicationDomain;\r\n                        execute.applicationId = caller.applicationId;\r\n                        return execute(arguments || []);\r\n                    }\r\n                }\r\n                ApplicationFacadeStub.callApplicationFacade = callApplicationFacade;\r\n            })(Application.ApplicationFacadeStub || (Application.ApplicationFacadeStub = {}));\r\n            var ApplicationFacadeStub = Application.ApplicationFacadeStub;\r\n        })(Client.Application || (Client.Application = {}));\r\n        var Application = Client.Application;\r\n    })(SDL.Client || (SDL.Client = {}));\r\n    var Client = SDL.Client;\r\n})(SDL || (SDL = {}));\r\n//# sourceMappingURL=ApplicationFacade.js.map\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl : defaultLocation) + "Application/ApplicationFacade.js");
	globalEval(/*FILE-BEGIN*/"/// \u003creference path=\"ApplicationHost.ts\" /\u003e\r\nvar SDL;\r\n(function (SDL) {\r\n    (function (Client) {\r\n        (function (Application) {\r\n            /**\r\n            *\timplemented in SDL.Client.HostedApplication, copied to SDL.Client.Core\r\n            **/\r\n            (function (ApplicationHostFacade) {\r\n                var supportedMethods;\r\n\r\n                function applicationEntryPointLoaded(libraryVersion, eventHandler, callback) {\r\n                    var _data;\r\n\r\n                    var isApplicationInitialized = false;\r\n                    var invokeCallback = false;\r\n\r\n                    SDL.Client.Application.addInitializeCallback(function () {\r\n                        isApplicationInitialized = true;\r\n\r\n                        if (SDL.Client.Application.isHosted) {\r\n                            if (!supportedMethods) {\r\n                                var methods = {\r\n                                    applicationEntryPointLoaded: 1,\r\n                                    applicationEntryPointUnloaded: 1,\r\n                                    setCulture: 1,\r\n                                    startCaptureDomEvents: 1,\r\n                                    stopCaptureDomEvents: 1,\r\n                                    setActiveApplicationEntryPoint: 1,\r\n                                    setApplicationEntryPointUrl: 1,\r\n                                    callApplicationFacade: 1,\r\n                                    storeApplicationData: 1,\r\n                                    storeApplicationSessionData: 1,\r\n                                    getApplicationData: 1,\r\n                                    getApplicationDataAsync: 1,\r\n                                    getApplicationSessionData: 1,\r\n                                    getApplicationSessionDataAsync: 1,\r\n                                    clearApplicationData: 1,\r\n                                    clearApplicationSessionData: 1,\r\n                                    removeApplicationData: 1,\r\n                                    removeApplicationSessionData: 1,\r\n                                    resolveCommonLibraryResources: 1,\r\n                                    resolveCommonLibraryResourcesAsync: 1,\r\n                                    getCommonLibraryResources: 1,\r\n                                    getCommonLibraryResource: 1,\r\n                                    triggerAnalyticsEvent: 1\r\n                                };\r\n\r\n                                supportedMethods = {};\r\n\r\n                                for (var method in methods) {\r\n                                    if (SDL.Client.Application.ApplicationHost.isSupported(method)) {\r\n                                        supportedMethods[method] = true;\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            _data = {\r\n                                applicationHostUrl: SDL.Client.Application.applicationHostUrl,\r\n                                applicationHostCorePath: SDL.Client.Application.applicationHostCorePath,\r\n                                applicationSuiteId: SDL.Client.Application.applicationSuiteId,\r\n                                version: SDL.Client.Application.ApplicationHost.version,\r\n                                libraryVersionSupported: SDL.Client.Application.ApplicationHost.libraryVersionSupported,\r\n                                culture: SDL.Client.Application.ApplicationHost.culture,\r\n                                activeApplicationEntryPointId: SDL.Client.Application.ApplicationHost.activeApplicationEntryPointId,\r\n                                activeApplicationId: SDL.Client.Application.ApplicationHost.activeApplicationId,\r\n                                supportedMethods: supportedMethods,\r\n                                sharedSettings: SDL.Client.Application.sharedSettings,\r\n                                isApplicationHostProxy: true,\r\n                                isApplicationHostTrusted: SDL.Client.Application.ApplicationHost.isTrusted\r\n                            };\r\n\r\n                            if (callback) {\r\n                                if (invokeCallback) {\r\n                                    callback(_data);\r\n                                } else if (callback.retire) {\r\n                                    callback.retire();\r\n                                }\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    invokeCallback = !isApplicationInitialized; // callback will be invoked only if the data cannot be returned asynchronously\r\n                    return _data;\r\n                }\r\n                ApplicationHostFacade.applicationEntryPointLoaded = applicationEntryPointLoaded;\r\n\r\n                function applicationEntryPointUnloaded() {\r\n                    // don\u0027t have to do anything\r\n                }\r\n                ApplicationHostFacade.applicationEntryPointUnloaded = applicationEntryPointUnloaded;\r\n\r\n                function setCulture(culture) {\r\n                    SDL.Client.Application.ApplicationHost.setCulture(culture);\r\n                }\r\n                ApplicationHostFacade.setCulture = setCulture;\r\n\r\n                function startCaptureDomEvents(events) {\r\n                    SDL.Client.Application.ApplicationHost.startCaptureDomEvents(events);\r\n                }\r\n                ApplicationHostFacade.startCaptureDomEvents = startCaptureDomEvents;\r\n\r\n                function stopCaptureDomEvents(events) {\r\n                    SDL.Client.Application.ApplicationHost.stopCaptureDomEvents(events);\r\n                }\r\n                ApplicationHostFacade.stopCaptureDomEvents = stopCaptureDomEvents;\r\n\r\n                function setActiveApplicationEntryPoint(applicationEntryPointId, applicationSuiteId) {\r\n                    SDL.Client.Application.ApplicationHost.setActiveApplicationEntryPoint(applicationEntryPointId, applicationSuiteId);\r\n                }\r\n                ApplicationHostFacade.setActiveApplicationEntryPoint = setActiveApplicationEntryPoint;\r\n\r\n                function setApplicationEntryPointUrl(applicationEntryPointId, url, applicationSuiteId, allowedDomains) {\r\n                    SDL.Client.Application.ApplicationHost.setApplicationEntryPointUrl(applicationEntryPointId, url, applicationSuiteId);\r\n                }\r\n                ApplicationHostFacade.setApplicationEntryPointUrl = setApplicationEntryPointUrl;\r\n\r\n                function callApplicationFacade(applicationEntryPointId, method, args, callback, applicationSuiteId, allowedDomains) {\r\n                    SDL.Client.Application.ApplicationHost.callApplicationFacade(applicationEntryPointId, method, args, callback, applicationSuiteId);\r\n                }\r\n                ApplicationHostFacade.callApplicationFacade = callApplicationFacade;\r\n\r\n                function storeApplicationData(key, data) {\r\n                    SDL.Client.Application.ApplicationHost.storeApplicationData(key, data);\r\n                }\r\n                ApplicationHostFacade.storeApplicationData = storeApplicationData;\r\n\r\n                function storeApplicationSessionData(key, data) {\r\n                    SDL.Client.Application.ApplicationHost.storeApplicationSessionData(key, data);\r\n                }\r\n                ApplicationHostFacade.storeApplicationSessionData = storeApplicationSessionData;\r\n\r\n                function getApplicationDataAsync(key, callback) {\r\n                    SDL.Client.Application.ApplicationHost.getApplicationData(key, function (data) {\r\n                        if (callback) {\r\n                            callback(data);\r\n                        }\r\n                    });\r\n                }\r\n                ApplicationHostFacade.getApplicationDataAsync = getApplicationDataAsync;\r\n\r\n                function getApplicationData(key) {\r\n                    var _data;\r\n                    getApplicationDataAsync(key, function (data) {\r\n                        _data = data;\r\n                    });\r\n                    return _data;\r\n                }\r\n                ApplicationHostFacade.getApplicationData = getApplicationData;\r\n\r\n                function getApplicationSessionDataAsync(key, callback) {\r\n                    SDL.Client.Application.ApplicationHost.getApplicationSessionData(key, function (data) {\r\n                        if (callback) {\r\n                            callback(data);\r\n                        }\r\n                    });\r\n                }\r\n                ApplicationHostFacade.getApplicationSessionDataAsync = getApplicationSessionDataAsync;\r\n\r\n                function getApplicationSessionData(key) {\r\n                    var _data;\r\n                    getApplicationSessionDataAsync(key, function (data) {\r\n                        _data = data;\r\n                    });\r\n                    return _data;\r\n                }\r\n                ApplicationHostFacade.getApplicationSessionData = getApplicationSessionData;\r\n\r\n                function clearApplicationData() {\r\n                    SDL.Client.Application.ApplicationHost.clearApplicationData();\r\n                }\r\n                ApplicationHostFacade.clearApplicationData = clearApplicationData;\r\n\r\n                function clearApplicationSessionData() {\r\n                    SDL.Client.Application.ApplicationHost.clearApplicationSessionData();\r\n                }\r\n                ApplicationHostFacade.clearApplicationSessionData = clearApplicationSessionData;\r\n\r\n                function removeApplicationData(key) {\r\n                    SDL.Client.Application.ApplicationHost.removeApplicationData(key);\r\n                }\r\n                ApplicationHostFacade.removeApplicationData = removeApplicationData;\r\n\r\n                function removeApplicationSessionData(key) {\r\n                    SDL.Client.Application.ApplicationHost.removeApplicationSessionData(key);\r\n                }\r\n                ApplicationHostFacade.removeApplicationSessionData = removeApplicationSessionData;\r\n\r\n                function resolveCommonLibraryResourcesAsync(resourceGroupName, callback) {\r\n                    SDL.Client.Application.ApplicationHost.resolveCommonLibraryResources(resourceGroupName, function (result) {\r\n                        if (callback) {\r\n                            callback(result);\r\n                        }\r\n                    });\r\n                }\r\n                ApplicationHostFacade.resolveCommonLibraryResourcesAsync = resolveCommonLibraryResourcesAsync;\r\n\r\n                function resolveCommonLibraryResources(resourceGroupName, callback) {\r\n                    var _result;\r\n                    resolveCommonLibraryResourcesAsync(resourceGroupName, function (result) {\r\n                        _result = result;\r\n                    });\r\n                    return _result;\r\n                }\r\n                ApplicationHostFacade.resolveCommonLibraryResources = resolveCommonLibraryResources;\r\n\r\n                function getCommonLibraryResources(files, version, onFileLoad, onFailure) {\r\n                    SDL.Client.Application.ApplicationHost.getCommonLibraryResources(files, version, onFileLoad, onFailure);\r\n                }\r\n                ApplicationHostFacade.getCommonLibraryResources = getCommonLibraryResources;\r\n\r\n                function getCommonLibraryResource(file, version, onSuccess, onFailure) {\r\n                    SDL.Client.Application.ApplicationHost.getCommonLibraryResource(file, version, onSuccess, onFailure);\r\n                }\r\n                ApplicationHostFacade.getCommonLibraryResource = getCommonLibraryResource;\r\n\r\n                function triggerAnalyticsEvent(event, object) {\r\n                    SDL.Client.Application.ApplicationHost.triggerAnalyticsEvent(event, object);\r\n                }\r\n                ApplicationHostFacade.triggerAnalyticsEvent = triggerAnalyticsEvent;\r\n            })(Application.ApplicationHostFacade || (Application.ApplicationHostFacade = {}));\r\n            var ApplicationHostFacade = Application.ApplicationHostFacade;\r\n        })(Client.Application || (Client.Application = {}));\r\n        var Application = Client.Application;\r\n    })(SDL.Client || (SDL.Client = {}));\r\n    var Client = SDL.Client;\r\n})(SDL || (SDL = {}));\r\n\r\nvar SDL;\r\n(function (SDL) {\r\n    (function (Client) {\r\n        (function (ApplicationHost) {\r\n            ApplicationHost.ApplicationHostFacade = SDL.Client.Application.ApplicationHostFacade;\r\n            Client.CrossDomainMessaging.addAllowedHandlerBase(ApplicationHost.ApplicationHostFacade);\r\n        })(Client.ApplicationHost || (Client.ApplicationHost = {}));\r\n        var ApplicationHost = Client.ApplicationHost;\r\n    })(SDL.Client || (SDL.Client = {}));\r\n    var Client = SDL.Client;\r\n})(SDL || (SDL = {}));\r\n//# sourceMappingURL=ApplicationHostFacade.js.map\r\n"/*FILE-END*/ + '\n//@ sourceURL=' + (packageContextUrl ? packageContextUrl : defaultLocation) + "Application/ApplicationHostFacade.js");
})();