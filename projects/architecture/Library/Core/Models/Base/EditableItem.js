/*! @namespace {SDL.Client.Models.Base.EditableItem} */
SDL.Client.Types.OO.createInterface("SDL.Client.Models.Base.EditableItem");

/*
	Base implementation of editable items (items that can be loaded, changed and saved back).
*/
SDL.Client.Models.Base.EditableItem.$constructor = function SDL$Client$Models$Base$EditableItem$constructor(id)
{
	this.addInterface("SDL.Client.Models.Base.Item", [id]);

	var p = this.properties;
	p.changed;
	p.saving;
	p.validationException;
};

SDL.Client.Models.Base.EditableItem.prototype.invalidateInterfaceCachedState = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$Base$EditableItem$invalidateInterfaceCachedState()
{
	var p = this.properties;
	p.changed = false;
	p.validationException = undefined;
});

/*
	Returns a boolean indicating whether properties of the document can be edited.
*/
SDL.Client.Models.Base.EditableItem.prototype.canEditProperties = function SDL$Client$Models$Base$EditableItem$canEditProperties()
{
	return true;
};

/*
	Sets a flag and triggers an event when the item has changed.
*/
SDL.Client.Models.Base.EditableItem.prototype.setChanged = function SDL$Client$Models$Base$EditableItem$setChanged(changeData)
{
	var p = this.properties;
	this._removeValidationResult(changeData && changeData.property || null);
	if (!p.changed || changeData)
	{
		p.changed = true;
		this.fireEvent("change", changeData);
	}
};

/*
	Returns a boolean indicating whether the document has unsaved changes.
*/
SDL.Client.Models.Base.EditableItem.prototype.isChanged = function SDL$Client$Models$Base$EditableItem$isChanged()
{
	return this.properties.changed || false;
};

SDL.Client.Models.Base.EditableItem.prototype.load = function SDL$Client$Models$Base$EditableItem$load(reload)
{
	if (reload || !this.isChanged())
	{
		return this.callBase("SDL.Client.Models.Base.Item", "load", [reload]);
	}
	else
	{
		return false;
	}
};

/*
	Returns a boolean indicating whether the document has unsaved changes.
*/
SDL.Client.Models.Base.EditableItem.prototype.setTitle = function SDL$Client$Models$Base$EditableItem$setTitle(value)
{
	if (this.canEditProperties() && this.getTitle() != value)
	{
		this.properties.title = value;
		this.setChanged({ property: "title", value: value });
	}
};

/*
	Returns a boolean indicating whether the changes to the current document can be saved.
*/
SDL.Client.Models.Base.EditableItem.prototype.canSave = function SDL$Client$Models$Base$EditableItem$canSave()
{
	return this.isChanged();
};

/*
	Saves item's changed data to the server. If the item has not changed then returns false, true otherwise.
	Save can be cancelled by validate() method if the data is not valid.
	The method is asynchronous, it will trigger "save" or "savefailed" event when the operation completes.
	If save is successful it will trigger "load" event as well when the operation completes, or "loadfailed" otherwise.
*/

SDL.Client.Models.Base.EditableItem.prototype.save = function SDL$Client$Models$Base$EditableItem$save()
{
	this.collectData();
	if (this.canSave() && this.validate())
	{
		this._setSaving();
		this._setLoading();
		this._executeSave();
		return true;
	}
	else
	{
		return false;
	}
};

/*
	Fires 'collectdata' event that allows GUI's to apply their changes to the item and perform validation.
*/
SDL.Client.Models.Base.EditableItem.prototype.collectData = function SDL$Client$Models$Base$EditableItem$collectData()
{
	this.fireEvent("collectdata");
};

/*
	Fires 'validate' event that allows GUI's to perform validation.
	This event can be cancelled, then validate() will return false
*/
SDL.Client.Models.Base.EditableItem.prototype.validate = function SDL$Client$Models$Base$EditableItem$validate()
{
	var p = this.properties;

	if (p.validationException)
	{
		this.fireEvent("validatefailed", p.validationException);
		return false;
	}
	else
	{
		var e = this.fireEvent("validate", new SDL.Client.Exception.ValidationException());
		if (e && e.defaultPrevented)
		{
			// validation exception generated by a view is not stored with the item
			// and is only availalble as part of "validatefailed" event's data.
			// for validation rules that are applicable regardless of views loaded
			// validation should be implemented by the item itself by overriding the 'validate()' method

			this.fireEvent("validatefailed", e.data);
			return false;
		}
		else
		{
			return true;
		}
	}
};

SDL.Client.Models.Base.EditableItem.prototype._addValidationResult = function SDL$Client$Models$Base$EditableItem$_addValidationResult(property, errorCode, message, description)
{
	var validationException = this.properties.validationException;
	if (!validationException)
	{
		validationException = this.properties.validationException = new SDL.Client.Exception.ValidationException();
	}
	validationException.addValidationResult(property, errorCode, message, description)
};

SDL.Client.Models.Base.EditableItem.prototype._removeValidationResult = function SDL$Client$Models$Base$EditableItem$_removeValidationResult(property)
{
	var p = this.properties;
	if (p.validationException)
	{
		p.validationException.removeValidationResult(property);
		if (!p.validationException.getValidationResults())
		{
			p.validationException = null;
		}
	}
};

SDL.Client.Models.Base.EditableItem.prototype.getValidationException = function SDL$Client$Models$Base$EditableItem$getValidationException()
{
	return this.properties.validationException;
};

/*
	Returns a boolean indicating whether the current item is being saved.
*/
SDL.Client.Models.Base.EditableItem.prototype.isSaving = function SDL$Client$Models$Base$EditableItem$isSaving()
{
	return this.properties.saving;
};

SDL.Client.Models.Base.EditableItem.prototype._setSaving = function SDL$Client$Models$Base$EditableItem$_setSaving()
{
	this.properties.saving = true;
	this.fireEvent("saving");
};

SDL.Client.Models.Base.EditableItem.prototype._setSaved = function SDL$Client$Models$Base$EditableItem$_setSaved()
{
	this.properties.saving = false;
	this.fireEvent("save");
};

SDL.Client.Models.Base.EditableItem.prototype._executeSave = function SDL$Client$Models$Base$EditableItem$_executeSave()
{
	this._onLoad();	// to be overridden
};

SDL.Client.Models.Base.EditableItem.prototype.afterSetLoaded = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$Base$EditableItem$afterSetLoaded()
{
	if (this.isSaving())
	{
		this._setSaved();
	}
});

SDL.Client.Models.Base.EditableItem.prototype.afterLoadFailed = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$Base$EditableItem$afterLoadFailed(error, webRequest)
{
	if (this.isSaving())
	{
		this.properties.saving = false;
		this.fireEvent("savefailed", {error: error, errorCode: webRequest ? webRequest.statusCode : null});
	}
});

// ------- SDL.Client.Models.MarshallableObject implementations/overrides
SDL.Client.Models.Base.EditableItem.prototype.pack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$Base$EditableItem$pack()
{
	var p = this.properties;
	return {
		saving: p.saving,
		changed: p.changed,
		validationException: p.validationException
	};
});

SDL.Client.Models.Base.EditableItem.prototype.unpack = SDL.Client.Types.OO.nonInheritable(function SDL$Client$Models$Base$EditableItem$unpack(data)
{
	if (data)
	{
		var p = this.properties;
		p.saving = data.saving;
		p.changed = data.changed;
		if (data.validationException)
		{
			p.validationException = new SDL.Client.Exception.ValidationException(data.validationException.getValidationResults());
		}
	}
});
// ------- end of SDL.Client.Models.MarshallableObject overrides
